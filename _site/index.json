{
  "api/ASE_Assignment.AboutUs.html": {
    "href": "api/ASE_Assignment.AboutUs.html",
    "title": "Class AboutUs | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AboutUs Namespace ASE_Assignment Assembly ASE_Assignment.dll Represents the \"About Us\" form in the Advanced Software Engineering application. public class AboutUs : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form AboutUs Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This form provides information about the application, including the developer, the purpose of the project, and key features. The information is displayed using a dynamically created RichTextBox. Constructors AboutUs() public AboutUs() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_Assignment.AppCanvas.MyAppCanvas.html": {
    "href": "api/ASE_Assignment.AppCanvas.MyAppCanvas.html",
    "title": "Class MyAppCanvas | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class MyAppCanvas Namespace ASE_Assignment.AppCanvas Assembly ASE_Assignment.dll Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas. public class MyAppCanvas : ICanvas Inheritance object MyAppCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class provides methods for drawing various shapes (lines, circles, rectangles, triangles) and text on a canvas represented by a bitmap. It supports operations such as setting the pen color and size, moving the pen to a new position, and resetting the canvas to its initial state. The canvas is defined by a width (XSIDE) and height (YSIDE), which are used to constrain drawing operations within the canvas boundaries. The class utilizes the Graphics object to perform rendering on the canvas. Constructors MyAppCanvas() Initializes a new instance of the MyAppCanvas class with default canvas size. public MyAppCanvas() Remarks This constructor sets the canvas size to the default values defined by the constants XSIDE and YSIDE. It also initializes the pen size to 1 and sets the pen color to black (RGB: 0, 0, 0). Exceptions CanvasException Thrown if the canvas size cannot be set properly or if invalid values are provided for pen size or color. Properties Filled public bool Filled { get; set; } Property Value bool PenColour Gets or sets the pen color for the next drawing operation. public object PenColour { get; set; } Property Value object Remarks This property allows you to retrieve or modify the current pen color used for drawing operations. The color is represented as a Color object, and it determines the color of lines, shapes, and other drawn elements on the canvas. Exceptions InvalidCastException Thrown if the provided value for the pen color is not a valid Color object. PenSize Gets or sets the pen size, which determines the thickness of the lines drawn. public int PenSize { get; set; } Property Value int The pen size, which is a positive integer. It determines how thick the lines will appear on the canvas. A value greater than zero is required. If the value is zero or negative, an exception will be thrown. Exceptions CanvasException Thrown when the pen size is set to a value less than or equal to zero. XSIDE The width of the canvas. public int XSIDE { get; set; } Property Value int Remarks This defines the horizontal dimension of the canvas. It is used to validate the X positions during drawing operations. The default value is 640 pixels. Xpos Gets or sets the X position for the next drawing operation. public int Xpos { get; set; } Property Value int Remarks This property controls the X coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). YSIDE The height of the canvas. public int YSIDE { get; set; } Property Value int Remarks This defines the vertical dimension of the canvas. It is used to validate the Y positions during drawing operations. The default value is 480 pixels. Ypos Gets or sets the Y position for the next drawing operation. public int Ypos { get; set; } Property Value int Remarks This property controls the Y coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). Methods Circle(int, bool) Attempts to draw a circle at the current pen position, either filled or outlined, depending on the specified parameter. Ensures the radius is valid and checks if the circle fits within the canvas boundaries. If the radius is invalid or the circle exceeds the canvas size, a warning is logged, and drawing is skipped. public void Circle(int radius, bool filled) Parameters radius int The radius of the circle. Must be a positive integer greater than zero. If the radius is invalid, the circle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the circle should be filled or outlined: true: Draws a filled circle. false: Draws an outlined circle. Examples The following example demonstrates how to draw a filled circle with a radius of 50: Circle(50, true); Remarks The method ensures that drawing operations do not disrupt the program's flow. If the circle cannot be drawn due to invalid input or canvas boundary constraints, the method logs a warning and continues execution. Exceptions CanvasException This exception is caught internally to prevent program termination. It is used to log errors for invalid radius values or when the circle exceeds canvas dimensions. Clear() Clears the canvas by filling it with a default background color. public void Clear() DrawTo(int, int) Draws a line from the current pen position to a specified endpoint on the canvas. public void DrawTo(int x, int y) Parameters x int The X coordinate of the endpoint of the line. This value represents the position along the horizontal axis. y int The Y coordinate of the endpoint of the line. This value represents the position along the vertical axis. Examples The following example demonstrates how to draw a line from the current pen position to the point (100, 50): DrawTo(100, 50); Remarks The method updates the pen's current position to the specified endpoint after the line is drawn. Subsequent drawing operations will use the new position as the starting point. If the line cannot be drawn due to an uninitialized graphics context, the method logs a warning but does not interrupt execution. Exceptions CanvasException Thrown if the graphics context is not initialized or if the specified coordinates are outside the canvas boundaries. GetGraphics() Returns the current Graphics object used for drawing on the canvas. public Graphics GetGraphics() Returns Graphics The Graphics object associated with the current canvas. Examples The following example demonstrates how to retrieve the current Graphics object and handle any potential exceptions if the graphics object is not initialized: try { Graphics currentGraphics = GetGraphics(); // Use currentGraphics for drawing operations, if not null } catch (CanvasException ex) { Console.WriteLine($\"Error: {ex.Message}\"); // Handle the error (e.g., log it) } Remarks This method allows access to the internal Graphics object used for drawing on the canvas. If the graphics object has not been initialized (i.e., it is null), a BOOSE.CanvasException is thrown, indicating that the drawing cannot proceed. Exceptions CanvasException Thrown if the graphics object is not initialized or is null. This exception is thrown when there is an attempt to retrieve the Graphics object before it is set. MoveTo(int, int) Moves the drawing cursor to a specified position on the canvas without drawing any lines. public void MoveTo(int x, int y) Parameters x int The X coordinate to move the cursor to. Represents the horizontal position on the canvas. Must be within the canvas boundaries. y int The Y coordinate to move the cursor to. Represents the vertical position on the canvas. Must be within the canvas boundaries. Examples The following example demonstrates how to move the pen to position (50, 100) without drawing: MoveTo(50, 100); Remarks This method updates the current position of the pen to the specified coordinates (x, y) without performing any drawing operations. It ensures that subsequent drawing operations begin from the new cursor position. If the specified coordinates are outside the canvas boundaries, the position is not updated, and a warning is logged. Exceptions CanvasException Thrown if the specified coordinates are outside the canvas boundaries defined by XSIDE and YSIDE. Rect(int, int, bool) Draws a rectangle at the current cursor position with the specified dimensions and style (filled or outline). public void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. height int The height of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the rectangle should be filled or outlined: true: Draws a filled rectangle. false: Draws an outlined rectangle. Examples The following example demonstrates how to draw a filled rectangle with a width of 100 and height of 50: Rect(100, 50, true); Remarks The rectangle is drawn starting from the current cursor position (xPos, yPos). If the rectangle's dimensions are invalid or it exceeds the canvas boundaries, it will not be drawn, and a warning will be logged. This ensures the program continues execution without interruption. Exceptions CanvasException Thrown if the specified rectangle dimensions are invalid or if the rectangle exceeds canvas boundaries. Reset() Resets the canvas to its initial state by resetting the drawing cursor position to the top-left corner. public void Reset() Examples The following example demonstrates how to reset the canvas and start fresh with drawing: Reset(); // Resets the drawing cursor to the top-left corner Remarks This method resets the drawing cursor (pen position) to the initial position at (0, 0). Any previous drawing operations will not be affected, but the next drawing operations will begin from the top-left corner of the canvas. Exceptions CanvasException Thrown if there is an issue with resetting the canvas. For example, if the canvas is in an invalid state or has not been properly initialized, an exception could be thrown. Set(int, int) Sets the canvas size and initializes the drawing surface. public void Set(int xsize, int ysize) Parameters xsize int The width of the canvas, in pixels. ysize int The height of the canvas, in pixels. Remarks This method initializes the canvas with the specified width and height. It also sets the starting position of the drawing cursor (xPos, yPos) to the top-left corner (0, 0). After setting the canvas size, it creates a new Bitmap object for drawing and a corresponding Graphics object. Additionally, it clears the canvas to prepare for drawing. Exceptions CanvasException Thrown if the width or height of the canvas is invalid (e.g., negative or zero), or if there is an error during the initialization of the drawing surface. SetCanvas(Bitmap, Graphics) Sets the canvas by assigning the provided Bitmap and Graphics objects for drawing operations. public void SetCanvas(Bitmap newBitmap, Graphics newGraphics) Parameters newBitmap Bitmap The Bitmap object to be used as the canvas surface. This object holds the pixel data for the canvas. newGraphics Graphics The Graphics object to be used for rendering on the canvas. This object provides drawing capabilities like shapes, text, and images. Examples The following example demonstrates how to initialize a canvas with a 500x500 Bitmap: Bitmap bitmap = new Bitmap(500, 500); Graphics graphics = Graphics.FromImage(bitmap); SetCanvas(bitmap, graphics); Remarks This method initializes or reinitializes the internal canvas by setting the Bitmap and Graphics objects. After setting the canvas, it clears the drawing surface with a white background to provide a fresh start. If you need a specific background color, you can modify the method to accept a color parameter or change the default behavior. Exceptions CanvasException Thrown if either newBitmap or newGraphics is null. SetColour(int, int, int) Sets the pen color using specified RGB values. public void SetColour(int red, int green, int blue) Parameters red int The red component of the color, ranging from 0 to 255. green int The green component of the color, ranging from 0 to 255. blue int The blue component of the color, ranging from 0 to 255. Examples The following example demonstrates how to set the pen color to blue: SetColour(0, 0, 255); // Sets the pen color to pure blue Remarks This method allows precise control of the pen's color by specifying the intensity of red, green, and blue components. If an invalid value is provided, an exception is thrown. The pen is updated with the new color and retains the existing pen size. Exceptions CanvasException Thrown when any of the RGB components are outside the valid range of 0 to 255. Tri(int, int) Draws a triangle within the specified bounding rectangle, ensuring it fits within the canvas boundaries. public void Tri(int width, int height) Parameters width int The width of the bounding rectangle, which defines the base of the triangle. height int The height of the bounding rectangle, which defines the height of the triangle. Examples The following example demonstrates how to draw a triangle with width 100 and height 50: Tri(100, 50); // Draws a triangle with base 100 and height 50 Remarks The method validates the triangle's width and height to ensure they are positive. It then checks if the triangle's bounding points fit within the canvas boundaries. If any point exceeds the canvas size, a CanvasException is thrown. Exceptions CanvasException Thrown if the triangle dimensions are invalid, exceed canvas boundaries, or are non-positive. WriteText(string) Draws the specified text at the current cursor position on the canvas. public void WriteText(string text) Parameters text string The text to be drawn on the canvas. Examples The following example demonstrates how to draw text at the current position: WriteText(\"Hello, Canvas!\"); // Draws the text \"Hello, Canvas!\" at the current cursor position Remarks The method checks whether the input text is valid (not null, empty, or whitespace). If the text exceeds the canvas boundaries, a BOOSE.CanvasException is thrown. The method also ensures the graphics object is initialized before attempting to draw the text. Exceptions CanvasException Thrown if the text is null, empty, or exceeds canvas boundaries. It is also thrown if the graphics object is not initialized. getBitmap() Returns the Bitmap object representing the current drawing on the canvas. public object getBitmap() Returns object The Bitmap object associated with the current canvas. This object contains the pixel data for the current drawing and can be used to save or manipulate the canvas image. Remarks The Bitmap object returned by this method reflects the current state of the canvas, including any drawings made with the pen. If no drawing has been done, it will return an empty or unmodified bitmap. Exceptions CanvasException Thrown if the Bitmap object has not been initialized or there is an issue with accessing it."
  },
  "api/ASE_Assignment.AppCanvas.html": {
    "href": "api/ASE_Assignment.AppCanvas.html",
    "title": "Namespace ASE_Assignment.AppCanvas | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Namespace ASE_Assignment.AppCanvas Classes MyAppCanvas Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas."
  },
  "api/ASE_Assignment.Commands.AppCast.html": {
    "href": "api/ASE_Assignment.Commands.AppCast.html",
    "title": "Class AppCast | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppCast Namespace ASE_Assignment.Commands Assembly ASE_Assignment.dll Represents a command to cast values between variables of different types. public class AppCast : Command, ICommand Inheritance object Command AppCast Implements ICommand Inherited Members Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Examples The following example demonstrates how to use the AppCast class: AppCast castCommand = new AppCast(); castCommand.Set(program, \"intVar realVar\"); castCommand.Compile(); castCommand.Execute(); Remarks The AppCast class allows casting an integer variable to a real variable or vice versa. It validates the variables, ensures their existence, and performs the type-safe casting operation during execution. Methods CheckParameters(string[]) Validates the parameters for the casting operation. public override void CheckParameters(string[] parameter) Parameters parameter string[] The array of parameters passed to the command. Examples The following example demonstrates parameter validation: castCommand.CheckParameters(new string[] { \"intVar\", \"realVar\" }); Remarks This method ensures that the parameter list contains exactly two items: the source variable and the target variable. Exceptions CommandException Thrown if the number of parameters is not exactly two. Compile() Compiles the casting command by validating and linking variables. public override void Compile() Examples The following example demonstrates how to compile a cast command: castCommand.Compile(); Remarks This method ensures that the source and target variables exist in the program and validates that the source variable is not of type AppReal, as casting from real to integer is not supported. Exceptions CommandException Thrown if one or both variables do not exist or if an invalid cast is attempted. Execute() Executes the casting operation between the source and target variables. public override void Execute() Examples The following example demonstrates how to execute a cast command: castCommand.Execute(); Remarks This method performs the casting operation, converting the value of the source integer variable into the target real variable. The source and target commands are cast to their respective types before the operation. Exceptions InvalidCastException Thrown if the source or target variables cannot be cast to the expected types."
  },
  "api/ASE_Assignment.Commands.AppCircle.html": {
    "href": "api/ASE_Assignment.Commands.AppCircle.html",
    "title": "Class AppCircle | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppCircle Namespace ASE_Assignment.Commands Assembly ASE_Assignment.dll Represents a command to draw a circle on a canvas. public class AppCircle : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter AppCircle Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class extends the BOOSE.CommandOneParameter class and allows drawing circles of specified radius on the canvas. Includes proper exception handling for invalid parameters and radius constraints. Constructors AppCircle() Initializes a new instance of the AppCircle class. public AppCircle() AppCircle(Canvas, int) Initializes a new instance of the AppCircle class with a specified canvas and radius. public AppCircle(Canvas canvas, int radius) Parameters canvas Canvas The canvas on which the circle will be drawn. radius int The radius of the circle. Exceptions RestrictionException Thrown when the radius exceeds the allowed limit of 2000. Methods CheckParameters(string[]) Validates the parameters for the circle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to draw a circle. public override void Execute() Exceptions RestrictionException Thrown when the radius exceeds the allowed limit of 2000. CommandException Thrown when an unexpected error occurs."
  },
  "api/ASE_Assignment.Commands.AppDrawTo.html": {
    "href": "api/ASE_Assignment.Commands.AppDrawTo.html",
    "title": "Class AppDrawTo | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppDrawTo Namespace ASE_Assignment.Commands Assembly ASE_Assignment.dll Represents a command to draw to a specified position on a canvas. public class AppDrawTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppDrawTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class extends the BOOSE.CommandTwoParameters class and allows drawing to a specific position (x, y) on the canvas. Includes proper exception handling for invalid parameters. Constructors AppDrawTo() Initializes a new instance of the AppDrawTo class. public AppDrawTo() AppDrawTo(Canvas, int, int) Initializes a new instance of the AppDrawTo class with a specified canvas and coordinates. public AppDrawTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas on which the drawing will occur. x int The x-coordinate to draw to. y int The y-coordinate to draw to. Exceptions RestrictionException Thrown when coordinates are invalid (e.g., negative). Methods CheckParameters(string[]) Validates the parameters for the draw-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to draw to the specified position. public override void Execute() Exceptions CommandException Thrown when an unexpected error occurs during execution."
  },
  "api/ASE_Assignment.Commands.AppElse.html": {
    "href": "api/ASE_Assignment.Commands.AppElse.html",
    "title": "Class AppElse | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppElse Namespace ASE_Assignment.Commands Assembly ASE_Assignment.dll Represents the \"Else\" command in a program, providing branching logic for conditional execution. public class AppElse : AppCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand AppCompoundCommand AppElse Implements ICommand Inherited Members AppCompoundCommand.CorrespondingCommand AppCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Examples The following demonstrates how to use the AppElse class in a program: AppElse elseCommand = new AppElse(); elseCommand.Set(program, \"else\"); elseCommand.Compile(); elseCommand.Execute(); Remarks The AppElse class works in conjunction with conditional commands like \"If\" to define an alternate block of commands to execute when the primary condition is false. It validates its parameters, sets up execution flow, and determines when to skip or execute the \"Else\" block. Constructors AppElse() Initializes a new instance of the AppElse class. public AppElse() Remarks The constructor does not impose any instance restrictions. It simply creates a new \"Else\" command to be added to the program's command stack. Properties CorrespondingEnd Gets or sets the corresponding BOOSE.End command for this \"Else\" block. public End CorrespondingEnd { get; set; } Property Value End The BOOSE.End command associated with this \"Else\" command. Remarks This property provides access to the linked BOOSE.End command, allowing the program to manage the flow of execution through the conditional structure. Methods CheckParameters(string[]) public override void CheckParameters(string[] parameters) Parameters parameters string[] Compile() Compiles the \"Else\" command and sets up its execution flow. public override void Compile() Examples elseCommand.Compile(); Remarks This method links the \"Else\" command to its corresponding conditional command (e.g., \"If\"), assigns the line numbers for execution flow, and ensures the structure of the conditional block is valid. Exceptions CommandException Thrown if the program structure is invalid or if the corresponding conditional command is missing. Execute() Executes the \"Else\" command during runtime. public override void Execute() Examples elseCommand.Execute(); Remarks This method determines whether to execute the commands within the \"Else\" block or skip them. If the condition of the corresponding command is true, it skips the \"Else\" block by jumping to the end line number."
  },
  "api/ASE_Assignment.Commands.AppFor.html": {
    "href": "api/ASE_Assignment.Commands.AppFor.html",
    "title": "Class AppFor | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppFor Namespace ASE_Assignment.Commands Assembly ASE_Assignment.dll Represents an application-specific implementation of the BOOSE.For class, providing functionality to reset or decrease a private static field. public class AppFor : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For AppFor Implements ICommand Inherited Members For.Compile() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class overrides the execution logic of the BOOSE.For class and includes methods to manipulate a private static field in the BOOSE.Boolean class using reflection. Methods Execute() Executes the overridden logic and resets the private static field to 0. public override void Execute() Examples var appFor = new AppFor(); appFor.Execute(); Remarks This method overrides the BOOSE.For.Execute() method to include resetting the private static field 꿁 to 0 after executing the base logic. ResetOrDecreaseCount(int) Resets or decreases the value of a private static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var appFor = new AppFor(); appFor.ResetOrDecreaseCount(5); Remarks This method accesses the private static field 꿁 in the BOOSE.Boolean class using reflection and updates its value. Exceptions BOOSEException Thrown when the private field 꿁 cannot be accessed using reflection."
  },
  "api/ASE_Assignment.Commands.AppIf.html": {
    "href": "api/ASE_Assignment.Commands.AppIf.html",
    "title": "Class AppIf | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppIf Namespace ASE_Assignment.Commands Assembly ASE_Assignment.dll Represents the \"If\" command in a program, enabling conditional execution of commands. public class AppIf : AppCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand AppCompoundCommand AppIf Implements ICommand Inherited Members AppCompoundCommand.CorrespondingCommand AppCompoundCommand.CheckParameters(string[]) AppCompoundCommand.Compile() AppCompoundCommand.ResetOrDecreaseCount(int) AppConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Examples The following demonstrates how to use the AppIf class in a program: AppIf ifCommand = new AppIf(); ifCommand.Set(program, \"if x > 10\"); ifCommand.Compile(); ifCommand.Execute(); Remarks The AppIf class extends AppCompoundCommand to handle conditional logic. It removes instance restrictions, allowing unlimited \"If\" commands to be created and used in the program. This command validates, compiles, and executes conditional logic, branching program flow based on specified conditions. Constructors AppIf() Initializes a new instance of the AppIf class. public AppIf() Examples The following demonstrates how to create an instance of the AppIf class: AppIf ifCommand = new AppIf(); Remarks This constructor does not enforce any instance restrictions, allowing multiple instances of the \"If\" command to be created. It is used to set up conditional logic within the program. Methods ReduceRestrictions() Removes instance restriction logic for the \"If\" command. protected void ReduceRestrictions() Examples This method is automatically invoked during the initialization of the \"If\" command and does not require explicit calls: AppIf ifCommand = new AppIf(); Remarks This method overrides the restriction logic from the base class, effectively disabling any limits on the number of \"If\" command instances. It is intentionally left blank to bypass any restrictions."
  },
  "api/ASE_Assignment.Commands.AppMoveTo.html": {
    "href": "api/ASE_Assignment.Commands.AppMoveTo.html",
    "title": "Class AppMoveTo | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppMoveTo Namespace ASE_Assignment.Commands Assembly ASE_Assignment.dll Represents a command to move to a specified position on a canvas. public class AppMoveTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppMoveTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class extends the BOOSE.CommandTwoParameters class and allows moving to a specific position (x, y) on the canvas. Includes proper exception handling for invalid parameters. Constructors AppMoveTo() Initializes a new instance of the AppMoveTo class. public AppMoveTo() AppMoveTo(Canvas, int, int) Initializes a new instance of the AppMoveTo class with a specified canvas and coordinates. public AppMoveTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas on which the move operation will occur. x int The x-coordinate to move to. y int The y-coordinate to move to. Exceptions RestrictionException Thrown when coordinates exceed the allowed limit of 2000. Methods CheckParameters(string[]) Validates the parameters for the move-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to move to the specified position. public override void Execute() Exceptions RestrictionException Thrown when the coordinates exceed the allowed limit of 2000. CommandException Thrown when an unexpected error occurs during execution."
  },
  "api/ASE_Assignment.Commands.AppPenColour.html": {
    "href": "api/ASE_Assignment.Commands.AppPenColour.html",
    "title": "Class AppPenColour | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppPenColour Namespace ASE_Assignment.Commands Assembly ASE_Assignment.dll Represents a command to set the pen color on a canvas. public class AppPenColour : CommandThreeParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandThreeParameters AppPenColour Implements ICommand Inherited Members CommandThreeParameters.param3 CommandThreeParameters.param3unprocessed CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class extends the BOOSE.CommandThreeParameters class and allows setting a specific color (R, G, B) for the pen. Includes proper exception handling for invalid parameters. Constructors AppPenColour() Initializes a new instance of the AppPenColour class. public AppPenColour() AppPenColour(Canvas, int, int, int) Initializes a new instance of the AppPenColour class with a specified canvas and color parameters. public AppPenColour(Canvas canvas, int r, int g, int b) Parameters canvas Canvas The canvas on which the pen color operation will occur. r int The red component of the pen color. g int The green component of the pen color. b int The blue component of the pen color. Exceptions RestrictionException Thrown when any color component exceeds the allowed limits (0-255). Methods CheckParameters(string[]) Validates the parameters for the pen color command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to set the pen color. public override void Execute() Exceptions RestrictionException Thrown when the color components are out of the allowed range (0-255). CommandException Thrown when an unexpected error occurs during execution."
  },
  "api/ASE_Assignment.Commands.AppRectangle.html": {
    "href": "api/ASE_Assignment.Commands.AppRectangle.html",
    "title": "Class AppRectangle | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppRectangle Namespace ASE_Assignment.Commands Assembly ASE_Assignment.dll Represents a command to draw a rectangle on the canvas. public class AppRectangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppRectangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class extends the BOOSE.CommandTwoParameters class and allows drawing a rectangle with a specified width and height. Includes proper exception handling for invalid parameters. Constructors AppRectangle() Initializes a new instance of the AppRectangle class. public AppRectangle() AppRectangle(Canvas, int, int) Initializes a new instance of the AppRectangle class with a specified canvas, width, and height. public AppRectangle(Canvas canvas, int width, int height) Parameters canvas Canvas The canvas on which the rectangle will be drawn. width int The width of the rectangle. height int The height of the rectangle. Exceptions RestrictionException Thrown when width or height exceed the allowed limit of 2000. Methods CheckParameters(string[]) Validates the parameters for the rectangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to draw the rectangle on the canvas. public override void Execute() Exceptions RestrictionException Thrown when the width or height exceeds the allowed limit of 2000. CommandException Thrown when an unexpected error occurs during execution."
  },
  "api/ASE_Assignment.Commands.AppWhile.html": {
    "href": "api/ASE_Assignment.Commands.AppWhile.html",
    "title": "Class AppWhile | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppWhile Namespace ASE_Assignment.Commands Assembly ASE_Assignment.dll public class AppWhile : AppCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand AppCompoundCommand AppWhile Implements ICommand Inherited Members AppCompoundCommand.CorrespondingCommand AppCompoundCommand.CheckParameters(string[]) AppCompoundCommand.Compile() AppCompoundCommand.ResetOrDecreaseCount(int) AppConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppWhile() Initializes a new instance of the AppWhile class. public AppWhile() Examples The following demonstrates how to create an instance of the AppWhile class: AppWhile whileCommand = new AppWhile(); Remarks This constructor does not enforce any instance restrictions, allowing multiple instances of the \"While\" command to be created. It is used to set up loop logic within the program. Methods ReduceRestrictions() protected void ReduceRestrictions()"
  },
  "api/ASE_Assignment.Commands.Clear.html": {
    "href": "api/ASE_Assignment.Commands.Clear.html",
    "title": "Class Clear | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class Clear Namespace ASE_Assignment.Commands Assembly ASE_Assignment.dll Represents a command that clears the Canvas. The command does not take any parameters. public class Clear : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Clear Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The Clear class is used to clear the contents of the Canvas. Since no parameters are required for this command, the CheckParameters(string[]) method is left empty. Clears all elements on the Canvas when executed. Does not throw any exceptions by itself, as it has no parameter validation. Constructors Clear() Initializes a new instance of the Clear class with default values. public Clear() Remarks This constructor is used when no specific canvas reference is needed to initialize the command. The Canvas object will be provided when the Execute() method is called. Clear(Canvas) Initializes a new instance of the Clear class with a specified Canvas. public Clear(Canvas c) Parameters c Canvas The BOOSE.Canvas object on which the clear operation will be performed. Remarks This constructor is used when the command is initialized with a known Canvas object that the operation will affect. Methods CheckParameters(string[]) Checks the parameters provided for the Clear command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters. This list is ignored since no parameters are required for the Clear command. Remarks Since the Clear command does not take any parameters, this method does not perform any validation. It remains empty to ensure that no unexpected behavior occurs when no parameters are provided. Execute() Executes the Clear command to clear the contents of the Canvas. public override void Execute() Examples The following example demonstrates how to use the Clear class: Canvas myCanvas = new Canvas(); Clear clearCommand = new Clear(myCanvas); clearCommand.Execute(); // Clears the canvas Remarks The Execute() method calls the Canvas' BOOSE.Canvas.Clear() method to clear the canvas. Since this command does not require parameters, no validation is necessary for execution."
  },
  "api/ASE_Assignment.Commands.Fill.html": {
    "href": "api/ASE_Assignment.Commands.Fill.html",
    "title": "Class Fill | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class Fill Namespace ASE_Assignment.Commands Assembly ASE_Assignment.dll Represents a command that sets the fill state for a shape on the Canvas. The command takes one parameter: a string that indicates whether the shape should be filled. public class Fill : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Fill Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The Fill class is responsible for setting the fill state of the shape on the Canvas. It validates the fill state (either \"true\" or \"false\") and applies the fill setting accordingly. The parameter must be either \"true\" or \"false\". Throws a BOOSE.CommandException if the parameter is invalid. Constructors Fill() Initializes a new instance of the Fill class with default values. public Fill() Remarks This constructor can be used when no initial text value is provided. The text can be set later using the Execute() method. Fill(Canvas, string) Initializes a new instance of the Fill class with a specified Canvas and text value. public Fill(Canvas c, string text) Parameters c Canvas The BOOSE.Canvas object on which the fill state will be applied. text string A string representing the fill state, either \"true\" or \"false\". Remarks Use this constructor when creating the Fill command with a known text value and Canvas reference. Methods CheckParameters(string[]) Validates the parameters provided for the Fill command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters representing the fill state (\"true\" or \"false\"). Examples The following example demonstrates parameter validation: Fill fillCommand = new Fill(); fillCommand.CheckParameters(new string[] { \"true\" }); // No exception fillCommand.CheckParameters(new string[] { \"true\", \"false\" }); // Throws CommandException Remarks This method checks that: The parameter list contains exactly one parameter. If validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter list is null or does not contain exactly one parameter. Execute() Executes the Fill command to set the fill state of a shape on the Canvas. public override void Execute() Examples The following example demonstrates how to use the Fill class: Canvas myCanvas = new Canvas(); Fill fillCommand = new Fill(myCanvas, \"true\"); fillCommand.Execute(); Remarks The method performs the following steps: Extracts the text parameter from the base class. Validates the text value to ensure it is not null, empty, or exceeding 5 characters. Calls the SetFilled(string) method to apply the fill state. If the text value is invalid, a BOOSE.RestrictionException is thrown. Exceptions RestrictionException Thrown when the text value is null, empty, whitespace, or exceeds 5 characters. SetFilled(string) Sets the filled state of the shape using a string value (\"true\" or \"false\"). public void SetFilled(string isFilledStr) Parameters isFilledStr string A string value (\"true\" or \"false\") indicating whether the shape is filled. Remarks This method updates the global configuration to enable or disable filling based on the provided value. Exceptions CommandException Thrown when the string value is neither \"true\" nor \"false\"."
  },
  "api/ASE_Assignment.Commands.PenSize.html": {
    "href": "api/ASE_Assignment.Commands.PenSize.html",
    "title": "Class PenSize | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class PenSize Namespace ASE_Assignment.Commands Assembly ASE_Assignment.dll Represents a command that sets the pen size for drawing on the Canvas. The command takes one parameter: the desired pen size. public class PenSize : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter PenSize Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The PenSize class is responsible for validating and applying the pen size. It ensures the pen size: Is a non-negative integer. Does not exceed 100. If validation fails, a BOOSE.RestrictionException is thrown. Constructors PenSize() Initializes a new instance of the PenSize class with default values. public PenSize() Remarks This default constructor can be used when no initial pen size is provided. The pen size can be set later using the Execute() method. PenSize(Canvas, int) Initializes a new instance of the PenSize class with a specified Canvas and pen size. public PenSize(Canvas c, int pensize) Parameters c Canvas The BOOSE.Canvas object where the pen size will be applied. pensize int The desired pen size to be set. Remarks Use this constructor when creating the command with a known pen size and a Canvas reference. Methods CheckParameters(string[]) Validates the parameters provided for the PenSize command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters representing the pen size. Examples The following example demonstrates parameter validation: PenSize penSizeCommand = new PenSize(); penSizeCommand.CheckParameters(new string[] { \"10\" }); // No exception penSizeCommand.CheckParameters(new string[] { }); // Throws CommandException Remarks This method checks that: The parameter list contains exactly one parameter. If validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter list is null or does not contain exactly 1 parameter. Execute() Executes the PenSize command to set the pen size on the Canvas. public override void Execute() Examples The following example demonstrates how to use the PenSize class: Canvas myCanvas = new Canvas(); PenSize penSizeCommand = new PenSize(myCanvas, 10); penSizeCommand.Execute(); Remarks The method performs the following steps: Extracts the pen size parameter from the base class. Validates that the pen size is within the valid range (0 to 100). Sets the pen size using the SetPenSize(int) method. If the pen size is invalid (either too large or negative), a BOOSE.RestrictionException is thrown. Exceptions RestrictionException Thrown when the pen size exceeds 100 or is negative. SetPenSize(int) Sets the pen size using an integer argument. public void SetPenSize(int penSize) Parameters penSize int The pen size to set. Must be a non-negative integer. Remarks This method updates the global pen size setting in the application."
  },
  "api/ASE_Assignment.Commands.Reset.html": {
    "href": "api/ASE_Assignment.Commands.Reset.html",
    "title": "Class Reset | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class Reset Namespace ASE_Assignment.Commands Assembly ASE_Assignment.dll Represents a command that resets the Canvas to its initial state. The command does not take any parameters. public class Reset : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Reset Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The Reset class is responsible for resetting the Canvas to its default or initial state. Similar to the Clear command, it does not require any parameters and directly operates on the Canvas object. Resets the Canvas to its initial state when executed. Does not throw any exceptions by itself, as it does not require parameter validation. Constructors Reset() Initializes a new instance of the Reset class with default values. public Reset() Remarks This constructor is used when no specific Canvas reference is needed to initialize the command. The Canvas object will be provided when the Execute() method is called. Reset(Canvas) Initializes a new instance of the Reset class with a specified Canvas. public Reset(Canvas c) Parameters c Canvas The BOOSE.Canvas object on which the reset operation will be performed. Remarks This constructor is used when the command is initialized with a known Canvas object that the operation will affect. Methods CheckParameters(string[]) Checks the parameters provided for the Reset command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters. This list is ignored since no parameters are required for the Reset command. Remarks Since the Reset command does not take any parameters, this method does not perform any validation. It remains empty to ensure that no unexpected behavior occurs when no parameters are provided. Execute() Executes the Reset command to reset the Canvas to its initial state. public override void Execute() Examples The following example demonstrates how to use the Reset class: Canvas myCanvas = new Canvas(); Reset resetCommand = new Reset(myCanvas); resetCommand.Execute(); // Resets the canvas to its initial state Remarks The Execute() method calls the Canvas' BOOSE.Canvas.Reset() method to reset the canvas. Since this command does not require parameters, no validation is necessary for execution."
  },
  "api/ASE_Assignment.Commands.Triangle.html": {
    "href": "api/ASE_Assignment.Commands.Triangle.html",
    "title": "Class Triangle | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class Triangle Namespace ASE_Assignment.Commands Assembly ASE_Assignment.dll Represents a command that draws a triangle on the Canvas. This command accepts two integer parameters: base length and height. public class Triangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters Triangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The Triangle class is responsible for validating and passing base length and height parameters to the Canvas for rendering a triangle. The command ensures that: Both base length and height are valid integers. Both parameters do not exceed 2000. If the conditions are not met, appropriate exceptions are thrown. Constructors Triangle() Initializes a new instance of the Triangle class with default values. public Triangle() Remarks This default constructor can be used to create an instance of the class without specifying initial values for parameters. Parameters can be assigned later. Triangle(Canvas, int, int) Initializes a new instance of the Triangle class with specified Canvas, base length, and height. public Triangle(Canvas c, int baseLength, int height) Parameters c Canvas The BOOSE.Canvas object on which the triangle will be drawn. baseLength int The base length of the triangle. height int The height of the triangle. Remarks Use this constructor when creating the triangle command with known dimensions and a Canvas reference. Methods CheckParameters(string[]) Validates the parameters provided for the Triangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters representing base length and height. Examples The following example demonstrates parameter validation: Triangle triangleCommand = new Triangle(); triangleCommand.CheckParameters(new string[] { \"500\", \"300\" }); // No exception triangleCommand.CheckParameters(new string[] { \"500\" }); // Throws CommandException Remarks This method checks that: The parameter list contains exactly 2 parameters. The parameters are integers (validated by the calling process). If validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter list is null or does not contain exactly 2 parameters. Execute() Executes the Triangle command to draw a triangle on the Canvas. public override void Execute() Examples The following example demonstrates how to use the Triangle class: Canvas myCanvas = new Canvas(); Triangle triangleCommand = new Triangle(myCanvas, 500, 300); triangleCommand.Execute(); Remarks The method performs the following steps: Extracts the base length and height parameters from the base class. Validates that the base length and height do not exceed 2000. Calls the Canvas method to render the triangle. If validation fails, a BOOSE.RestrictionException is thrown. Exceptions RestrictionException Thrown when base length or height exceeds 2000."
  },
  "api/ASE_Assignment.Commands.WriteTo.html": {
    "href": "api/ASE_Assignment.Commands.WriteTo.html",
    "title": "Class WriteTo | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class WriteTo Namespace ASE_Assignment.Commands Assembly ASE_Assignment.dll Represents a command that writes text to a Canvas. This command ensures the text is valid before writing. public class WriteTo : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter WriteTo Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The WriteTo class is used to validate and write a string parameter to a BOOSE.Canvas. It validates that the text is non-null, non-empty, does not contain only whitespace, and is no longer than 100 characters. Any validation failure will throw a BOOSE.RestrictionException or BOOSE.CommandException. Constructors WriteTo() Initializes a new instance of the WriteTo class with default values. public WriteTo() Remarks This default constructor initializes the command without any parameters. It can be used for creating the instance, and parameters can be set later. WriteTo(Canvas, string) Initializes a new instance of the WriteTo class with a specified Canvas and text. public WriteTo(Canvas c, string text) Parameters c Canvas The BOOSE.Canvas object where text will be written. text string The text to be written to the Canvas. Remarks This constructor assigns the text and c to class members. Methods CheckParameters(string[]) Validates the parameters provided to the command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Examples The following code demonstrates parameter validation: WriteTo writeCommand = new WriteTo(); writeCommand.CheckParameters(new string[] { \"Valid Text\" }); // No exception writeCommand.CheckParameters(new string[] { \"\" }); // Throws CommandException Remarks This method ensures that the provided parameters meet the following conditions: The parameter list contains exactly one parameter. The text parameter is not null, empty, or whitespace. If validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter list is null, has an incorrect number of parameters, or the text parameter is null, empty, or whitespace. Execute() Executes the command by writing the text to the Canvas. public override void Execute() Examples The following code demonstrates how to use the WriteTo class: Canvas myCanvas = new Canvas(); WriteTo writeCommand = new WriteTo(myCanvas, \"Hello, World!\"); writeCommand.Execute(); Remarks The text is validated before execution. It must: Not be null, empty, or whitespace. Not exceed 100 characters. If validation fails, a BOOSE.RestrictionException is thrown. Exceptions RestrictionException Thrown when the text is null, empty, whitespace, or exceeds 100 characters."
  },
  "api/ASE_Assignment.Commands.html": {
    "href": "api/ASE_Assignment.Commands.html",
    "title": "Namespace ASE_Assignment.Commands | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Namespace ASE_Assignment.Commands Classes AppCast Represents a command to cast values between variables of different types. AppCircle Represents a command to draw a circle on a canvas. AppDrawTo Represents a command to draw to a specified position on a canvas. AppElse Represents the \"Else\" command in a program, providing branching logic for conditional execution. AppFor Represents an application-specific implementation of the BOOSE.For class, providing functionality to reset or decrease a private static field. AppIf Represents the \"If\" command in a program, enabling conditional execution of commands. AppMoveTo Represents a command to move to a specified position on a canvas. AppPenColour Represents a command to set the pen color on a canvas. AppRectangle Represents a command to draw a rectangle on the canvas. AppWhile Clear Represents a command that clears the Canvas. The command does not take any parameters. Fill Represents a command that sets the fill state for a shape on the Canvas. The command takes one parameter: a string that indicates whether the shape should be filled. PenSize Represents a command that sets the pen size for drawing on the Canvas. The command takes one parameter: the desired pen size. Reset Represents a command that resets the Canvas to its initial state. The command does not take any parameters. Triangle Represents a command that draws a triangle on the Canvas. This command accepts two integer parameters: base length and height. WriteTo Represents a command that writes text to a Canvas. This command ensures the text is valid before writing."
  },
  "api/ASE_Assignment.Components.AppArray.html": {
    "href": "api/ASE_Assignment.Components.AppArray.html",
    "title": "Class AppArray | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppArray Namespace ASE_Assignment.Components Assembly ASE_Assignment.dll Represents an array implementation for performing operations such as read (PEEK) and write (POKE). Provides support for both integer and double data types and handles multi-dimensional arrays. public class AppArray : Evaluation, ICommand Inheritance object Command Evaluation AppArray Implements ICommand Derived AppPeek AppPoke Inherited Members Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class extends the Evaluation class and introduces functionality to define, compile, and operate on arrays. It supports integer and real (double) arrays, and allows for dynamic row and column specifications. Constructors AppArray() public AppArray() Fields IntValue protected int IntValue Field Value int PEEK Constant indicating a PEEK operation (read from the array). protected const bool PEEK = false Field Value bool POKE Constant indicating a POKE operation (write to the array). public const bool POKE = true Field Value bool RealValue protected double RealValue Field Value double columnCurrent The resolved column index used for accessing the array. protected int columnCurrent Field Value int Remarks This field is calculated from columnExpression during the execution phase. It represents the actual column index for accessing a specific cell in the array. columnExpression An expression representing the column index in the array. protected string columnExpression Field Value string Remarks This field can be a literal value or an expression to be evaluated during runtime. It is resolved into an integer index during the execution phase of array operations. columnsCount Number of columns in the array (default is 1). protected int columnsCount Field Value int intArray Storage for integer arrays. protected int[,] intArray Field Value int[,] peekValue The value to be written into the array during a Poke operation. protected string peekValue Field Value string Remarks This field is populated during the compile or execute phase of the Poke command. It represents the value to be assigned to a specific cell in the array. pokeValue The value to be written into the array during a Poke operation. protected string pokeValue Field Value string Remarks This field is populated during the compile or execute phase of the Poke command. It represents the value to be assigned to a specific cell in the array. realArray Storage for double arrays. protected double[,] realArray Field Value double[,] rowCurrent The resolved row index used for accessing the array. protected int rowCurrent Field Value int Remarks This field is calculated from rowExpression during the execution phase. It represents the actual row index for accessing a specific cell in the array. rowExpression An expression representing the row index in the array. protected string rowExpression Field Value string Remarks This field can be a literal value or an expression to be evaluated during runtime. It is resolved into an integer index during the execution phase of array operations. rowsCount Number of rows in the array. protected int rowsCount Field Value int type The type of the array (e.g., \"int\" or \"real\"). protected string type Field Value string Properties Columns Gets the number of columns in the array. protected int Columns { get; } Property Value int Remarks This property provides a read-only access to the number of columns configured in the array. It is calculated from the columns field. Rows Gets the number of rows in the array. protected int Rows { get; } Property Value int Remarks This property provides a read-only access to the number of rows configured in the array. It is calculated from the rows field. Methods ArrayRestrictions() Enforces restrictions on the number of array instances allowed. public void ArrayRestrictions() Remarks This method is used to validate that the number of created instances does not exceed the allowed limit. If the limit is exceeded, it should throw an exception to prevent further creation of instances. Exceptions RestrictionException Thrown when the number of instances exceeds the allowed limit. CheckParameters(string[]) Validates the parameters for the array definition. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Remarks This method checks that the parameter list contains either 3 or 4 parameters: The array type (e.g., \"int\" or \"real\"). The variable name for the array. The number of rows (required). The number of columns (optional). If validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter list is null, has an incorrect number of parameters, or contains invalid values. Compile() Compiles the array definition, parsing its type, rows, and columns. public override void Compile() Remarks This method extracts the array's type, row count, and column count from the parameters. It validates the array type and ensures the parameters are in the correct format. If validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the array type is invalid or the parameters are in an incorrect format. Execute() Executes the array operation by initializing the array based on its type. public override void Execute() Remarks This method handles the initialization of either an integer array or a real (double) array. If the array type is unsupported, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the array type is unsupported. GetIntArray(int, int) Retrieves the value of an integer element in the array at the specified row and column. public virtual int GetIntArray(int row, int col) Parameters row int The row index from which the value will be retrieved. col int The column index from which the value will be retrieved. Returns int The integer value at the specified row and column in the array. Remarks This method validates the indices before retrieving the value. If the indices are out of bounds, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the specified row or column index is out of bounds. GetRealArray(int, int) public virtual double GetRealArray(int row, int col) Parameters row int col int Returns double ProcessArrayParametersCompile(bool) Compiles the parameters for PEEK or POKE operations. protected virtual void ProcessArrayParametersCompile(bool isPokeOperation) Parameters isPokeOperation bool Indicates whether the operation is a POKE (true) or PEEK (false). Remarks This method parses the parameter list, identifies the array variable and index expressions, and prepares for execution by validating syntax and ensuring the variable exists in the program. Exceptions CommandException Thrown when the syntax is invalid or the array variable does not exist. ProcessArrayParametersExecute(bool) Executes the parameters for PEEK or POKE operations. protected virtual void ProcessArrayParametersExecute(bool isPokeOperation) Parameters isPokeOperation bool Indicates whether the operation is a POKE (true) or PEEK (false). Remarks This method resolves the row and column indices, validates the array type, and performs the specified operation (PEEK or POKE) on the array. Exceptions CommandException Thrown when the row or column indices are invalid, or the value type is mismatched. ReduceRestrictionCounter() Reduces the restriction counter for the array if required. protected void ReduceRestrictionCounter() Remarks This method is used to decrease the restriction counter, potentially allowing more instances or operations involving arrays. The specific implementation depends on the restriction logic. SetIntArray(int, int, int) Sets the value of an integer element in the array at the specified row and column. public virtual void SetIntArray(int value, int row, int col) Parameters value int The integer value to set in the array. row int The row index where the value will be set. col int The column index where the value will be set. Remarks This method validates the indices before setting the value. If the indices are out of bounds, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the specified row or column index is out of bounds. SetRealArray(double, int, int) Sets the value of a real (double) element in the array at the specified row and column. public virtual void SetRealArray(double value, int row, int col) Parameters value double The double value to set in the array. row int The row index where the value will be set. col int The column index where the value will be set. Remarks This method validates the indices before setting the value. If the indices are out of bounds, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the specified row or column index is out of bounds."
  },
  "api/ASE_Assignment.Components.AppBoolean.html": {
    "href": "api/ASE_Assignment.Components.AppBoolean.html",
    "title": "Class AppBoolean | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppBoolean Namespace ASE_Assignment.Components Assembly ASE_Assignment.dll Represents a custom boolean class that overrides restrictions on instance creation. public class AppBoolean : Boolean, ICommand Inheritance object Command Evaluation Boolean AppBoolean Implements ICommand Inherited Members Boolean.Compile() Boolean.Execute() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The AppBoolean class extends the functionality of the BOOSE.Boolean class by removing the restriction on the number of instances that can be created. This class is suitable for scenarios where multiple boolean instances are required without limits. Methods Restrictions() Overrides the BOOSE.Boolean.Restrictions() method to remove instance restrictions. public override void Restrictions() Remarks This method is intentionally left blank to bypass the restriction logic present in the base BOOSE.Boolean class."
  },
  "api/ASE_Assignment.Components.AppCommandFactory.html": {
    "href": "api/ASE_Assignment.Components.AppCommandFactory.html",
    "title": "Class AppCommandFactory | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppCommandFactory Namespace ASE_Assignment.Components Assembly ASE_Assignment.dll AppCommandFactory is a concrete implementation of the CommandFactory class. This factory is responsible for creating specific commands based on the provided command string. It overrides the MakeCommand method to handle specific types of commands. If an invalid command is passed, it logs the error using FactoryException and prevents program termination. public class AppCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory AppCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCommandFactory() Initializes a new instance of the AppCommandFactory class. public AppCommandFactory() Methods MakeCommand(string) Creates a specific BOOSE.ICommand based on the provided command string. The method checks the command string and returns the corresponding ICommand object. If the command is invalid, a FactoryException is caught, logged, and handled safely. public override ICommand MakeCommand(string command) Parameters command string The command string to create a corresponding ICommand. Returns ICommand An BOOSE.ICommand corresponding to the provided command string, or null if the command is invalid."
  },
  "api/ASE_Assignment.Components.AppCompoundCommand.html": {
    "href": "api/ASE_Assignment.Components.AppCompoundCommand.html",
    "title": "Class AppCompoundCommand | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppCompoundCommand Namespace ASE_Assignment.Components Assembly ASE_Assignment.dll Represents a compound command that extends the functionality of BOOSE.ConditionalCommand. public class AppCompoundCommand : AppConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand AppCompoundCommand Implements ICommand Derived AppElse AppIf AppWhile AppEnd Inherited Members AppConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The AppCompoundCommand class removes restrictions on instance creation and handles the validation and compilation of compound commands, such as \"if-end\", \"while-end\", \"for-end\", and \"method-end\". It allows defining complex control flow structures without restrictions on the number of instances. Constructors AppCompoundCommand() Initializes a new instance of the AppCompoundCommand class without instance restrictions. public AppCompoundCommand() Remarks This constructor removes any restrictions on the number of instances that can be created, enabling flexible use of compound commands. Properties CorrespondingCommand Gets or sets the corresponding conditional command associated with this compound command. public ConditionalCommand CorrespondingCommand { get; set; } Property Value ConditionalCommand Remarks This property is used to establish a link between the compound command and its parent control flow command. For example, an \"if-end\" command will link to its \"if\" block. Methods CheckParameters(string[]) Validates the parameters passed to the compound command. public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of parameters to validate. Remarks This method ensures that the compound command is associated with a valid control flow structure. It validates the following: Only one parameter is passed. The parameter contains an expected \"end\" marker, such as \"ifEnd\", \"whileEnd\", \"forEnd\", or \"methodEnd\". If the validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter count is invalid or the parameter does not contain a valid \"end\" marker. Compile() Compiles the compound command to prepare it for execution. public override void Compile() Remarks This method calls the base BOOSE.ConditionalCommand.Compile() method to handle any setup or preparation required before the command is executed. ResetOrDecreaseCount(int) Resets or decreases the value of a private static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var appMethod = new AppMethod(); appMethod.ResetOrDecreaseCount(5); Remarks This method accesses the private static field 꿁 in the BOOSE.Boolean class using reflection and updates its value. Exceptions BOOSEException Thrown when the private field 꿁 cannot be accessed using reflection."
  },
  "api/ASE_Assignment.Components.AppConditionalCommand.html": {
    "href": "api/ASE_Assignment.Components.AppConditionalCommand.html",
    "title": "Class AppConditionalCommand | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppConditionalCommand Namespace ASE_Assignment.Components Assembly ASE_Assignment.dll Represents a conditional command with functionality to reset or decrease a count using reflection to access a private static field. public class AppConditionalCommand : ConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand Implements ICommand Derived AppCompoundCommand Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class is designed to demonstrate the use of reflection to access private static fields in another class (BOOSE.Boolean). It updates the value of the field and displays the changes in the debug output. Methods Execute() Executes the conditional command and resets the private static field to 0. public override void Execute() Examples var command = new AppConditionalCommand(); command.Execute(); Remarks This method overrides the BOOSE.ConditionalCommand.Execute() method to include resetting the value of the private static field 꿁 to 0 after executing the base command. ResetOrDecreaseCount(int) Resets or decreases the value of a private static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var command = new AppConditionalCommand(); command.ResetOrDecreaseCount(5); Remarks This method accesses the private static field 꿁 in the BOOSE.Boolean class using reflection Exceptions BOOSEException Thrown when the private field 꿁 cannot be accessed using reflection."
  },
  "api/ASE_Assignment.Components.AppEnd.html": {
    "href": "api/ASE_Assignment.Components.AppEnd.html",
    "title": "Class AppEnd | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppEnd Namespace ASE_Assignment.Components Assembly ASE_Assignment.dll Represents the \"End\" command in a control flow structure. public class AppEnd : AppCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand AppCompoundCommand AppEnd Implements ICommand Inherited Members AppCompoundCommand.CorrespondingCommand AppCompoundCommand.CheckParameters(string[]) AppCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The AppEnd class is used to mark the end of a control flow block such as \"if\", \"while\", or \"for\". It extends the functionality of AppCompoundCommand to provide validation and runtime execution logic specific to ending control flow structures. Constructors AppEnd() public AppEnd() Methods Compile() Compiles the \"End\" command to prepare it for execution. public override void Compile() Remarks The method performs the following actions: Pops the corresponding control flow command (e.g., \"if\", \"while\", \"for\") from the program stack. Validates that the \"End\" command matches the type of the corresponding control flow command. Sets the current line number and updates the corresponding command's end line number. If the validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the \"End\" command does not match the expected control flow type or syntax. Execute() Executes the \"End\" command during runtime. public override void Execute() Remarks The method performs different actions depending on the type of the corresponding command: For AppWhile: Jumps back to the start of the loop. For BOOSE.For: Updates the loop control variable and evaluates loop conditions. For BOOSE.Method: Returns to the method's return line number. If any condition is invalid or the loop control variable is missing, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the loop control variable is missing, the loop step is invalid, or the loop conditions are not met."
  },
  "api/ASE_Assignment.Components.AppInt.html": {
    "href": "api/ASE_Assignment.Components.AppInt.html",
    "title": "Class AppInt | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppInt Namespace ASE_Assignment.Components Assembly ASE_Assignment.dll Represents an integer variable with no restrictions on instance creation. public class AppInt : Int, ICommand Inheritance object Command Evaluation Int AppInt Implements ICommand Inherited Members Int.Compile() Int.Execute() Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The AppInt class extends the functionality of the BOOSE.Int class by removing the restrictions on the number of instances that can be created. This allows developers to use multiple integer variables without limitations. Methods Restrictions() Overrides the BOOSE.Int.Restrictions() method to remove restrictions on instance creation. public override void Restrictions() Remarks This method is intentionally left blank to bypass the restriction logic present in the base BOOSE.Int class. It ensures that there are no limitations on the number of instances that can be created for integer variables."
  },
  "api/ASE_Assignment.Components.AppMethod.html": {
    "href": "api/ASE_Assignment.Components.AppMethod.html",
    "title": "Class AppMethod | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppMethod Namespace ASE_Assignment.Components Assembly ASE_Assignment.dll Represents an application-specific method class that overrides restrictions on method counts and provides functionality to reset or decrease private static fields. public class AppMethod : Method, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Method AppMethod Implements ICommand Inherited Members Method.CheckParameters(string[]) Method.Compile() Method.Execute() Method.LocalVariables Method.MethodName Method.Type CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class demonstrates the use of reflection to manipulate private static fields in the BOOSE.Boolean and BOOSE.Method classes. It also overrides base class restrictions by invoking ReduceRestrictions. Constructors AppMethod() Initializes a new instance of the AppMethod class. public AppMethod() Examples var appMethod = new AppMethod(); Remarks The constructor overrides restrictions on method count by invoking ReduceRestrictions twice. It also resets the counts for the fields 꿁 and 꿒 to 0. Methods ResetOrDecreaseCount(int) Resets or decreases the value of a private static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var appMethod = new AppMethod(); appMethod.ResetOrDecreaseCount(5); Remarks This method accesses the private static field 꿁 in the BOOSE.Boolean class using reflection and updates its value. Exceptions BOOSEException Thrown when the private field 꿁 cannot be accessed using reflection. ResetOrDecreaseMethodCount(int) Resets or decreases the value of a private static field in the BOOSE.Method class. public void ResetOrDecreaseMethodCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var appMethod = new AppMethod(); appMethod.ResetOrDecreaseMethodCount(10); Remarks This method accesses the private static field 꿒 in the BOOSE.Method class using reflection and updates its value. Exceptions BOOSEException Thrown when the private field 꿒 cannot be accessed using reflection."
  },
  "api/ASE_Assignment.Components.AppPeek.html": {
    "href": "api/ASE_Assignment.Components.AppPeek.html",
    "title": "Class AppPeek | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppPeek Namespace ASE_Assignment.Components Assembly ASE_Assignment.dll Represents a \"Peek\" command that retrieves a value from a specific cell in an array. public class AppPeek : AppArray, ICommand Inheritance object Command Evaluation AppArray AppPeek Implements ICommand Inherited Members AppArray.PEEK AppArray.POKE AppArray.type AppArray.IntValue AppArray.RealValue AppArray.rowsCount AppArray.columnsCount AppArray.intArray AppArray.realArray AppArray.pokeValue AppArray.peekValue AppArray.rowExpression AppArray.columnExpression AppArray.rowCurrent AppArray.columnCurrent AppArray.Rows AppArray.Columns AppArray.ArrayRestrictions() AppArray.ReduceRestrictionCounter() AppArray.ProcessArrayParametersCompile(bool) AppArray.ProcessArrayParametersExecute(bool) AppArray.SetIntArray(int, int, int) AppArray.SetRealArray(double, int, int) AppArray.GetIntArray(int, int) AppArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The AppPeek class extends the functionality of the AppArray class to implement the \"Peek\" operation, which reads values from integer or real (double) arrays and stores them in a specified variable. Constructors AppPeek() Initializes a new instance of the AppPeek class and adjusts the restriction counter. public AppPeek() Remarks This constructor ensures that the instance restriction counter is adjusted appropriately, allowing the creation of \"Peek\" commands without limitations imposed by the base class. Methods CheckParameters(string[]) public override void CheckParameters(string[] parameters) Parameters parameters string[] Compile() Compiles the \"Peek\" command by processing the array parameters. public override void Compile() Remarks This method prepares the \"Peek\" command for execution by parsing and validating the array's parameters. It ensures the \"Peek\" operation adheres to its specific behavior. Execute() Executes the \"Peek\" command to retrieve a value from the array. public override void Execute() Remarks This method performs the \"Peek\" operation by accessing the specified cell in the array, based on the row and column indices. It supports both integer and real (double) arrays. The retrieved value is stored in the program's specified variable. Exceptions CommandException Thrown when the array type is unsupported or an error occurs during the \"Peek\" operation."
  },
  "api/ASE_Assignment.Components.AppPoke.html": {
    "href": "api/ASE_Assignment.Components.AppPoke.html",
    "title": "Class AppPoke | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppPoke Namespace ASE_Assignment.Components Assembly ASE_Assignment.dll Represents a \"Poke\" command that sets a value in a specific cell of an array. public class AppPoke : AppArray, ICommand Inheritance object Command Evaluation AppArray AppPoke Implements ICommand Inherited Members AppArray.PEEK AppArray.POKE AppArray.type AppArray.IntValue AppArray.RealValue AppArray.rowsCount AppArray.columnsCount AppArray.intArray AppArray.realArray AppArray.pokeValue AppArray.peekValue AppArray.rowExpression AppArray.columnExpression AppArray.rowCurrent AppArray.columnCurrent AppArray.Rows AppArray.Columns AppArray.ArrayRestrictions() AppArray.ReduceRestrictionCounter() AppArray.ProcessArrayParametersCompile(bool) AppArray.ProcessArrayParametersExecute(bool) AppArray.SetIntArray(int, int, int) AppArray.SetRealArray(double, int, int) AppArray.GetIntArray(int, int) AppArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The AppPoke class extends the functionality of the AppArray class to implement the \"Poke\" operation, which writes values into integer or real (double) arrays. It provides methods for parameter validation, compilation, and execution of the Poke operation. Constructors AppPoke() Initializes a new instance of the AppPoke class and adjusts the restriction counter. public AppPoke() Remarks This constructor ensures that the instance restriction counter is adjusted appropriately, allowing the creation of multiple \"Poke\" commands without limitations imposed by the base class. Methods CheckParameters(string[]) Validates the parameters for the \"Poke\" command. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of parameters to validate. Remarks This method ensures that the parameter list for the \"Poke\" operation is valid. The parameters must include: The array name. The row index of the target cell. An optional column index for multi-dimensional arrays. If the parameter list is invalid, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter list contains an invalid number of elements. Compile() Compiles the \"Poke\" command by processing the array parameters. public override void Compile() Remarks This method prepares the \"Poke\" command for execution by parsing and validating the parameters. It ensures that the \"Poke\" operation adheres to its specific behavior. Execute() Compiles the \"Poke\" command by processing the array parameters. public override void Execute() Remarks This method prepares the \"Poke\" command for execution by parsing and validating the parameters. It ensures that the \"Poke\" operation adheres to its specific behavior. Set(StoredProgram, string) Sets the program and parameter list for the \"Poke\" command. public override void Set(StoredProgram program, string paramsList) Parameters program StoredProgram The BOOSE.StoredProgram instance to associate with this command. paramsList string The list of parameters for the \"Poke\" command. Remarks This method initializes the \"Poke\" command by associating it with the specified program and parsing the provided parameters. It calls the base class implementation for additional setup."
  },
  "api/ASE_Assignment.Components.AppPraser.html": {
    "href": "api/ASE_Assignment.Components.AppPraser.html",
    "title": "Class AppPraser | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppPraser Namespace ASE_Assignment.Components Assembly ASE_Assignment.dll Represents a parser for interpreting and compiling a program into executable commands. public class AppPraser : IParser Inheritance object AppPraser Implements IParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The AppPraser class implements the BOOSE.IParser interface to provide functionality for parsing individual commands and an entire program. It utilizes a command factory to create command instances and a stored program to manage the parsed commands. Constructors AppPraser(CommandFactory, StoredProgram) Initializes a new instance of the AppPraser class. public AppPraser(CommandFactory factory, StoredProgram program) Parameters factory CommandFactory The BOOSE.CommandFactory used to create command instances. program StoredProgram The BOOSE.StoredProgram where parsed commands are stored. Remarks This constructor initializes the parser with the specified command factory and stored program. Methods ParseCommand(string) Parses a single line of input into a command. public virtual ICommand ParseCommand(string line) Parameters line string The line of input to parse. Returns ICommand An BOOSE.ICommand representing the parsed command. Remarks This method performs the following steps: Ignores lines starting with '*'. Normalizes the input line to replace shorthand operators with equivalent keywords. Determines the command type and parameters from the line. Handles variable type resolution for \"int\", \"real\", and \"boolean\". Creates and compiles the command using the BOOSE.ICommandFactory. If the command references an undefined variable or an unknown type, a BOOSE.ParserException is thrown. Exceptions ParserException Thrown when a variable does not exist or has an unknown type. ParseProgram(string) Parses an entire program and compiles all commands. public virtual void ParseProgram(string program) Parameters program string The program source code as a string. Remarks This method splits the program into lines and processes each line using the ParseCommand(string) method. It also handles method definitions by parsing their local variables and removing them from the stored program. Any syntax errors encountered during parsing are recorded and reported in the global configuration."
  },
  "api/ASE_Assignment.Components.AppReal.html": {
    "href": "api/ASE_Assignment.Components.AppReal.html",
    "title": "Class AppReal | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppReal Namespace ASE_Assignment.Components Assembly ASE_Assignment.dll Represents a real (double) variable with no restrictions on the number of instances. public class AppReal : Real, ICommand Inheritance object Command Evaluation Real AppReal Implements ICommand Inherited Members Real.Compile() Real.Execute() Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The AppReal class extends the functionality of the BOOSE.Real class by removing the restrictions on instance creation. This allows developers to use an unlimited number of real variables without limitations. It is particularly useful in scenarios requiring dynamic or large-scale mathematical computations where multiple real variables are necessary. Methods Restrictions() Overrides the restriction logic to allow unlimited instances of AppReal. public override void Restrictions() Examples The following example demonstrates the creation of multiple AppReal instances: AppReal real1 = new AppReal(); AppReal real2 = new AppReal(); AppReal real3 = new AppReal(); // No restrictions on the number of instances. Remarks This method overrides the BOOSE.Real.Restrictions() method from the base class to remove the instance creation limit. By leaving the method intentionally blank, it ensures that no restrictions are imposed on the number of instances of AppReal."
  },
  "api/ASE_Assignment.Components.AppStoredProgram.html": {
    "href": "api/ASE_Assignment.Components.AppStoredProgram.html",
    "title": "Class AppStoredProgram | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppStoredProgram Namespace ASE_Assignment.Components Assembly ASE_Assignment.dll Represents a stored program that can be executed on a canvas, supporting variables, methods, and conditional commands. public class AppStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram AppStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.FindVariable(Evaluation) ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The AppStoredProgram class extends the functionality of the BOOSE.StoredProgram class. It provides infrastructure for managing and executing commands, handling variables, methods, and conditional commands. Additionally, it supports syntax validation and execution tracking using a program counter. Constructors AppStoredProgram(ICanvas) Initializes a new instance of the AppStoredProgram class with a specified canvas. public AppStoredProgram(ICanvas _canvas) Parameters _canvas ICanvas The BOOSE.ICanvas on which the program will be executed. Remarks This constructor initializes the program with the specified canvas, enabling commands to render or interact visually. It also resets the program's internal state to ensure a clean start for execution. Fields SyntaxOk Indicates whether the program's syntax is valid. public bool SyntaxOk Field Value bool Remarks This flag is set to true when all commands in the program are successfully validated during parsing. It is used to prevent execution of programs with syntax errors. Properties PC Gets or sets the program counter, which determines the current command to execute. public override int PC { get; set; } Property Value int Examples The following example demonstrates how to set and retrieve the program counter: AppStoredProgram program = new AppStoredProgram(); program.PC = 5; // Set the program counter to command at index 5 int currentCommand = program.PC; // Get the current program counter value Remarks The program counter is used to track the position of the currently executing command in the program. It can be updated to jump to specific commands during conditional or loop operations. Methods Add(Command) Adds a command to the program. public override int Add(Command C) Parameters C Command The BOOSE.Command to add to the program. Returns int The index of the added command in the program's command list. Examples The following example demonstrates how to add a command to the program: Command drawCommand = new DrawCommand(); program.Add(drawCommand); Remarks This method adds a command to the program and associates it with the canvas if it is a BOOSE.CanvasCommand. If the command is null, a BOOSE.StoredProgramException is thrown. Exceptions StoredProgramException Thrown when attempting to add a null command. AddMethod(Method) Adds a method to the program's list of methods. public override void AddMethod(Method M) Parameters M Method The BOOSE.Method instance to add to the program. Examples The following example demonstrates how to add a method to the program: AppStoredProgram program = new AppStoredProgram(canvas); Method calculateMethod = new Method { MethodName = \"Calculate\", Type = \"void\" }; program.AddMethod(calculateMethod); Remarks This method appends the specified method to the internal list of methods. Methods added to this list can be invoked and executed within the program. It does not perform duplicate checks or validation. AddVariable(Evaluation) Adds a variable to the program's list of variables if it does not already exist. public override void AddVariable(Evaluation Variable) Parameters Variable Evaluation The BOOSE.Evaluation instance to add. Examples The following example demonstrates how to add a variable to the program: AppStoredProgram program = new AppStoredProgram(canvas); Evaluation myVariable = new AppInt { VarName = \"x\", Value = 10 }; program.AddVariable(myVariable); Remarks This method checks if a variable with the same name already exists in the program's variable list. If the variable does not exist, it adds the new variable. This prevents duplicate variables from being added. Commandsleft() Checks if there are any commands left to execute in the program. public override bool Commandsleft() Returns bool true if there are commands left to execute; otherwise, false. Examples The following example demonstrates how to check for remaining commands: bool hasCommands = program.Commandsleft(); Remarks This method determines if the program counter has reached the end of the command list. It is used to control the flow of execution in the program. DeleteVariable(string) Deletes a variable from the program's variable list. public override void DeleteVariable(string varName) Parameters varName string The name of the variable to delete. Examples The following example demonstrates how to delete a variable: program.DeleteVariable(\"x\"); Remarks This method locates the variable by its name and removes it from the program's variable list. If the variable does not exist, no action is taken. EvaluateExpression(string) Evaluates a mathematical or logical expression and returns the result. public override string EvaluateExpression(string Exp) Parameters Exp string The expression to evaluate. Returns string The result of the evaluated expression. Examples The following example demonstrates how to evaluate a mathematical expression: string result = program.EvaluateExpression(\"5 + 3\"); Remarks This method processes mathematical and logical expressions, resolving variables, and calculating the final result using a DataTable for computation. Exceptions StoredProgramException Thrown if the expression syntax is invalid or if evaluation fails. EvaluateExpressionWithString(string) Evaluates an expression and returns the result as a string. public override string EvaluateExpressionWithString(string expression) Parameters expression string The expression to evaluate. Returns string The evaluated result as a string. Examples The following example demonstrates how to evaluate an expression: string result = program.EvaluateExpressionWithString(\"\\\"Hello \\\" + x\"); Remarks This method evaluates an expression by splitting it into parts, resolving variables, and calculating the result. It trims and processes each part of the expression. FindVariable(string) Retrieves a variable by its index in the variable list. public override int FindVariable(string varName) Parameters varName string Returns int The BOOSE.Evaluation instance at the specified index. Examples The following example demonstrates how to retrieve a variable by its index: Evaluation variable = program.GetVariable(0); Console.WriteLine($\"Variable Name: {variable.VarName}\"); Remarks This method retrieves a variable by its index in the program's variable list. If the index is out of bounds, a BOOSE.StoredProgramException is thrown. Exceptions StoredProgramException Thrown when the index is greater than or equal to the number of variables. GetMethod(string) Retrieves a method by its name. public override Method GetMethod(string MethodName) Parameters MethodName string The name of the method to retrieve. Returns Method The BOOSE.Method instance corresponding to the given name. Examples The following example demonstrates how to retrieve a method by its name: Method myMethod = program.GetMethod(\"Calculate\"); Remarks This method searches the program's list of methods by name and returns the corresponding method. If the method is not found, a BOOSE.StoredProgramException is thrown. Exceptions StoredProgramException Thrown when a method with the specified name does not exist in the program's list of methods. GetVarValue(string) Retrieves the value of a variable as a string. public override string GetVarValue(string varName) Parameters varName string The name of the variable to retrieve the value for. Returns string The value of the variable as a string. Examples The following example demonstrates how to retrieve the value of a variable: string value = program.GetVarValue(\"x\"); Console.WriteLine($\"Variable Value: {value}\"); Remarks This method searches for a variable by its name and returns its value as a string. If the variable is of type AppReal, its value is converted to a string using ToString(). If the variable does not exist, a BOOSE.StoredProgramException is thrown. Exceptions StoredProgramException Thrown when a variable with the specified name does not exist. GetVariable(int) Retrieves a variable by its index in the variable list. public override Evaluation GetVariable(int index) Parameters index int The index of the variable to retrieve. Returns Evaluation The BOOSE.Evaluation instance at the specified index. Examples The following example demonstrates how to retrieve a variable by its index: Evaluation variable = program.GetVariable(0); Console.WriteLine($\"Variable Name: {variable.VarName}\"); Remarks This method retrieves a variable by its index in the program's variable list. If the index is out of bounds, a BOOSE.StoredProgramException is thrown. Exceptions StoredProgramException Thrown when the index is greater than or equal to the number of variables. GetVariable(string) Retrieves a variable by its name. public override Evaluation GetVariable(string VarName) Parameters VarName string The name of the variable to retrieve. Returns Evaluation The BOOSE.Evaluation instance corresponding to the given name. Examples The following example demonstrates how to retrieve a variable by its name: Evaluation variable = program.GetVariable(\"x\"); Console.WriteLine($\"Variable Value: {variable.Value}\"); Remarks This method searches for a variable by its name in the program's variable list and returns the corresponding instance. If the variable is not found, a BOOSE.StoredProgramException is thrown. Exceptions StoredProgramException Thrown when a variable with the specified name does not exist. IsExpression(string) Checks if the given string is a valid expression. public override bool IsExpression(string expression) Parameters expression string The string to evaluate as an expression. Returns bool true if the string is a valid expression; otherwise, false. Examples The following example demonstrates how to check if a string is a valid expression: bool isExpression = program.IsExpression(\"x + 5\"); Remarks A valid expression is determined based on its syntax and content. Expressions that contain operators (+, -, *, /) or cannot be parsed as integers are considered valid. Strings containing \"Invalid\" are explicitly marked as invalid. NextCommand() Retrieves the next command from the program. public override object NextCommand() Returns object The next command to execute. Examples The following example demonstrates how to retrieve the next command: ICommand nextCommand = (ICommand)program.NextCommand(); Remarks This method retrieves the command at the current program counter position and increments the program counter. It is used to sequentially process commands during execution. Pop() Pops a conditional command from the stack. public override ConditionalCommand Pop() Returns ConditionalCommand The BOOSE.ConditionalCommand popped from the stack. Examples The following example demonstrates how to pop a conditional command: ConditionalCommand command = program.Pop(); Remarks This method removes and returns the topmost conditional command from the stack. If the stack is empty, a BOOSE.StoredProgramException is thrown. Exceptions StoredProgramException Thrown when attempting to pop from an empty stack. Push(ConditionalCommand) Pushes a conditional command onto the stack. public override void Push(ConditionalCommand Com) Parameters Com ConditionalCommand The BOOSE.ConditionalCommand to push onto the stack. Examples The following example demonstrates how to push a conditional command onto the stack: ConditionalCommand command = new AppIf(); program.Push(command); Remarks This method adds a conditional command (e.g., \"if\", \"while\") to the stack. It is used to manage control flow in the program, ensuring proper nesting of commands. ResetProgram() Resets the program to its initial state. public virtual void ResetProgram() Examples The following example demonstrates how to reset the program: program.ResetProgram(); Remarks This method clears the canvas, resets the program counter to zero, and clears the variables. It is used to prepare the program for a fresh start or re-execution. Run() Executes the program by processing each command sequentially. public override void Run() Examples The following example demonstrates how to execute a program: program.Run(); Remarks This method iterates through the commands in the program, executing them one by one. If an exception occurs during execution, it is logged, and the program's syntax status is marked as invalid. Additionally, it ensures that the stack of conditional commands is balanced by the end of execution. Exceptions StoredProgramException Thrown if unbalanced conditional commands are detected. UpdateVariable(string, bool) Updates the value of a boolean variable. public override void UpdateVariable(string varName, bool value) Parameters varName string The name of the variable to update. value bool The new boolean value to assign to the variable. Examples The following example demonstrates how to update a boolean variable: program.UpdateVariable(\"isTrue\", true); Remarks This method locates the variable by its name and ensures it is a boolean variable (AppBoolean). If the variable is not of type AppBoolean, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown if the variable is not of type AppBoolean. UpdateVariable(string, double) Updates the value of a real (double) variable. public override void UpdateVariable(string varName, double value) Parameters varName string The name of the variable to update. value double The new double value to assign to the variable. Examples The following example demonstrates how to update a real variable: program.UpdateVariable(\"y\", 3.14); Remarks This method locates the variable by its name and ensures it is a real variable (AppReal). If the variable is not of type AppReal, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown if the variable is not of type AppReal. UpdateVariable(string, int) Updates the value of an integer variable. public override void UpdateVariable(string varName, int value) Parameters varName string The name of the variable to update. value int The new integer value to assign to the variable. Examples The following example demonstrates how to update an integer variable: program.UpdateVariable(\"x\", 42); Remarks This method locates the variable by its name, verifies it is an integer variable (AppInt), and updates its value. If the variable is not of type AppInt, it falls back to updating the base BOOSE.Evaluation value property. VariableExists(string) Checks if a variable exists in the program by its name. public override bool VariableExists(string varName) Parameters varName string The name of the variable to check. Returns bool true if the variable exists; otherwise, false. Examples The following example demonstrates how to check if a variable exists: bool exists = program.VariableExists(\"x\"); Console.WriteLine($\"Variable exists: {exists}\"); Remarks This method uses FindVariable(string) to determine if a variable with the specified name exists in the program's variable list."
  },
  "api/ASE_Assignment.Components.GlobalConfiguration.html": {
    "href": "api/ASE_Assignment.Components.GlobalConfiguration.html",
    "title": "Class GlobalConfiguration | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class GlobalConfiguration Namespace ASE_Assignment.Components Assembly ASE_Assignment.dll A static configuration class for global settings that influence canvas drawing operations. This class contains properties for managing canvas dimensions, drawing modes, pen settings, and exception messages. public class GlobalConfiguration Inheritance object GlobalConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsFillEnabled Gets or sets a value indicating whether the fill mode is enabled during drawing operations. When enabled, shapes will be filled rather than outlined. The default value is false. public static bool IsFillEnabled { get; set; } Property Value bool Remarks The value of IsFillEnabled should be updated to enable or disable fill mode. It should be a boolean value: true for enabled and false for disabled. MaxX Gets or sets the maximum X coordinate (width) of the canvas. This value defines the maximum horizontal position during drawing operations. The default value is 640 pixels. public static int MaxX { get; set; } Property Value int Remarks The value of MaxX should be updated if you want to change the canvas's horizontal limit. It should be a positive integer value. MaxY Gets or sets the maximum Y coordinate (height) of the canvas. This value defines the maximum vertical position during drawing operations. The default value is 480 pixels. public static int MaxY { get; set; } Property Value int Remarks The value of MaxY should be updated if you want to change the canvas's vertical limit. It should be a positive integer value. OutputExceptionMsg Gets or sets the global output exception message. public static string OutputExceptionMsg { get; set; } Property Value string Remarks This property stores the exception message related to recent operations. By default, it is an empty string. PenSize Gets or sets the global pen size used in drawing operations. public static int PenSize { get; set; } Property Value int Remarks The pen size determines the thickness of lines in drawing operations. A value of 1 indicates pen thickness, and the default value is 1."
  },
  "api/ASE_Assignment.Components.html": {
    "href": "api/ASE_Assignment.Components.html",
    "title": "Namespace ASE_Assignment.Components | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Namespace ASE_Assignment.Components Classes AppArray Represents an array implementation for performing operations such as read (PEEK) and write (POKE). Provides support for both integer and double data types and handles multi-dimensional arrays. AppBoolean Represents a custom boolean class that overrides restrictions on instance creation. AppCommandFactory AppCommandFactory is a concrete implementation of the CommandFactory class. This factory is responsible for creating specific commands based on the provided command string. It overrides the MakeCommand method to handle specific types of commands. If an invalid command is passed, it logs the error using FactoryException and prevents program termination. AppCompoundCommand Represents a compound command that extends the functionality of BOOSE.ConditionalCommand. AppConditionalCommand Represents a conditional command with functionality to reset or decrease a count using reflection to access a private static field. AppEnd Represents the \"End\" command in a control flow structure. AppInt Represents an integer variable with no restrictions on instance creation. AppMethod Represents an application-specific method class that overrides restrictions on method counts and provides functionality to reset or decrease private static fields. AppPeek Represents a \"Peek\" command that retrieves a value from a specific cell in an array. AppPoke Represents a \"Poke\" command that sets a value in a specific cell of an array. AppPraser Represents a parser for interpreting and compiling a program into executable commands. AppReal Represents a real (double) variable with no restrictions on the number of instances. AppStoredProgram Represents a stored program that can be executed on a canvas, supporting variables, methods, and conditional commands. GlobalConfiguration A static configuration class for global settings that influence canvas drawing operations. This class contains properties for managing canvas dimensions, drawing modes, pen settings, and exception messages."
  },
  "api/ASE_Assignment.File_Handler.CanvasLoader.html": {
    "href": "api/ASE_Assignment.File_Handler.CanvasLoader.html",
    "title": "Class CanvasLoader | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class CanvasLoader Namespace ASE_Assignment.File_Handler Assembly ASE_Assignment.dll Represents a class that provides functionality to load a canvas image from the file system using a graphical file dialog. public class CanvasLoader Inheritance object CanvasLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The CanvasLoader class uses a Windows Forms OpenFileDialog to allow the user to select an image file (PNG, JPEG, BMP) to load into the application. The selected file is loaded as a Bitmap object. If the user cancels the dialog or an error occurs during loading, the method returns null. Constructors CanvasLoader() Initializes a new instance of the CanvasLoader class. public CanvasLoader() Remarks This constructor initializes the class without requiring any parameters. The class provides the capability to load an image through a user-interactive dialog, which can be invoked using the LoadCanvas() method. Methods LoadCanvas() Opens a file dialog to allow the user to select an image file to load as a canvas. public Bitmap LoadCanvas() Returns Bitmap A Bitmap object representing the loaded image if successful; otherwise, null. Remarks The method displays an OpenFileDialog configured to filter for common image file formats (PNG, JPEG, BMP). If the user selects a file, the method attempts to load it as a Bitmap. Returns a Bitmap if the image loads successfully. Returns null if the user cancels the dialog or an error occurs. If the image fails to load due to an invalid file or other issues, an error message is shown using Show(string, string, MessageBoxButtons, MessageBoxIcon, MessageBoxDefaultButton, MessageBoxOptions, bool) with detailed exception information. The following example demonstrates how to use the LoadCanvas() method: CanvasLoader loader = new CanvasLoader(); Bitmap canvas = loader.LoadCanvas(); if (canvas != null) { // Successfully loaded the canvas pictureBox.Image = canvas; } else { // The user canceled or an error occurred MessageBox.Show(\"No canvas was loaded.\"); } Exceptions ArgumentException Thrown internally if the file selected by the user is invalid or cannot be loaded as a Bitmap. OutOfMemoryException Thrown internally if the file is too large or the system is out of memory."
  },
  "api/ASE_Assignment.File_Handler.CanvasSaver.html": {
    "href": "api/ASE_Assignment.File_Handler.CanvasSaver.html",
    "title": "Class CanvasSaver | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class CanvasSaver Namespace ASE_Assignment.File_Handler Assembly ASE_Assignment.dll Represents a class that provides functionality to save a canvas image to the file system using a graphical save file dialog. public class CanvasSaver Inheritance object CanvasSaver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The CanvasSaver class uses a Windows Forms SaveFileDialog to allow the user to specify a file name and format for saving a Bitmap image. It supports saving images in PNG, JPEG, and BMP formats, as well as other formats if specified. If the user cancels the dialog or an error occurs during saving, the method handles the error gracefully and informs the user. Constructors CanvasSaver() Initializes a new instance of the CanvasSaver class. public CanvasSaver() Remarks This constructor initializes the class without requiring any parameters. The class provides the capability to save an image through a user-interactive dialog, which can be invoked using the SaveCanvas(Bitmap) method. Methods SaveCanvas(Bitmap) Opens a save file dialog to allow the user to specify the file name and format for saving the canvas image. public void SaveCanvas(Bitmap canvasBitmap) Parameters canvasBitmap Bitmap The Bitmap image to be saved. Remarks The method displays a SaveFileDialog configured to filter for common image file formats (PNG, JPEG, BMP). Based on the user's selected file extension, the appropriate image format is applied. If the user selects a file and the image is successfully saved, a success message is displayed. If the user cancels the dialog, the method performs no action. If an error occurs during the save process, an error message is displayed with exception details. The method ensures compatibility with multiple image formats and provides a simple interface for saving images from a canvas to the file system. The following example demonstrates how to use the SaveCanvas(Bitmap) method: CanvasSaver saver = new CanvasSaver(); Bitmap canvas = new Bitmap(100, 100); // Example canvas saver.SaveCanvas(canvas); Exceptions ArgumentNullException Thrown if canvasBitmap is null."
  },
  "api/ASE_Assignment.File_Handler.CommandReader.html": {
    "href": "api/ASE_Assignment.File_Handler.CommandReader.html",
    "title": "Class CommandReader | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class CommandReader Namespace ASE_Assignment.File_Handler Assembly ASE_Assignment.dll Represents a class that provides functionality to read commands from a file using a graphical file dialog. public class CommandReader Inheritance object CommandReader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The CommandReader class uses a Windows Forms OpenFileDialog to allow the user to select a text file containing commands. The file's content is read and returned as a string. If the user cancels the dialog or an error occurs, the method returns an empty string. Constructors CommandReader() Initializes a new instance of the CommandReader class. public CommandReader() Remarks This constructor initializes the class without requiring any parameters. The class provides the capability to load commands from a file using the CommandReaders() method. Methods CommandReaders() Opens a file dialog to allow the user to select a text file and reads its content. public string CommandReaders() Returns string A string containing the content of the selected file, or an empty string if the operation fails or is canceled. Remarks The method displays an OpenFileDialog configured to filter for text files (*.txt). If a file is selected, its content is read and returned. In case of an error, an error message is displayed to the user using MessageBox, and an empty string is returned. If the user selects a valid file, the content of the file is read and returned. If the user cancels the dialog, an empty string is returned. If an error occurs during file reading, an error message is shown and an empty string is returned. The method supports reading plain text files and ensures that file reading errors are handled gracefully. The following example demonstrates how to use the CommandReaders() method: CommandReader reader = new CommandReader(); string commands = reader.CommandReaders(); if (!string.IsNullOrEmpty(commands)) { // Successfully loaded commands Console.WriteLine(commands); } else { // No commands loaded Console.WriteLine(\"No commands were loaded.\"); } Exceptions UnauthorizedAccessException Thrown internally if the file cannot be accessed due to permission issues. IOException Thrown internally if there is an issue with the file system during reading. Exception Thrown internally for other unexpected errors during file reading."
  },
  "api/ASE_Assignment.File_Handler.CommandWriter.html": {
    "href": "api/ASE_Assignment.File_Handler.CommandWriter.html",
    "title": "Class CommandWriter | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class CommandWriter Namespace ASE_Assignment.File_Handler Assembly ASE_Assignment.dll Represents a class that provides functionality to write commands to a file using a graphical save file dialog. public class CommandWriter Inheritance object CommandWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The CommandWriter class uses a Windows Forms SaveFileDialog to allow the user to specify a file name and location for saving commands as text. The commands are saved as plain text in the specified file. Constructors CommandWriter() Initializes a new instance of the CommandWriter class. public CommandWriter() Remarks This constructor initializes the class without requiring any parameters. The class provides the capability to save commands to a file using the CommandWriters(string) method. Methods CommandWriters(string) Opens a save file dialog to allow the user to specify a file name and location, and writes the given commands to the selected file. public void CommandWriters(string Commands) Parameters Commands string A string containing the commands to be saved to the file. Remarks The method displays a SaveFileDialog configured to save files with a .txt extension. If a file is selected, the commands are written to the file using a StreamWriter. If the user cancels the dialog or an error occurs during writing, an appropriate message is displayed using MessageBox. If the user selects a valid file, the commands are successfully saved to the file. If the user cancels the dialog, no action is performed. If an error occurs during file writing, an error message is displayed to the user. This method ensures compatibility with text files and provides a simple interface for saving commands to the file system. The following example demonstrates how to use the CommandWriters(string) method: CommandWriter writer = new CommandWriter(); string commands = \"DRAW RECTANGLE 100 200\"; writer.CommandWriters(commands); Exceptions UnauthorizedAccessException Thrown internally if the file cannot be accessed due to permission issues. IOException Thrown internally if there is an issue with the file system during writing. ArgumentException Thrown internally if the file path is invalid."
  },
  "api/ASE_Assignment.File_Handler.html": {
    "href": "api/ASE_Assignment.File_Handler.html",
    "title": "Namespace ASE_Assignment.File_Handler | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Namespace ASE_Assignment.File_Handler Classes CanvasLoader Represents a class that provides functionality to load a canvas image from the file system using a graphical file dialog. CanvasSaver Represents a class that provides functionality to save a canvas image to the file system using a graphical save file dialog. CommandReader Represents a class that provides functionality to read commands from a file using a graphical file dialog. CommandWriter Represents a class that provides functionality to write commands to a file using a graphical save file dialog."
  },
  "api/ASE_Assignment.Form1.html": {
    "href": "api/ASE_Assignment.Form1.html",
    "title": "Class Form1 | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class Form1 Namespace ASE_Assignment Assembly ASE_Assignment.dll Main form of the application that interacts with the canvas to perform drawing operations. public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.Dispose(bool) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This form serves as the central interface for interacting with the drawing canvas and executing commands. It includes functionality for parsing, running, saving, and loading commands, as well as modifying canvas properties such as color and size. Constructors Form1() Initializes the Form1 class and sets up the canvas and command handling. public Form1() Examples var mainForm = new Form1(); Application.Run(mainForm); Remarks The constructor initializes the drawing canvas, command factory, stored program, and parser. It also sets up UI components such as text boxes to display canvas state information and a message box for output messages."
  },
  "api/ASE_Assignment.UserGuide.html": {
    "href": "api/ASE_Assignment.UserGuide.html",
    "title": "Class UserGuide | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class UserGuide Namespace ASE_Assignment Assembly ASE_Assignment.dll Represents the \"User Guide\" form in the Advanced Software Engineering application. public class UserGuide : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form UserGuide Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This form provides an interactive table displaying the commands available in the application, along with their arguments, data types, and examples. The table is implemented using a DataGridView for clarity and ease of use. Constructors UserGuide() Initializes a new instance of the UserGuide form. public UserGuide() Examples var userGuideForm = new UserGuide(); userGuideForm.Show(); Remarks The form dynamically creates and configures a DataGridView to display a command reference table. This includes details such as the command name, required arguments, their data types, and examples. The table is designed to fill the form and resize dynamically with the window. Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_Assignment.html": {
    "href": "api/ASE_Assignment.html",
    "title": "Namespace ASE_Assignment | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Namespace ASE_Assignment Classes AboutUs Represents the \"About Us\" form in the Advanced Software Engineering application. Form1 Main form of the application that interacts with the canvas to perform drawing operations. UserGuide Represents the \"User Guide\" form in the Advanced Software Engineering application."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.AboutUs.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.AboutUs.html",
    "title": "Class AboutUs | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AboutUs Namespace ASE_Assignment_Sameer_Basnet_77356702 Assembly ASE_Assignment_Sameer_Basnet_77356702.dll public class AboutUs : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form AboutUs Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AboutUs() public AboutUs() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.AppCanvas.MyAppCanvas.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.AppCanvas.MyAppCanvas.html",
    "title": "Class MyAppCanvas | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class MyAppCanvas Namespace ASE_Assignment_Sameer_Basnet_77356702.AppCanvas Assembly ASE_Assignment_Sameer_Basnet_77356702.dll Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas. public class MyAppCanvas : ICanvas Inheritance object MyAppCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class provides methods for drawing various shapes (lines, circles, rectangles, triangles) and text on a canvas represented by a bitmap. It supports operations such as setting the pen color and size, moving the pen to a new position, and resetting the canvas to its initial state. The canvas is defined by a width (XSIDE) and height (YSIDE), which are used to constrain drawing operations within the canvas boundaries. The class utilizes the Graphics object to perform rendering on the canvas. Constructors MyAppCanvas() Initializes a new instance of the MyAppCanvas class with default canvas size. public MyAppCanvas() Remarks This constructor sets the canvas size to the default values defined by the constants XSIDE and YSIDE. It also initializes the pen size to 1 and sets the pen color to black (RGB: 0, 0, 0). Exceptions CanvasException Thrown if the canvas size cannot be set properly or if invalid values are provided for pen size or color. Properties Filled public bool Filled { get; set; } Property Value bool PenColour Gets or sets the pen color for the next drawing operation. public object PenColour { get; set; } Property Value object Remarks This property allows you to retrieve or modify the current pen color used for drawing operations. The color is represented as a Color object, and it determines the color of lines, shapes, and other drawn elements on the canvas. Exceptions InvalidCastException Thrown if the provided value for the pen color is not a valid Color object. PenSize Gets or sets the pen size, which determines the thickness of the lines drawn. public int PenSize { get; set; } Property Value int The pen size, which is a positive integer. It determines how thick the lines will appear on the canvas. A value greater than zero is required. If the value is zero or negative, an exception will be thrown. Exceptions CanvasException Thrown when the pen size is set to a value less than or equal to zero. XSIDE The width of the canvas. public int XSIDE { get; set; } Property Value int Remarks This defines the horizontal dimension of the canvas. It is used to validate the X positions during drawing operations. The default value is 640 pixels. Xpos Gets or sets the X position for the next drawing operation. public int Xpos { get; set; } Property Value int Remarks This property controls the X coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). YSIDE The height of the canvas. public int YSIDE { get; set; } Property Value int Remarks This defines the vertical dimension of the canvas. It is used to validate the Y positions during drawing operations. The default value is 480 pixels. Ypos Gets or sets the Y position for the next drawing operation. public int Ypos { get; set; } Property Value int Remarks This property controls the Y coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). Methods Circle(int, bool) Attempts to draw a circle at the current pen position, either filled or outlined, depending on the specified parameter. Ensures the radius is valid and checks if the circle fits within the canvas boundaries. If the radius is invalid or the circle exceeds the canvas size, a warning is logged, and drawing is skipped. public void Circle(int radius, bool filled) Parameters radius int The radius of the circle. Must be a positive integer greater than zero. If the radius is invalid, the circle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the circle should be filled or outlined: true: Draws a filled circle. false: Draws an outlined circle. Examples The following example demonstrates how to draw a filled circle with a radius of 50: Circle(50, true); Remarks The method ensures that drawing operations do not disrupt the program's flow. If the circle cannot be drawn due to invalid input or canvas boundary constraints, the method logs a warning and continues execution. Exceptions CanvasException This exception is caught internally to prevent program termination. It is used to log errors for invalid radius values or when the circle exceeds canvas dimensions. Clear() Clears the canvas by filling it with a default background color. public void Clear() DrawTo(int, int) Draws a line from the current pen position to a specified endpoint on the canvas. public void DrawTo(int x, int y) Parameters x int The X coordinate of the endpoint of the line. This value represents the position along the horizontal axis. y int The Y coordinate of the endpoint of the line. This value represents the position along the vertical axis. Examples The following example demonstrates how to draw a line from the current pen position to the point (100, 50): DrawTo(100, 50); Remarks The method updates the pen's current position to the specified endpoint after the line is drawn. Subsequent drawing operations will use the new position as the starting point. If the line cannot be drawn due to an uninitialized graphics context, the method logs a warning but does not interrupt execution. Exceptions CanvasException Thrown if the graphics context is not initialized or if the specified coordinates are outside the canvas boundaries. GetGraphics() Returns the current Graphics object used for drawing on the canvas. public Graphics GetGraphics() Returns Graphics The Graphics object associated with the current canvas. Examples The following example demonstrates how to retrieve the current Graphics object and handle any potential exceptions if the graphics object is not initialized: try { Graphics currentGraphics = GetGraphics(); // Use currentGraphics for drawing operations, if not null } catch (CanvasException ex) { Console.WriteLine($\"Error: {ex.Message}\"); // Handle the error (e.g., log it) } Remarks This method allows access to the internal Graphics object used for drawing on the canvas. If the graphics object has not been initialized (i.e., it is null), a BOOSE.CanvasException is thrown, indicating that the drawing cannot proceed. Exceptions CanvasException Thrown if the graphics object is not initialized or is null. This exception is thrown when there is an attempt to retrieve the Graphics object before it is set. MoveTo(int, int) Moves the drawing cursor to a specified position on the canvas without drawing any lines. public void MoveTo(int x, int y) Parameters x int The X coordinate to move the cursor to. Represents the horizontal position on the canvas. Must be within the canvas boundaries. y int The Y coordinate to move the cursor to. Represents the vertical position on the canvas. Must be within the canvas boundaries. Examples The following example demonstrates how to move the pen to position (50, 100) without drawing: MoveTo(50, 100); Remarks This method updates the current position of the pen to the specified coordinates (x, y) without performing any drawing operations. It ensures that subsequent drawing operations begin from the new cursor position. If the specified coordinates are outside the canvas boundaries, the position is not updated, and a warning is logged. Exceptions CanvasException Thrown if the specified coordinates are outside the canvas boundaries defined by XSIDE and YSIDE. Rect(int, int, bool) Draws a rectangle at the current cursor position with the specified dimensions and style (filled or outline). public void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. height int The height of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the rectangle should be filled or outlined: true: Draws a filled rectangle. false: Draws an outlined rectangle. Examples The following example demonstrates how to draw a filled rectangle with a width of 100 and height of 50: Rect(100, 50, true); Remarks The rectangle is drawn starting from the current cursor position (xPos, yPos). If the rectangle's dimensions are invalid or it exceeds the canvas boundaries, it will not be drawn, and a warning will be logged. This ensures the program continues execution without interruption. Exceptions CanvasException Thrown if the specified rectangle dimensions are invalid or if the rectangle exceeds canvas boundaries. Reset() Resets the canvas to its initial state by resetting the drawing cursor position to the top-left corner. public void Reset() Examples The following example demonstrates how to reset the canvas and start fresh with drawing: Reset(); // Resets the drawing cursor to the top-left corner Remarks This method resets the drawing cursor (pen position) to the initial position at (0, 0). Any previous drawing operations will not be affected, but the next drawing operations will begin from the top-left corner of the canvas. Exceptions CanvasException Thrown if there is an issue with resetting the canvas. For example, if the canvas is in an invalid state or has not been properly initialized, an exception could be thrown. Set(int, int) Sets the canvas size and initializes the drawing surface. public void Set(int xsize, int ysize) Parameters xsize int The width of the canvas, in pixels. ysize int The height of the canvas, in pixels. Remarks This method initializes the canvas with the specified width and height. It also sets the starting position of the drawing cursor (xPos, yPos) to the top-left corner (0, 0). After setting the canvas size, it creates a new Bitmap object for drawing and a corresponding Graphics object. Additionally, it clears the canvas to prepare for drawing. Exceptions CanvasException Thrown if the width or height of the canvas is invalid (e.g., negative or zero), or if there is an error during the initialization of the drawing surface. SetCanvas(Bitmap, Graphics) Sets the canvas by assigning the provided Bitmap and Graphics objects for drawing operations. public void SetCanvas(Bitmap newBitmap, Graphics newGraphics) Parameters newBitmap Bitmap The Bitmap object to be used as the canvas surface. This object holds the pixel data for the canvas. newGraphics Graphics The Graphics object to be used for rendering on the canvas. This object provides drawing capabilities like shapes, text, and images. Examples The following example demonstrates how to initialize a canvas with a 500x500 Bitmap: Bitmap bitmap = new Bitmap(500, 500); Graphics graphics = Graphics.FromImage(bitmap); SetCanvas(bitmap, graphics); Remarks This method initializes or reinitializes the internal canvas by setting the Bitmap and Graphics objects. After setting the canvas, it clears the drawing surface with a white background to provide a fresh start. If you need a specific background color, you can modify the method to accept a color parameter or change the default behavior. Exceptions CanvasException Thrown if either newBitmap or newGraphics is null. SetColour(int, int, int) Sets the pen color using specified RGB values. public void SetColour(int red, int green, int blue) Parameters red int The red component of the color, ranging from 0 to 255. green int The green component of the color, ranging from 0 to 255. blue int The blue component of the color, ranging from 0 to 255. Examples The following example demonstrates how to set the pen color to blue: SetColour(0, 0, 255); // Sets the pen color to pure blue Remarks This method allows precise control of the pen's color by specifying the intensity of red, green, and blue components. If an invalid value is provided, an exception is thrown. The pen is updated with the new color and retains the existing pen size. Exceptions CanvasException Thrown when any of the RGB components are outside the valid range of 0 to 255. Tri(int, int) Draws a triangle within the specified bounding rectangle, ensuring it fits within the canvas boundaries. public void Tri(int width, int height) Parameters width int The width of the bounding rectangle, which defines the base of the triangle. height int The height of the bounding rectangle, which defines the height of the triangle. Examples The following example demonstrates how to draw a triangle with width 100 and height 50: Tri(100, 50); // Draws a triangle with base 100 and height 50 Remarks The method validates the triangle's width and height to ensure they are positive. It then checks if the triangle's bounding points fit within the canvas boundaries. If any point exceeds the canvas size, a CanvasException is thrown. Exceptions CanvasException Thrown if the triangle dimensions are invalid, exceed canvas boundaries, or are non-positive. WriteText(string) Draws the specified text at the current cursor position on the canvas. public void WriteText(string text) Parameters text string The text to be drawn on the canvas. Examples The following example demonstrates how to draw text at the current position: WriteText(\"Hello, Canvas!\"); // Draws the text \"Hello, Canvas!\" at the current cursor position Remarks The method checks whether the input text is valid (not null, empty, or whitespace). If the text exceeds the canvas boundaries, a BOOSE.CanvasException is thrown. The method also ensures the graphics object is initialized before attempting to draw the text. Exceptions CanvasException Thrown if the text is null, empty, or exceeds canvas boundaries. It is also thrown if the graphics object is not initialized. getBitmap() Returns the Bitmap object representing the current drawing on the canvas. public object getBitmap() Returns object The Bitmap object associated with the current canvas. This object contains the pixel data for the current drawing and can be used to save or manipulate the canvas image. Remarks The Bitmap object returned by this method reflects the current state of the canvas, including any drawings made with the pen. If no drawing has been done, it will return an empty or unmodified bitmap. Exceptions CanvasException Thrown if the Bitmap object has not been initialized or there is an issue with accessing it."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.AppCanvas.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.AppCanvas.html",
    "title": "Namespace ASE_Assignment_Sameer_Basnet_77356702.AppCanvas | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Namespace ASE_Assignment_Sameer_Basnet_77356702.AppCanvas Classes MyAppCanvas Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.AppCircle.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.AppCircle.html",
    "title": "Class AppCircle | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppCircle Namespace ASE_Assignment_Sameer_Basnet_77356702.Commands Assembly ASE_Assignment_Sameer_Basnet_77356702.dll Represents a command to draw a circle on a canvas. public class AppCircle : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter AppCircle Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class extends the BOOSE.CommandOneParameter class and allows drawing circles of specified radius on the canvas. Includes proper exception handling for invalid parameters and radius constraints. Constructors AppCircle() Initializes a new instance of the AppCircle class. public AppCircle() AppCircle(Canvas, int) Initializes a new instance of the AppCircle class with a specified canvas and radius. public AppCircle(Canvas canvas, int radius) Parameters canvas Canvas The canvas on which the circle will be drawn. radius int The radius of the circle. Exceptions RestrictionException Thrown when the radius exceeds the allowed limit of 2000. Methods CheckParameters(string[]) Validates the parameters for the circle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to draw a circle. public override void Execute() Exceptions RestrictionException Thrown when the radius exceeds the allowed limit of 2000. CommandException Thrown when an unexpected error occurs."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.AppDrawTo.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.AppDrawTo.html",
    "title": "Class AppDrawTo | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppDrawTo Namespace ASE_Assignment_Sameer_Basnet_77356702.Commands Assembly ASE_Assignment_Sameer_Basnet_77356702.dll Represents a command to draw to a specified position on a canvas. public class AppDrawTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppDrawTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class extends the BOOSE.CommandTwoParameters class and allows drawing to a specific position (x, y) on the canvas. Includes proper exception handling for invalid parameters. Constructors AppDrawTo() Initializes a new instance of the AppDrawTo class. public AppDrawTo() AppDrawTo(Canvas, int, int) Initializes a new instance of the AppDrawTo class with a specified canvas and coordinates. public AppDrawTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas on which the drawing will occur. x int The x-coordinate to draw to. y int The y-coordinate to draw to. Exceptions RestrictionException Thrown when coordinates are invalid (e.g., negative). Methods CheckParameters(string[]) Validates the parameters for the draw-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to draw to the specified position. public override void Execute() Exceptions CommandException Thrown when an unexpected error occurs during execution."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.AppMoveTo.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.AppMoveTo.html",
    "title": "Class AppMoveTo | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppMoveTo Namespace ASE_Assignment_Sameer_Basnet_77356702.Commands Assembly ASE_Assignment_Sameer_Basnet_77356702.dll Represents a command to move to a specified position on a canvas. public class AppMoveTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppMoveTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class extends the BOOSE.CommandTwoParameters class and allows moving to a specific position (x, y) on the canvas. Includes proper exception handling for invalid parameters. Constructors AppMoveTo() Initializes a new instance of the AppMoveTo class. public AppMoveTo() AppMoveTo(Canvas, int, int) Initializes a new instance of the AppMoveTo class with a specified canvas and coordinates. public AppMoveTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas on which the move operation will occur. x int The x-coordinate to move to. y int The y-coordinate to move to. Exceptions RestrictionException Thrown when coordinates exceed the allowed limit of 2000. Methods CheckParameters(string[]) Validates the parameters for the move-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to move to the specified position. public override void Execute() Exceptions RestrictionException Thrown when the coordinates exceed the allowed limit of 2000. CommandException Thrown when an unexpected error occurs during execution."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.AppPenColour.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.AppPenColour.html",
    "title": "Class AppPenColour | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppPenColour Namespace ASE_Assignment_Sameer_Basnet_77356702.Commands Assembly ASE_Assignment_Sameer_Basnet_77356702.dll Represents a command to set the pen color on a canvas. public class AppPenColour : CommandThreeParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandThreeParameters AppPenColour Implements ICommand Inherited Members CommandThreeParameters.param3 CommandThreeParameters.param3unprocessed CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class extends the BOOSE.CommandThreeParameters class and allows setting a specific color (R, G, B) for the pen. Includes proper exception handling for invalid parameters. Constructors AppPenColour() Initializes a new instance of the AppPenColour class. public AppPenColour() AppPenColour(Canvas, int, int, int) Initializes a new instance of the AppPenColour class with a specified canvas and color parameters. public AppPenColour(Canvas canvas, int r, int g, int b) Parameters canvas Canvas The canvas on which the pen color operation will occur. r int The red component of the pen color. g int The green component of the pen color. b int The blue component of the pen color. Exceptions RestrictionException Thrown when any color component exceeds the allowed limits (0-255). Methods CheckParameters(string[]) Validates the parameters for the pen color command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to set the pen color. public override void Execute() Exceptions RestrictionException Thrown when the color components are out of the allowed range (0-255). CommandException Thrown when an unexpected error occurs during execution."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.AppRectangle.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.AppRectangle.html",
    "title": "Class AppRectangle | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppRectangle Namespace ASE_Assignment_Sameer_Basnet_77356702.Commands Assembly ASE_Assignment_Sameer_Basnet_77356702.dll Represents a command to draw a rectangle on the canvas. public class AppRectangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppRectangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class extends the BOOSE.CommandTwoParameters class and allows drawing a rectangle with a specified width and height. Includes proper exception handling for invalid parameters. Constructors AppRectangle() Initializes a new instance of the AppRectangle class. public AppRectangle() AppRectangle(Canvas, int, int) Initializes a new instance of the AppRectangle class with a specified canvas, width, and height. public AppRectangle(Canvas canvas, int width, int height) Parameters canvas Canvas The canvas on which the rectangle will be drawn. width int The width of the rectangle. height int The height of the rectangle. Exceptions RestrictionException Thrown when width or height exceed the allowed limit of 2000. Methods CheckParameters(string[]) Validates the parameters for the rectangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to draw the rectangle on the canvas. public override void Execute() Exceptions RestrictionException Thrown when the width or height exceeds the allowed limit of 2000. CommandException Thrown when an unexpected error occurs during execution."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.Clear.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.Clear.html",
    "title": "Class Clear | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class Clear Namespace ASE_Assignment_Sameer_Basnet_77356702.Commands Assembly ASE_Assignment_Sameer_Basnet_77356702.dll Represents a command that clears the Canvas. The command does not take any parameters. public class Clear : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Clear Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The Clear class is used to clear the contents of the Canvas. Since no parameters are required for this command, the CheckParameters(string[]) method is left empty. Clears all elements on the Canvas when executed. Does not throw any exceptions by itself, as it has no parameter validation. Constructors Clear() Initializes a new instance of the Clear class with default values. public Clear() Remarks This constructor is used when no specific canvas reference is needed to initialize the command. The Canvas object will be provided when the Execute() method is called. Clear(Canvas) Initializes a new instance of the Clear class with a specified Canvas. public Clear(Canvas c) Parameters c Canvas The BOOSE.Canvas object on which the clear operation will be performed. Remarks This constructor is used when the command is initialized with a known Canvas object that the operation will affect. Methods CheckParameters(string[]) Checks the parameters provided for the Clear command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters. This list is ignored since no parameters are required for the Clear command. Remarks Since the Clear command does not take any parameters, this method does not perform any validation. It remains empty to ensure that no unexpected behavior occurs when no parameters are provided. Execute() Executes the Clear command to clear the contents of the Canvas. public override void Execute() Examples The following example demonstrates how to use the Clear class: Canvas myCanvas = new Canvas(); Clear clearCommand = new Clear(myCanvas); clearCommand.Execute(); // Clears the canvas Remarks The Execute() method calls the Canvas' BOOSE.Canvas.Clear() method to clear the canvas. Since this command does not require parameters, no validation is necessary for execution."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.Fill.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.Fill.html",
    "title": "Class Fill | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class Fill Namespace ASE_Assignment_Sameer_Basnet_77356702.Commands Assembly ASE_Assignment_Sameer_Basnet_77356702.dll Represents a command that sets the fill state for a shape on the Canvas. The command takes one parameter: a string that indicates whether the shape should be filled. public class Fill : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Fill Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The Fill class is responsible for setting the fill state of the shape on the Canvas. It validates the fill state (either \"true\" or \"false\") and applies the fill setting accordingly. The parameter must be either \"true\" or \"false\". Throws a BOOSE.CommandException if the parameter is invalid. Constructors Fill() Initializes a new instance of the Fill class with default values. public Fill() Remarks This constructor can be used when no initial text value is provided. The text can be set later using the Execute() method. Fill(Canvas, string) Initializes a new instance of the Fill class with a specified Canvas and text value. public Fill(Canvas c, string text) Parameters c Canvas The BOOSE.Canvas object on which the fill state will be applied. text string A string representing the fill state, either \"true\" or \"false\". Remarks Use this constructor when creating the Fill command with a known text value and Canvas reference. Methods CheckParameters(string[]) Validates the parameters provided for the Fill command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters representing the fill state (\"true\" or \"false\"). Examples The following example demonstrates parameter validation: Fill fillCommand = new Fill(); fillCommand.CheckParameters(new string[] { \"true\" }); // No exception fillCommand.CheckParameters(new string[] { \"true\", \"false\" }); // Throws CommandException Remarks This method checks that: The parameter list contains exactly one parameter. If validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter list is null or does not contain exactly one parameter. Execute() Executes the Fill command to set the fill state of a shape on the Canvas. public override void Execute() Examples The following example demonstrates how to use the Fill class: Canvas myCanvas = new Canvas(); Fill fillCommand = new Fill(myCanvas, \"true\"); fillCommand.Execute(); Remarks The method performs the following steps: Extracts the text parameter from the base class. Validates the text value to ensure it is not null, empty, or exceeding 5 characters. Calls the SetFilled(string) method to apply the fill state. If the text value is invalid, a BOOSE.RestrictionException is thrown. Exceptions RestrictionException Thrown when the text value is null, empty, whitespace, or exceeds 5 characters. SetFilled(string) Sets the filled state of the shape using a string value (\"true\" or \"false\"). public void SetFilled(string isFilledStr) Parameters isFilledStr string A string value (\"true\" or \"false\") indicating whether the shape is filled. Remarks This method updates the global configuration to enable or disable filling based on the provided value. Exceptions CommandException Thrown when the string value is neither \"true\" nor \"false\"."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.PenSize.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.PenSize.html",
    "title": "Class PenSize | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class PenSize Namespace ASE_Assignment_Sameer_Basnet_77356702.Commands Assembly ASE_Assignment_Sameer_Basnet_77356702.dll Represents a command that sets the pen size for drawing on the Canvas. The command takes one parameter: the desired pen size. public class PenSize : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter PenSize Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The PenSize class is responsible for validating and applying the pen size. It ensures the pen size: Is a non-negative integer. Does not exceed 100. If validation fails, a BOOSE.RestrictionException is thrown. Constructors PenSize() Initializes a new instance of the PenSize class with default values. public PenSize() Remarks This default constructor can be used when no initial pen size is provided. The pen size can be set later using the Execute() method. PenSize(Canvas, int) Initializes a new instance of the PenSize class with a specified Canvas and pen size. public PenSize(Canvas c, int pensize) Parameters c Canvas The BOOSE.Canvas object where the pen size will be applied. pensize int The desired pen size to be set. Remarks Use this constructor when creating the command with a known pen size and a Canvas reference. Methods CheckParameters(string[]) Validates the parameters provided for the PenSize command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters representing the pen size. Examples The following example demonstrates parameter validation: PenSize penSizeCommand = new PenSize(); penSizeCommand.CheckParameters(new string[] { \"10\" }); // No exception penSizeCommand.CheckParameters(new string[] { }); // Throws CommandException Remarks This method checks that: The parameter list contains exactly one parameter. If validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter list is null or does not contain exactly 1 parameter. Execute() Executes the PenSize command to set the pen size on the Canvas. public override void Execute() Examples The following example demonstrates how to use the PenSize class: Canvas myCanvas = new Canvas(); PenSize penSizeCommand = new PenSize(myCanvas, 10); penSizeCommand.Execute(); Remarks The method performs the following steps: Extracts the pen size parameter from the base class. Validates that the pen size is within the valid range (0 to 100). Sets the pen size using the SetPenSize(int) method. If the pen size is invalid (either too large or negative), a BOOSE.RestrictionException is thrown. Exceptions RestrictionException Thrown when the pen size exceeds 100 or is negative. SetPenSize(int) Sets the pen size using an integer argument. public void SetPenSize(int penSize) Parameters penSize int The pen size to set. Must be a non-negative integer. Remarks This method updates the global pen size setting in the application."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.Reset.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.Reset.html",
    "title": "Class Reset | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class Reset Namespace ASE_Assignment_Sameer_Basnet_77356702.Commands Assembly ASE_Assignment_Sameer_Basnet_77356702.dll Represents a command that resets the Canvas to its initial state. The command does not take any parameters. public class Reset : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Reset Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The Reset class is responsible for resetting the Canvas to its default or initial state. Similar to the Clear command, it does not require any parameters and directly operates on the Canvas object. Resets the Canvas to its initial state when executed. Does not throw any exceptions by itself, as it does not require parameter validation. Constructors Reset() Initializes a new instance of the Reset class with default values. public Reset() Remarks This constructor is used when no specific Canvas reference is needed to initialize the command. The Canvas object will be provided when the Execute() method is called. Reset(Canvas) Initializes a new instance of the Reset class with a specified Canvas. public Reset(Canvas c) Parameters c Canvas The BOOSE.Canvas object on which the reset operation will be performed. Remarks This constructor is used when the command is initialized with a known Canvas object that the operation will affect. Methods CheckParameters(string[]) Checks the parameters provided for the Reset command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters. This list is ignored since no parameters are required for the Reset command. Remarks Since the Reset command does not take any parameters, this method does not perform any validation. It remains empty to ensure that no unexpected behavior occurs when no parameters are provided. Execute() Executes the Reset command to reset the Canvas to its initial state. public override void Execute() Examples The following example demonstrates how to use the Reset class: Canvas myCanvas = new Canvas(); Reset resetCommand = new Reset(myCanvas); resetCommand.Execute(); // Resets the canvas to its initial state Remarks The Execute() method calls the Canvas' BOOSE.Canvas.Reset() method to reset the canvas. Since this command does not require parameters, no validation is necessary for execution."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.Triangle.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.Triangle.html",
    "title": "Class Triangle | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class Triangle Namespace ASE_Assignment_Sameer_Basnet_77356702.Commands Assembly ASE_Assignment_Sameer_Basnet_77356702.dll Represents a command that draws a triangle on the Canvas. This command accepts two integer parameters: base length and height. public class Triangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters Triangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The Triangle class is responsible for validating and passing base length and height parameters to the Canvas for rendering a triangle. The command ensures that: Both base length and height are valid integers. Both parameters do not exceed 2000. If the conditions are not met, appropriate exceptions are thrown. Constructors Triangle() Initializes a new instance of the Triangle class with default values. public Triangle() Remarks This default constructor can be used to create an instance of the class without specifying initial values for parameters. Parameters can be assigned later. Triangle(Canvas, int, int) Initializes a new instance of the Triangle class with specified Canvas, base length, and height. public Triangle(Canvas c, int baseLength, int height) Parameters c Canvas The BOOSE.Canvas object on which the triangle will be drawn. baseLength int The base length of the triangle. height int The height of the triangle. Remarks Use this constructor when creating the triangle command with known dimensions and a Canvas reference. Methods CheckParameters(string[]) Validates the parameters provided for the Triangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters representing base length and height. Examples The following example demonstrates parameter validation: Triangle triangleCommand = new Triangle(); triangleCommand.CheckParameters(new string[] { \"500\", \"300\" }); // No exception triangleCommand.CheckParameters(new string[] { \"500\" }); // Throws CommandException Remarks This method checks that: The parameter list contains exactly 2 parameters. The parameters are integers (validated by the calling process). If validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter list is null or does not contain exactly 2 parameters. Execute() Executes the Triangle command to draw a triangle on the Canvas. public override void Execute() Examples The following example demonstrates how to use the Triangle class: Canvas myCanvas = new Canvas(); Triangle triangleCommand = new Triangle(myCanvas, 500, 300); triangleCommand.Execute(); Remarks The method performs the following steps: Extracts the base length and height parameters from the base class. Validates that the base length and height do not exceed 2000. Calls the Canvas method to render the triangle. If validation fails, a BOOSE.RestrictionException is thrown. Exceptions RestrictionException Thrown when base length or height exceeds 2000."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.WriteTo.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.WriteTo.html",
    "title": "Class WriteTo | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class WriteTo Namespace ASE_Assignment_Sameer_Basnet_77356702.Commands Assembly ASE_Assignment_Sameer_Basnet_77356702.dll Represents a command that writes text to a Canvas. This command ensures the text is valid before writing. public class WriteTo : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter WriteTo Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The WriteTo class is used to validate and write a string parameter to a BOOSE.Canvas. It validates that the text is non-null, non-empty, does not contain only whitespace, and is no longer than 100 characters. Any validation failure will throw a BOOSE.RestrictionException or BOOSE.CommandException. Constructors WriteTo() Initializes a new instance of the WriteTo class with default values. public WriteTo() Remarks This default constructor initializes the command without any parameters. It can be used for creating the instance, and parameters can be set later. WriteTo(Canvas, string) Initializes a new instance of the WriteTo class with a specified Canvas and text. public WriteTo(Canvas c, string text) Parameters c Canvas The BOOSE.Canvas object where text will be written. text string The text to be written to the Canvas. Remarks This constructor assigns the text and c to class members. Methods CheckParameters(string[]) Validates the parameters provided to the command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Examples The following code demonstrates parameter validation: WriteTo writeCommand = new WriteTo(); writeCommand.CheckParameters(new string[] { \"Valid Text\" }); // No exception writeCommand.CheckParameters(new string[] { \"\" }); // Throws CommandException Remarks This method ensures that the provided parameters meet the following conditions: The parameter list contains exactly one parameter. The text parameter is not null, empty, or whitespace. If validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter list is null, has an incorrect number of parameters, or the text parameter is null, empty, or whitespace. Execute() Executes the command by writing the text to the Canvas. public override void Execute() Examples The following code demonstrates how to use the WriteTo class: Canvas myCanvas = new Canvas(); WriteTo writeCommand = new WriteTo(myCanvas, \"Hello, World!\"); writeCommand.Execute(); Remarks The text is validated before execution. It must: Not be null, empty, or whitespace. Not exceed 100 characters. If validation fails, a BOOSE.RestrictionException is thrown. Exceptions RestrictionException Thrown when the text is null, empty, whitespace, or exceeds 100 characters."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.Commands.html",
    "title": "Namespace ASE_Assignment_Sameer_Basnet_77356702.Commands | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Namespace ASE_Assignment_Sameer_Basnet_77356702.Commands Classes AppCircle Represents a command to draw a circle on a canvas. AppDrawTo Represents a command to draw to a specified position on a canvas. AppMoveTo Represents a command to move to a specified position on a canvas. AppPenColour Represents a command to set the pen color on a canvas. AppRectangle Represents a command to draw a rectangle on the canvas. Clear Represents a command that clears the Canvas. The command does not take any parameters. Fill Represents a command that sets the fill state for a shape on the Canvas. The command takes one parameter: a string that indicates whether the shape should be filled. PenSize Represents a command that sets the pen size for drawing on the Canvas. The command takes one parameter: the desired pen size. Reset Represents a command that resets the Canvas to its initial state. The command does not take any parameters. Triangle Represents a command that draws a triangle on the Canvas. This command accepts two integer parameters: base length and height. WriteTo Represents a command that writes text to a Canvas. This command ensures the text is valid before writing."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.Components.AppCommandFactory.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.Components.AppCommandFactory.html",
    "title": "Class AppCommandFactory | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppCommandFactory Namespace ASE_Assignment_Sameer_Basnet_77356702.Components Assembly ASE_Assignment_Sameer_Basnet_77356702.dll AppCommandFactory is a concrete implementation of the CommandFactory class. This factory is responsible for creating specific commands based on the provided command string. It overrides the MakeCommand method to handle specific types of commands. If an invalid command is passed, it logs the error using FactoryException and prevents program termination. public class AppCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory AppCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCommandFactory() Initializes a new instance of the AppCommandFactory class. public AppCommandFactory() Methods MakeCommand(string) Creates a specific BOOSE.ICommand based on the provided command string. The method checks the command string and returns the corresponding ICommand object. If the command is invalid, a FactoryException is caught, logged, and handled safely. public override ICommand MakeCommand(string command) Parameters command string The command string to create a corresponding ICommand. Returns ICommand An BOOSE.ICommand corresponding to the provided command string, or null if the command is invalid."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.Components.AppPraser.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.Components.AppPraser.html",
    "title": "Class AppPraser | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppPraser Namespace ASE_Assignment_Sameer_Basnet_77356702.Components Assembly ASE_Assignment_Sameer_Basnet_77356702.dll The AppPraser class implements the IParser interface. It is responsible for parsing commands, cleaning and processing input, handling variable validation, and generating the corresponding commands using a command factory. public class AppPraser : IParser Inheritance object AppPraser Implements IParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppPraser() public AppPraser() AppPraser(ICommandFactory, StoredProgram) Initializes a new instance of the AppPraser class. This method sets the command factory and stored program for parsing. public AppPraser(ICommandFactory commandFactory, StoredProgram storedProgram) Parameters commandFactory ICommandFactory The factory that generates commands. storedProgram StoredProgram The stored program that holds the parsed commands and variables. Methods ParseCommand(string) Parses a single line of input and returns the corresponding BOOSE.ICommand object. public ICommand ParseCommand(string line) Parameters line string The input line to parse. Returns ICommand An BOOSE.ICommand object representing the parsed command, or null if the line is empty or a comment. Exceptions ParserException Thrown when an unknown or unsupported variable type is encountered. ParseProgram(string) Parses an entire program, processing each line and adding the resulting commands to the stored program. public void ParseProgram(string program) Parameters program string The program to parse, as a string containing multiple lines. Exceptions ArgumentException Thrown if the program is null or empty."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.Components.AppStoredProgram.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.Components.AppStoredProgram.html",
    "title": "Class AppStoredProgram | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppStoredProgram Namespace ASE_Assignment_Sameer_Basnet_77356702.Components Assembly ASE_Assignment_Sameer_Basnet_77356702.dll Represents a stored program that can be executed on a canvas, with support for variables, methods, and conditional commands. public class AppStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram AppStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.FindVariable(Evaluation) ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppStoredProgram(ICanvas) Initializes a new instance of the AppStoredProgram class with a specified canvas. public AppStoredProgram(ICanvas _canvas) Parameters _canvas ICanvas The canvas on which the program will be executed. Fields SyntaxOk public bool SyntaxOk Field Value bool Properties PC Gets or sets the program counter, which determines the current command to execute. public virtual int PC { get; set; } Property Value int Methods Add(Command) Adds a command to the program. public virtual int Add(Command C) Parameters C Command Returns int AddMethod(Method) Adds a method to the program's list of methods. public virtual void AddMethod(Method M) Parameters M Method AddVariable(Evaluation) Adds a variable to the program's list of variables. public virtual void AddVariable(Evaluation Variable) Parameters Variable Evaluation Commandsleft() Checks if there are any commands left to execute. public virtual bool Commandsleft() Returns bool DeleteVariable(string) Deletes a variable from the program. public virtual void DeleteVariable(string varName) Parameters varName string EvaluateExpression(string) Evaluates an expression and returns the result. public virtual string EvaluateExpression(string Exp) Parameters Exp string Returns string EvaluateExpressionWithString(string) Evaluates an expression and returns the result as a string. public virtual string EvaluateExpressionWithString(string expression) Parameters expression string Returns string FindVariable(string) Finds the index of a variable by its name. public virtual int FindVariable(string varName) Parameters varName string The name of the variable to find. Returns int The index of the variable, or -1 if not found. GetMethod(string) Retrieves a method by its name. public virtual Method GetMethod(string MethodName) Parameters MethodName string The name of the method to retrieve. Returns Method The method corresponding to the given name. GetVarValue(string) Retrieves the value of a variable as a string. public virtual string GetVarValue(string varName) Parameters varName string Returns string GetVariable(int) public virtual Evaluation GetVariable(int index) Parameters index int Returns Evaluation GetVariable(string) Retrieves a variable by its name. public virtual Evaluation GetVariable(string VarName) Parameters VarName string The name of the variable to retrieve. Returns Evaluation The variable corresponding to the given name. IsExpression(string) Checks if the given string is an expression. public virtual bool IsExpression(string expression) Parameters expression string Returns bool NextCommand() Retrieves the next command from the program. public virtual object NextCommand() Returns object Pop() Pops a conditional command from the stack. public virtual ConditionalCommand Pop() Returns ConditionalCommand Push(ConditionalCommand) Pushes a conditional command onto the stack. public virtual void Push(ConditionalCommand Com) Parameters Com ConditionalCommand ResetProgram() Resets the program to its initial state. public virtual void ResetProgram() Run() Executes the program by processing each command. public virtual void Run() UpdateVariable(string, bool) Updates a variable's value with a boolean value. public virtual void UpdateVariable(string varName, bool value) Parameters varName string value bool UpdateVariable(string, double) Updates a variable's value with a double value. public virtual void UpdateVariable(string varName, double value) Parameters varName string value double UpdateVariable(string, int) Updates a variable's value with an integer value. public virtual void UpdateVariable(string varName, int value) Parameters varName string value int VariableExists(string) public virtual bool VariableExists(string varName) Parameters varName string Returns bool"
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.Components.GlobalConfiguration.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.Components.GlobalConfiguration.html",
    "title": "Class GlobalConfiguration | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class GlobalConfiguration Namespace ASE_Assignment_Sameer_Basnet_77356702.Components Assembly ASE_Assignment_Sameer_Basnet_77356702.dll A static configuration class for global settings that influence canvas drawing operations. This class contains properties for managing canvas dimensions, drawing modes, pen settings, and exception messages. public class GlobalConfiguration Inheritance object GlobalConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsFillEnabled Gets or sets a value indicating whether the fill mode is enabled during drawing operations. When enabled, shapes will be filled rather than outlined. The default value is false. public static bool IsFillEnabled { get; set; } Property Value bool Remarks The value of IsFillEnabled should be updated to enable or disable fill mode. It should be a boolean value: true for enabled and false for disabled. MaxX Gets or sets the maximum X coordinate (width) of the canvas. This value defines the maximum horizontal position during drawing operations. The default value is 640 pixels. public static int MaxX { get; set; } Property Value int Remarks The value of MaxX should be updated if you want to change the canvas's horizontal limit. It should be a positive integer value. MaxY Gets or sets the maximum Y coordinate (height) of the canvas. This value defines the maximum vertical position during drawing operations. The default value is 480 pixels. public static int MaxY { get; set; } Property Value int Remarks The value of MaxY should be updated if you want to change the canvas's vertical limit. It should be a positive integer value. OutputExceptionMsg Gets or sets the global output exception message. public static string OutputExceptionMsg { get; set; } Property Value string Remarks This property stores the exception message related to recent operations. By default, it is an empty string. PenSize Gets or sets the global pen size used in drawing operations. public static int PenSize { get; set; } Property Value int Remarks The pen size determines the thickness of lines in drawing operations. A value of 1 indicates pen thickness, and the default value is 1."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.Components.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.Components.html",
    "title": "Namespace ASE_Assignment_Sameer_Basnet_77356702.Components | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Namespace ASE_Assignment_Sameer_Basnet_77356702.Components Classes AppCommandFactory AppCommandFactory is a concrete implementation of the CommandFactory class. This factory is responsible for creating specific commands based on the provided command string. It overrides the MakeCommand method to handle specific types of commands. If an invalid command is passed, it logs the error using FactoryException and prevents program termination. AppPraser The AppPraser class implements the IParser interface. It is responsible for parsing commands, cleaning and processing input, handling variable validation, and generating the corresponding commands using a command factory. AppStoredProgram Represents a stored program that can be executed on a canvas, with support for variables, methods, and conditional commands. GlobalConfiguration A static configuration class for global settings that influence canvas drawing operations. This class contains properties for managing canvas dimensions, drawing modes, pen settings, and exception messages."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.File_Handler.CanvasLoader.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.File_Handler.CanvasLoader.html",
    "title": "Class CanvasLoader | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class CanvasLoader Namespace ASE_Assignment_Sameer_Basnet_77356702.File_Handler Assembly ASE_Assignment_Sameer_Basnet_77356702.dll Represents a class that provides functionality to load a canvas image from the file system using a graphical file dialog. public class CanvasLoader Inheritance object CanvasLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The CanvasLoader class uses a Windows Forms OpenFileDialog to allow the user to select an image file (PNG, JPEG, BMP) to load into the application. The selected file is loaded as a Bitmap object. If the user cancels the dialog or an error occurs during loading, the method returns null. Constructors CanvasLoader() Initializes a new instance of the CanvasLoader class. public CanvasLoader() Remarks This constructor initializes the class without requiring any parameters. The class provides the capability to load an image through a user-interactive dialog, which can be invoked using the LoadCanvas() method. Methods LoadCanvas() Opens a file dialog to allow the user to select an image file to load as a canvas. public Bitmap LoadCanvas() Returns Bitmap A Bitmap object representing the loaded image if successful; otherwise, null. Remarks The method displays an OpenFileDialog configured to filter for common image file formats (PNG, JPEG, BMP). If the user selects a file, the method attempts to load it as a Bitmap. Returns a Bitmap if the image loads successfully. Returns null if the user cancels the dialog or an error occurs. If the image fails to load due to an invalid file or other issues, an error message is shown using Show(string, string, MessageBoxButtons, MessageBoxIcon, MessageBoxDefaultButton, MessageBoxOptions, bool) with detailed exception information. The following example demonstrates how to use the LoadCanvas() method: CanvasLoader loader = new CanvasLoader(); Bitmap canvas = loader.LoadCanvas(); if (canvas != null) { // Successfully loaded the canvas pictureBox.Image = canvas; } else { // The user canceled or an error occurred MessageBox.Show(\"No canvas was loaded.\"); } Exceptions ArgumentException Thrown internally if the file selected by the user is invalid or cannot be loaded as a Bitmap. OutOfMemoryException Thrown internally if the file is too large or the system is out of memory."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.File_Handler.CanvasSaver.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.File_Handler.CanvasSaver.html",
    "title": "Class CanvasSaver | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class CanvasSaver Namespace ASE_Assignment_Sameer_Basnet_77356702.File_Handler Assembly ASE_Assignment_Sameer_Basnet_77356702.dll Represents a class that provides functionality to save a canvas image to the file system using a graphical save file dialog. public class CanvasSaver Inheritance object CanvasSaver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The CanvasSaver class uses a Windows Forms SaveFileDialog to allow the user to specify a file name and format for saving a Bitmap image. It supports saving images in PNG, JPEG, and BMP formats, as well as other formats if specified. If the user cancels the dialog or an error occurs during saving, the method handles the error gracefully and informs the user. Constructors CanvasSaver() Initializes a new instance of the CanvasSaver class. public CanvasSaver() Remarks This constructor initializes the class without requiring any parameters. The class provides the capability to save an image through a user-interactive dialog, which can be invoked using the SaveCanvas(Bitmap) method. Methods SaveCanvas(Bitmap) Opens a save file dialog to allow the user to specify the file name and format for saving the canvas image. public void SaveCanvas(Bitmap canvasBitmap) Parameters canvasBitmap Bitmap The Bitmap image to be saved. Remarks The method displays a SaveFileDialog configured to filter for common image file formats (PNG, JPEG, BMP). Based on the user's selected file extension, the appropriate image format is applied. If the user selects a file and the image is successfully saved, a success message is displayed. If the user cancels the dialog, the method performs no action. If an error occurs during the save process, an error message is displayed with exception details. The method ensures compatibility with multiple image formats and provides a simple interface for saving images from a canvas to the file system. The following example demonstrates how to use the SaveCanvas(Bitmap) method: CanvasSaver saver = new CanvasSaver(); Bitmap canvas = new Bitmap(100, 100); // Example canvas saver.SaveCanvas(canvas); Exceptions ArgumentNullException Thrown if canvasBitmap is null."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.File_Handler.CommandReader.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.File_Handler.CommandReader.html",
    "title": "Class CommandReader | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class CommandReader Namespace ASE_Assignment_Sameer_Basnet_77356702.File_Handler Assembly ASE_Assignment_Sameer_Basnet_77356702.dll Represents a class that provides functionality to read commands from a file using a graphical file dialog. public class CommandReader Inheritance object CommandReader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The CommandReader class uses a Windows Forms OpenFileDialog to allow the user to select a text file containing commands. The file's content is read and returned as a string. If the user cancels the dialog or an error occurs, the method returns an empty string. Constructors CommandReader() Initializes a new instance of the CommandReader class. public CommandReader() Remarks This constructor initializes the class without requiring any parameters. The class provides the capability to load commands from a file using the CommandReaders() method. Methods CommandReaders() Opens a file dialog to allow the user to select a text file and reads its content. public string CommandReaders() Returns string A string containing the content of the selected file, or an empty string if the operation fails or is canceled. Remarks The method displays an OpenFileDialog configured to filter for text files (*.txt). If a file is selected, its content is read and returned. In case of an error, an error message is displayed to the user using MessageBox, and an empty string is returned. If the user selects a valid file, the content of the file is read and returned. If the user cancels the dialog, an empty string is returned. If an error occurs during file reading, an error message is shown and an empty string is returned. The method supports reading plain text files and ensures that file reading errors are handled gracefully. The following example demonstrates how to use the CommandReaders() method: CommandReader reader = new CommandReader(); string commands = reader.CommandReaders(); if (!string.IsNullOrEmpty(commands)) { // Successfully loaded commands Console.WriteLine(commands); } else { // No commands loaded Console.WriteLine(\"No commands were loaded.\"); } Exceptions UnauthorizedAccessException Thrown internally if the file cannot be accessed due to permission issues. IOException Thrown internally if there is an issue with the file system during reading. Exception Thrown internally for other unexpected errors during file reading."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.File_Handler.CommandWriter.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.File_Handler.CommandWriter.html",
    "title": "Class CommandWriter | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class CommandWriter Namespace ASE_Assignment_Sameer_Basnet_77356702.File_Handler Assembly ASE_Assignment_Sameer_Basnet_77356702.dll Represents a class that provides functionality to write commands to a file using a graphical save file dialog. public class CommandWriter Inheritance object CommandWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The CommandWriter class uses a Windows Forms SaveFileDialog to allow the user to specify a file name and location for saving commands as text. The commands are saved as plain text in the specified file. Constructors CommandWriter() Initializes a new instance of the CommandWriter class. public CommandWriter() Remarks This constructor initializes the class without requiring any parameters. The class provides the capability to save commands to a file using the CommandWriters(string) method. Methods CommandWriters(string) Opens a save file dialog to allow the user to specify a file name and location, and writes the given commands to the selected file. public void CommandWriters(string Commands) Parameters Commands string A string containing the commands to be saved to the file. Remarks The method displays a SaveFileDialog configured to save files with a .txt extension. If a file is selected, the commands are written to the file using a StreamWriter. If the user cancels the dialog or an error occurs during writing, an appropriate message is displayed using MessageBox. If the user selects a valid file, the commands are successfully saved to the file. If the user cancels the dialog, no action is performed. If an error occurs during file writing, an error message is displayed to the user. This method ensures compatibility with text files and provides a simple interface for saving commands to the file system. The following example demonstrates how to use the CommandWriters(string) method: CommandWriter writer = new CommandWriter(); string commands = \"DRAW RECTANGLE 100 200\"; writer.CommandWriters(commands); Exceptions UnauthorizedAccessException Thrown internally if the file cannot be accessed due to permission issues. IOException Thrown internally if there is an issue with the file system during writing. ArgumentException Thrown internally if the file path is invalid."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.File_Handler.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.File_Handler.html",
    "title": "Namespace ASE_Assignment_Sameer_Basnet_77356702.File_Handler | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Namespace ASE_Assignment_Sameer_Basnet_77356702.File_Handler Classes CanvasLoader Represents a class that provides functionality to load a canvas image from the file system using a graphical file dialog. CanvasSaver Represents a class that provides functionality to save a canvas image to the file system using a graphical save file dialog. CommandReader Represents a class that provides functionality to read commands from a file using a graphical file dialog. CommandWriter Represents a class that provides functionality to write commands to a file using a graphical save file dialog."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.Form1.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.Form1.html",
    "title": "Class Form1 | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class Form1 Namespace ASE_Assignment_Sameer_Basnet_77356702 Assembly ASE_Assignment_Sameer_Basnet_77356702.dll Main form of the application that interacts with the canvas to perform drawing operations. public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.Dispose(bool) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() Initializes the Form1 class and sets up the canvas and command handling. public Form1()"
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.UserGuide.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.UserGuide.html",
    "title": "Class UserGuide | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class UserGuide Namespace ASE_Assignment_Sameer_Basnet_77356702 Assembly ASE_Assignment_Sameer_Basnet_77356702.dll public class UserGuide : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form UserGuide Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors UserGuide() public UserGuide() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_Assignment_Sameer_Basnet_77356702.html": {
    "href": "api/ASE_Assignment_Sameer_Basnet_77356702.html",
    "title": "Namespace ASE_Assignment_Sameer_Basnet_77356702 | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Namespace ASE_Assignment_Sameer_Basnet_77356702 Classes AboutUs Form1 Main form of the application that interacts with the canvas to perform drawing operations. UserGuide"
  },
  "api/ASE_Assignment_Test.CommandUnitTests.html": {
    "href": "api/ASE_Assignment_Test.CommandUnitTests.html",
    "title": "Class CommandUnitTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class CommandUnitTests Namespace ASE_Assignment_Test Assembly ASE_Assignment_Test.dll Unit tests for command execution functionality in the application. [TestClass] public class CommandUnitTests Inheritance object CommandUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This test class verifies that the program execution and single command execution do not alter the global configuration's output exception message. It uses mock dependencies for testing the interaction between components such as the command factory, parser, and stored program. Methods Setup() Sets up the test environment by initializing mock objects and dependencies. [TestInitialize] public void Setup() Remarks This method is executed before each test to ensure a clean and consistent test environment. Test_ArrayCommand_ShouldHandleValidAndRestrictedScenarios() Tests the execution of a valid 'array' command with restricted scenarios. [TestMethod] public void Test_ArrayCommand_ShouldHandleValidAndRestrictedScenarios() Remarks The test verifies that a 'array' with valid which do not violates restrictions and executes commands correctly. Test_ArrayCommand_ShouldHandleValidAndUnRestrictedScenarios() Tests the execution of a valid 'array' command with unrestricted scenarios. [TestMethod] public void Test_ArrayCommand_ShouldHandleValidAndUnRestrictedScenarios() Remarks The test verifies that a 'array' with valid which violates restrictions and executes commands correctly. Test_ForCommandLoops_ShouldHandleValidAndRestrictedScenarios() Tests the execution of a valid 'for' loop command with restricted scenarios. [TestMethod] public void Test_ForCommandLoops_ShouldHandleValidAndRestrictedScenarios() Remarks The test verifies that a 'for' loop with valid parameters does not violate restrictions and executes commands correctly. Test_ForCommandLoops_ShouldHandleValidAndUnRestrictedScenarios() Tests the execution of a valid 'for' loop command with unrestricted scenarios. [TestMethod] public void Test_ForCommandLoops_ShouldHandleValidAndUnRestrictedScenarios() Remarks The test verifies that a 'for' loop with valid parameters which violate restrictions and executes commands correctly. Test_IfCommand_ShouldHandleValidAndRestrictedScenarios() Tests the execution of a valid 'if' command with restricted scenarios. [TestMethod] public void Test_IfCommand_ShouldHandleValidAndRestrictedScenarios() Remarks The test verifies that a 'if' with valid which do not violates restrictions and executes commands correctly. Test_IfCommand_ShouldHandleValidAndUnRestrictedScenarios() Tests the execution of a valid 'if' command with unrestricted scenarios. [TestMethod] public void Test_IfCommand_ShouldHandleValidAndUnRestrictedScenarios() Remarks The test verifies that a 'if' with valid which violates restrictions and executes commands correctly. Test_IntCommand_ShouldHandleValidAndRestrictedScenarios() Tests the execution of a valid 'real' command with unrestricted scenarios. [TestMethod] public void Test_IntCommand_ShouldHandleValidAndRestrictedScenarios() Remarks The test verifies that a 'real' with valid which violates restrictions and executes commands correctly. Test_IntCommand_ShouldHandleValidAndUnRestrictedScenarios() Tests the execution of a valid 'int' command with unrestricted scenarios. [TestMethod] public void Test_IntCommand_ShouldHandleValidAndUnRestrictedScenarios() Remarks The test verifies that a 'int' with valid which violates restrictions and executes commands correctly. Test_MultiLineCommand_ShouldHandleValidAndUnRestrictedScenarios() Tests the execution of a valid 'multieline' command with unrestricted scenarios. [TestMethod] public void Test_MultiLineCommand_ShouldHandleValidAndUnRestrictedScenarios() Remarks The test verifies that a 'multieline' with valid which violates restrictions and executes commands correctly. Test_ProgramSizeExceddingCommand_ShouldHandleValidAndUnRestrictedScenarios() Tests the execution of a valid 'programexcedding' command with unrestricted scenarios. [TestMethod] public void Test_ProgramSizeExceddingCommand_ShouldHandleValidAndUnRestrictedScenarios() Remarks The test verifies that a 'programexcedding' with valid which violates restrictions and executes commands correctly. Test_ReaLCommandLoops_ShouldHandleValidAndRestrictedScenarios() Tests the execution of a valid 'real' command with restricted scenarios. [TestMethod] public void Test_ReaLCommandLoops_ShouldHandleValidAndRestrictedScenarios() Remarks The test verifies that a 'real' with valid which do not violates restrictions and executes commands correctly. Test_ReaLCommand_ShouldHandleValidAndUnRestrictedScenarios() Tests the execution of a valid 'array' command with unrestricted scenarios. [TestMethod] public void Test_ReaLCommand_ShouldHandleValidAndUnRestrictedScenarios() Remarks The test verifies that a 'array' with valid which violates restrictions and executes commands correctly. Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg() Tests that running a program with multiple commands does not change the global output exception message. [TestMethod] public void Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg() Examples This test runs a set of drawing commands and verifies the global configuration message: mockParser.ParseProgram(\"moveto 150,150\\r\\npencolour 0,0,255\\r\\ncircle 150\"); program.Run(); Assert.AreEqual(\"Output Message: \", GlobalConfiguration.OutputExceptionMsg); Remarks Ensures that the GlobalConfiguration.OutputExceptionMsg remains unaltered when a valid set of commands is executed. Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Tests that running a single command does not change the global output exception message. [TestMethod] public void Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Examples This test runs a single moveto command and verifies the global configuration message: mockParser.ParseProgram(\"moveto 100,100\"); program.Run(); Assert.AreEqual(\"Output Message: \", GlobalConfiguration.OutputExceptionMsg); Remarks Validates that even when a single valid command is executed, the global configuration's output exception message remains unchanged. Test_WhileCommandLoops_ShouldHandleValidAndRestrictedScenarios() Tests the execution of a valid 'while' loop command with restricted scenarios. [TestMethod] public void Test_WhileCommandLoops_ShouldHandleValidAndRestrictedScenarios() Remarks The test verifies that a 'while' loop with valid parameters does not violate restrictions and executes commands correctly. Test_WhileCommandLoops_ShouldHandleValidAndUnRestrictedScenarios() Tests the execution of a valid 'while' loop command with unrestricted scenarios. [TestMethod] public void Test_WhileCommandLoops_ShouldHandleValidAndUnRestrictedScenarios() Remarks The test verifies that a 'while' loop with valid parameters which violates restrictions and executes commands correctly."
  },
  "api/ASE_Assignment_Test.CommandsTests.AppCircleTest.html": {
    "href": "api/ASE_Assignment_Test.CommandsTests.AppCircleTest.html",
    "title": "Class AppCircleTest | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppCircleTest Namespace ASE_Assignment_Test.CommandsTests Assembly ASE_Assignment_Test.dll Unit tests for the AppCircle class to validate its functionality and behavior with various inputs. [TestClass] public class AppCircleTest Inheritance object AppCircleTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppCircle_DefaultConstructor_ShouldInitializeWithDefaultValues() Tests the default constructor of the AppCircle class to ensure it initializes correctly with default values. [TestMethod] public void AppCircle_DefaultConstructor_ShouldInitializeWithDefaultValues() Examples AppCircle defaultAppCircle = new AppCircle(); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks This test ensures no exception messages are logged when the default constructor is used. AppCircle_ParameterizedConstructor_ValidParameters_ShouldInitializeCorrectly() [TestMethod] public void AppCircle_ParameterizedConstructor_ValidParameters_ShouldInitializeCorrectly() CheckParameters_ValidRadius_ShouldNotLogError() Tests the CheckParameters method to ensure it accepts valid radius values without logging errors. [TestMethod] public void CheckParameters_ValidRadius_ShouldNotLogError() Examples string[] validParameters = { \"100\" }; appCircle.CheckParameters(validParameters); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks Validates that providing a valid positive integer radius does not log any exception messages. TestInitialize() Initializes the test environment before each test. [TestInitialize] public void TestInitialize() Remarks This method resets the global exception message, initializes a mock Canvas, and creates an instance of AppCircle with default values."
  },
  "api/ASE_Assignment_Test.CommandsTests.AppDrawToTests.html": {
    "href": "api/ASE_Assignment_Test.CommandsTests.AppDrawToTests.html",
    "title": "Class AppDrawToTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppDrawToTests Namespace ASE_Assignment_Test.CommandsTests Assembly ASE_Assignment_Test.dll Unit tests for the AppDrawTo class to validate its behavior and functionality with various inputs. [TestClass] public class AppDrawToTests Inheritance object AppDrawToTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppDrawTo_DefaultConstructor_ShouldInitializeWithDefaultValues() [TestMethod] public void AppDrawTo_DefaultConstructor_ShouldInitializeWithDefaultValues() AppDrawTo_ParameterizedConstructor_ValidParameters_ShouldInitializeCorrectly() [TestMethod] public void AppDrawTo_ParameterizedConstructor_ValidParameters_ShouldInitializeCorrectly() CheckParameters_ValidCoordinates_ShouldNotLogError() Tests the CheckParameters method with valid coordinates to ensure no error is logged. [TestMethod] public void CheckParameters_ValidCoordinates_ShouldNotLogError() Examples string[] validParameters = { \"200\", \"200\" }; appDrawTo.CheckParameters(validParameters); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks Validates that providing valid integer coordinates does not result in an error. TestInitialize() Initializes the test environment before each test. [TestInitialize] public void TestInitialize() Remarks This method resets the global exception message, initializes a mock Canvas, and creates an instance of AppDrawTo with valid coordinates."
  },
  "api/ASE_Assignment_Test.CommandsTests.AppElseTests.html": {
    "href": "api/ASE_Assignment_Test.CommandsTests.AppElseTests.html",
    "title": "Class AppElseTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppElseTests Namespace ASE_Assignment_Test.CommandsTests Assembly ASE_Assignment_Test.dll Unit test class for verifying the functionality of the AppElse class. [TestClass] public class AppElseTests Inheritance object AppElseTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class contains tests to validate the behavior and functionality of the AppElse command, which represents the \"else\" portion of conditional logic in the application's programming framework. The tests ensure that instances of the AppElse class can be created and used without restrictions, and that conditional operations behave as expected. Methods AppElse_CreateMultipleInstances_ShouldNotThrowExceptions() Tests that multiple instances of the AppElse class can be created without restrictions. [TestMethod] public void AppElse_CreateMultipleInstances_ShouldNotThrowExceptions() CheckParameters_InvalidElseParameter_ShouldThrowCommandException() Tests that invalid parameters for the \"Else\" command throw a BOOSE.CommandException. [TestMethod] [ExpectedException(typeof(CommandException))] public void CheckParameters_InvalidElseParameter_ShouldThrowCommandException() CheckParameters_ValidElseParameter_ShouldPassValidation() Tests that the \"Else\" command validates its parameters correctly. [TestMethod] public void CheckParameters_ValidElseParameter_ShouldPassValidation() TestInitialize() [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test.CommandsTests.AppIfTests.html": {
    "href": "api/ASE_Assignment_Test.CommandsTests.AppIfTests.html",
    "title": "Class AppIfTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppIfTests Namespace ASE_Assignment_Test.CommandsTests Assembly ASE_Assignment_Test.dll Unit test class for verifying the functionality of the AppIf class. [TestClass] public class AppIfTests Inheritance object AppIfTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class contains tests to validate the behavior and functionality of the AppIf command, which represents conditional logic (\"if\" statements) in the application's programming logic. The tests ensure that instances of the AppIf class can be created and executed without restrictions, and that conditional operations behave as expected. Methods AppIf_CreateMultipleInstances_ShouldNotThrowExceptions() Tests that multiple instances of the AppIf class can be created without restrictions. [TestMethod] public void AppIf_CreateMultipleInstances_ShouldNotThrowExceptions() TestInitialize() Initializes the test environment before each test method is executed. [TestInitialize] public void TestInitialize() Remarks Ensures that a new instance of the AppIf class is created for each test to maintain test isolation and ensure consistent behavior across test cases."
  },
  "api/ASE_Assignment_Test.CommandsTests.AppMoveToTests.html": {
    "href": "api/ASE_Assignment_Test.CommandsTests.AppMoveToTests.html",
    "title": "Class AppMoveToTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppMoveToTests Namespace ASE_Assignment_Test.CommandsTests Assembly ASE_Assignment_Test.dll Unit tests for the AppMoveTo class to validate its behavior and functionality with various inputs. [TestClass] public class AppMoveToTests Inheritance object AppMoveToTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppMoveTo_DefaultConstructor_ShouldInitializeWithDefaultValues() [TestMethod] public void AppMoveTo_DefaultConstructor_ShouldInitializeWithDefaultValues() AppMoveTo_ParameterizedConstructor_ValidParameters_ShouldInitializeCorrectly() [TestMethod] public void AppMoveTo_ParameterizedConstructor_ValidParameters_ShouldInitializeCorrectly() CheckParameters_IncorrectNumberOfParameters_ShouldLogCommandException() Tests the CheckParameters method with an incorrect number of parameters to ensure an error is logged. [TestMethod] public void CheckParameters_IncorrectNumberOfParameters_ShouldLogCommandException() Examples string[] invalidParameters = { \"100\" }; appMoveTo.CheckParameters(invalidParameters); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, \"Invalid number of parameters for AppMoveTo.\"); Remarks Validates that providing fewer or more parameters than expected results in an appropriate error message. CheckParameters_ValidCoordinates_ShouldNotLogError() Tests the CheckParameters method with valid coordinates to ensure no error is logged. [TestMethod] public void CheckParameters_ValidCoordinates_ShouldNotLogError() Examples string[] validParameters = { \"200\", \"200\" }; appMoveTo.CheckParameters(validParameters); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks Validates that providing valid integer coordinates does not result in an error message. TestInitialize() Initializes the test environment before each test. [TestInitialize] public void TestInitialize() Remarks This method resets the global exception message, initializes a mock Canvas, and creates an instance of AppMoveTo with valid default coordinates."
  },
  "api/ASE_Assignment_Test.CommandsTests.AppPenColourTests.html": {
    "href": "api/ASE_Assignment_Test.CommandsTests.AppPenColourTests.html",
    "title": "Class AppPenColourTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppPenColourTests Namespace ASE_Assignment_Test.CommandsTests Assembly ASE_Assignment_Test.dll Unit tests for the AppPenColour class to validate its behavior and functionality with various inputs. [TestClass] public class AppPenColourTests Inheritance object AppPenColourTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppPenColour_DefaultConstructor_ShouldInitializeWithDefaultValues() [TestMethod] public void AppPenColour_DefaultConstructor_ShouldInitializeWithDefaultValues() AppPenColour_ParameterizedConstructor_ValidParameters_ShouldInitializeCorrectly() [TestMethod] public void AppPenColour_ParameterizedConstructor_ValidParameters_ShouldInitializeCorrectly() CheckParameters_IncorrectNumberOfParameters_ShouldLogCommandException() Tests the CheckParameters method with an incorrect number of parameters to ensure an error is logged. [TestMethod] public void CheckParameters_IncorrectNumberOfParameters_ShouldLogCommandException() Examples string[] invalidParameters = { \"100\", \"100\" }; appPenColour.CheckParameters(invalidParameters); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, \"Invalid number of parameters for AppPenColour.\"); Remarks Validates that providing fewer or more parameters than expected results in an appropriate error message. CheckParameters_ValidRGBValues_ShouldNotLogError() Tests the CheckParameters method with valid RGB values to ensure no error is logged. [TestMethod] public void CheckParameters_ValidRGBValues_ShouldNotLogError() Examples string[] validParameters = { \"200\", \"200\", \"200\" }; appPenColour.CheckParameters(validParameters); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks Validates that providing valid integer RGB values does not result in an error. TestInitialize() Initializes the test environment before each test. [TestInitialize] public void TestInitialize() Remarks This method resets the global exception message, initializes a mock Canvas, and creates an instance of AppPenColour with valid default RGB values."
  },
  "api/ASE_Assignment_Test.CommandsTests.AppRectangleTests.html": {
    "href": "api/ASE_Assignment_Test.CommandsTests.AppRectangleTests.html",
    "title": "Class AppRectangleTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppRectangleTests Namespace ASE_Assignment_Test.CommandsTests Assembly ASE_Assignment_Test.dll Unit tests for the AppRectangle class to validate its behavior and functionality with various inputs. [TestClass] public class AppRectangleTests Inheritance object AppRectangleTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppRectangle_DefaultConstructor_ShouldInitializeWithDefaultValues() [TestMethod] public void AppRectangle_DefaultConstructor_ShouldInitializeWithDefaultValues() AppRectangle_ParameterizedConstructor_ValidParameters_ShouldInitializeCorrectly() [TestMethod] public void AppRectangle_ParameterizedConstructor_ValidParameters_ShouldInitializeCorrectly() CheckParameters_IncorrectNumberOfParameters_ShouldLogCommandException() Tests the CheckParameters method with an incorrect number of parameters to ensure an error is logged. [TestMethod] public void CheckParameters_IncorrectNumberOfParameters_ShouldLogCommandException() Examples string[] invalidParameters = { \"100\" }; appRectangle.CheckParameters(invalidParameters); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, \"Invalid number of parameters for AppRectangle.\"); Remarks Validates that providing fewer or more parameters than expected results in an appropriate error message. CheckParameters_ValidDimensions_ShouldNotLogError() Tests the CheckParameters method with valid dimensions to ensure no error is logged. [TestMethod] public void CheckParameters_ValidDimensions_ShouldNotLogError() Examples string[] validParameters = { \"200\", \"200\" }; appRectangle.CheckParameters(validParameters); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks Validates that providing valid integer dimensions does not result in an error message. TestInitialize() Initializes the test environment before each test. [TestInitialize] public void TestInitialize() Remarks This method resets the global exception message, initializes a mock Canvas, and creates an instance of AppRectangle with valid default dimensions."
  },
  "api/ASE_Assignment_Test.CommandsTests.AppWhileTests.html": {
    "href": "api/ASE_Assignment_Test.CommandsTests.AppWhileTests.html",
    "title": "Class AppWhileTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppWhileTests Namespace ASE_Assignment_Test.CommandsTests Assembly ASE_Assignment_Test.dll Unit test class for verifying the functionality of the AppWhile class. [TestClass] public class AppWhileTests Inheritance object AppWhileTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class contains tests to validate the behavior of the AppWhile command, which represents a \"while\" loop in the application's programming logic. The tests ensure that instances of the AppWhile class can be created and used correctly, without restrictions or unexpected errors. Methods AppWhile_CreateMultipleInstances_ShouldNotThrowExceptions() Tests that multiple instances of the AppWhile class can be created without restrictions. [TestMethod] public void AppWhile_CreateMultipleInstances_ShouldNotThrowExceptions()"
  },
  "api/ASE_Assignment_Test.CommandsTests.ClearTests.html": {
    "href": "api/ASE_Assignment_Test.CommandsTests.ClearTests.html",
    "title": "Class ClearTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class ClearTests Namespace ASE_Assignment_Test.CommandsTests Assembly ASE_Assignment_Test.dll Unit tests for the Clear command to validate its behavior and exception handling. [TestClass] public class ClearTests Inheritance object ClearTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Clear_Execute_WhenCanvasClearThrows_ShouldPropagateException() Tests that the Clear command propagates a CanvasException when the canvas throws one during the clear operation. [TestMethod] [ExpectedException(typeof(CanvasException))] public void Clear_Execute_WhenCanvasClearThrows_ShouldPropagateException() Examples mockCanvas.Setup(c => c.Clear()).Throws(new CanvasException(\"Unable to clear the canvas.\")); clearCommand.Execute(); // Should throw CanvasException Remarks Validates that any exceptions thrown by the canvas are correctly propagated by the Clear command. Clear_Execute_WhenCanvasClearThrows_ShouldPropagateException_Alternative() [TestMethod] public void Clear_Execute_WhenCanvasClearThrows_ShouldPropagateException_Alternative() TestInitialize() Initializes the test environment before each test. [TestInitialize] public void TestInitialize() Remarks This method sets up a mock Canvas and initializes the Clear command for testing."
  },
  "api/ASE_Assignment_Test.CommandsTests.FillTests.html": {
    "href": "api/ASE_Assignment_Test.CommandsTests.FillTests.html",
    "title": "Class FillTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class FillTests Namespace ASE_Assignment_Test.CommandsTests Assembly ASE_Assignment_Test.dll Unit tests for the Fill command to validate its behavior, parameter validation, and exception handling. [TestClass] public class FillTests Inheritance object FillTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_WithEmptyString_ShouldLogCommandException() Tests the CheckParameters method with an empty string parameter to ensure a Command Exception is logged. [TestMethod] public void CheckParameters_WithEmptyString_ShouldLogCommandException() Examples string[] invalidParameters = { \"\" }; fillCommand.CheckParameters(invalidParameters); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, \"Text parameter cannot be null.\"); Remarks Validates that empty string input is handled gracefully with an appropriate error message. CheckParameters_WithIncorrectNumberOfParameters_ShouldLogCommandException() Tests the CheckParameters method with an incorrect number of parameters to ensure a Command Exception is logged. [TestMethod] public void CheckParameters_WithIncorrectNumberOfParameters_ShouldLogCommandException() Examples string[] invalidParameters = { \"true\", \"false\" }; fillCommand.CheckParameters(invalidParameters); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, \"Invalid number of parameters.\"); Remarks Validates that providing more than one parameter results in an appropriate error message. CheckParameters_WithNullParameter_ShouldLogCommandException() Tests the CheckParameters method with a null parameter to ensure a Command Exception is logged. [TestMethod] public void CheckParameters_WithNullParameter_ShouldLogCommandException() Examples string[] invalidParameters = { null }; fillCommand.CheckParameters(invalidParameters); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, \"Text parameter cannot be null.\"); Remarks Validates that null input is handled gracefully with an appropriate error message. CheckParameters_WithValidFalse_ShouldNotLogError() Tests the CheckParameters method with a valid \"false\" parameter to ensure no error is logged. [TestMethod] public void CheckParameters_WithValidFalse_ShouldNotLogError() Examples string[] validParameters = { \"false\" }; fillCommand.CheckParameters(validParameters); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks Validates that the Fill command correctly processes the \"false\" parameter without errors. CheckParameters_WithValidTrue_ShouldNotLogError() Tests the CheckParameters method with a valid \"true\" parameter to ensure no error is logged. [TestMethod] public void CheckParameters_WithValidTrue_ShouldNotLogError() Examples string[] validParameters = { \"true\" }; fillCommand.CheckParameters(validParameters); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks Validates that the Fill command correctly processes the \"true\" parameter without errors. CheckParameters_WithWhitespaceString_ShouldLogCommandException() Tests the CheckParameters method with a whitespace string parameter to ensure a Command Exception is logged. [TestMethod] public void CheckParameters_WithWhitespaceString_ShouldLogCommandException() Examples string[] invalidParameters = { \" \" }; fillCommand.CheckParameters(invalidParameters); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, \"Text parameter cannot be null.\"); Remarks Validates that whitespace input is handled gracefully with an appropriate error message. Fill_ParameterizedConstructor_WithNullText_ShouldThrowArgumentNullException() Tests the parameterized constructor of the Fill command to ensure it throws an ArgumentNullException when initialized with a null parameter. [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void Fill_ParameterizedConstructor_WithNullText_ShouldThrowArgumentNullException() Examples string nullText = null; Fill paramFillCommand = new Fill(mockCanvas.Object, nullText); // Should throw ArgumentNullException Remarks This test ensures that the Fill command correctly handles null input during construction. TestInitialize() Initializes the test environment before each test. [TestInitialize] public void TestInitialize() Remarks This method resets the global exception message, initializes a mock Canvas, and creates an instance of the Fill command with valid default parameters."
  },
  "api/ASE_Assignment_Test.CommandsTests.PenSizeTests.html": {
    "href": "api/ASE_Assignment_Test.CommandsTests.PenSizeTests.html",
    "title": "Class PenSizeTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class PenSizeTests Namespace ASE_Assignment_Test.CommandsTests Assembly ASE_Assignment_Test.dll Unit tests for the PenSize command to validate its behavior and parameter validation. [TestClass] public class PenSizeTests Inheritance object PenSizeTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_WithNoParameters_ShouldLogCommandException() Tests the CheckParameters method with no parameters to ensure a Command Exception is logged. [TestMethod] public void CheckParameters_WithNoParameters_ShouldLogCommandException() Examples string[] invalidParameters = { }; penSizeCommand.CheckParameters(invalidParameters); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, \"Invalid number of parameters for the Pensize command.\"); Remarks Validates that omitting the required parameter results in an appropriate error message. CheckParameters_WithTooManyParameters_ShouldLogCommandException() Tests the CheckParameters method with too many parameters to ensure a Command Exception is logged. [TestMethod] public void CheckParameters_WithTooManyParameters_ShouldLogCommandException() Examples string[] invalidParameters = { \"30\", \"40\" }; penSizeCommand.CheckParameters(invalidParameters); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, \"Invalid number of parameters for the Pensize command.\"); Remarks Validates that providing more than one parameter results in an appropriate error message. CheckParameters_WithValidParameter_ShouldNotLogError() Tests the CheckParameters method with a valid parameter to ensure no error is logged. [TestMethod] public void CheckParameters_WithValidParameter_ShouldNotLogError() Examples string[] validParameters = { \"30\" }; penSizeCommand.CheckParameters(validParameters); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks Validates that providing a valid positive integer value does not result in an error message. TestInitialize() Initializes the test environment before each test. [TestInitialize] public void TestInitialize() Remarks This method resets the global exception message and pen size, and initializes the PenSize command for testing."
  },
  "api/ASE_Assignment_Test.CommandsTests.ResetTests.html": {
    "href": "api/ASE_Assignment_Test.CommandsTests.ResetTests.html",
    "title": "Class ResetTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class ResetTests Namespace ASE_Assignment_Test.CommandsTests Assembly ASE_Assignment_Test.dll Unit tests for the Reset command to validate its behavior and exception handling. [TestClass] public class ResetTests Inheritance object ResetTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Reset_Execute_ShouldCallCanvasReset() Tests that the Execute method calls the Canvas.Reset() method exactly once. [TestMethod] public void Reset_Execute_ShouldCallCanvasReset() Examples resetCommand.Execute(); mockCanvas.Verify(c => c.Reset(), Times.Once); Remarks Verifies that the Reset command interacts correctly with the canvas to perform a reset operation. Reset_Execute_WhenCanvasResetThrows_ShouldPropagateException() Tests that the Execute method propagates exceptions thrown by the Canvas.Reset() method. [TestMethod] [ExpectedException(typeof(CanvasException))] public void Reset_Execute_WhenCanvasResetThrows_ShouldPropagateException() Examples mockCanvas.Setup(c => c.Reset()).Throws(new CanvasException(\"Unable to reset the canvas.\")); resetCommand.Execute(); // Should throw CanvasException Remarks Verifies that any exception thrown during the canvas reset operation is correctly propagated by the Reset command. Reset_Execute_WhenCanvasResetThrows_ShouldPropagateException_Alternative() [TestMethod] public void Reset_Execute_WhenCanvasResetThrows_ShouldPropagateException_Alternative() Reset_Execute_WithNullCanvas_ShouldNotCallCanvasReset() [TestMethod] public void Reset_Execute_WithNullCanvas_ShouldNotCallCanvasReset() TestInitialize() Initializes the test environment before each test. [TestInitialize] public void TestInitialize() Remarks This method initializes a mock Canvas and sets up the Reset command for testing."
  },
  "api/ASE_Assignment_Test.CommandsTests.TriangleTests.html": {
    "href": "api/ASE_Assignment_Test.CommandsTests.TriangleTests.html",
    "title": "Class TriangleTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class TriangleTests Namespace ASE_Assignment_Test.CommandsTests Assembly ASE_Assignment_Test.dll Unit tests for the Triangle command to validate its behavior, parameter validation, and default initialization. [TestClass] public class TriangleTests Inheritance object TriangleTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_IncorrectNumberOfParameters_ShouldLogCommandException() Tests the CheckParameters method with an incorrect number of parameters to ensure a Command Exception is logged. [TestMethod] public void CheckParameters_IncorrectNumberOfParameters_ShouldLogCommandException() Examples string[] invalidParameters = { \"100\" }; triangle = new Triangle(); triangle.CheckParameters(invalidParameters); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, \"Invalid number of parameters.\"); Remarks Validates that providing fewer parameters than required results in an appropriate error message. CheckParameters_ValidDimensions_ShouldNotLogError() Tests the CheckParameters method with valid dimensions to ensure no error is logged. [TestMethod] public void CheckParameters_ValidDimensions_ShouldNotLogError() Examples string[] validParameters = { \"100\", \"200\" }; triangle = new Triangle(); triangle.CheckParameters(validParameters); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks Validates that providing valid positive integer values for base length and height does not result in an error message. TestInitialize() Initializes the test environment before each test. [TestInitialize] public void TestInitialize() Remarks This method resets the global exception message and initializes a mock Canvas. Triangle_DefaultConstructor_ShouldInitializeWithDefaultValues() [TestMethod] public void Triangle_DefaultConstructor_ShouldInitializeWithDefaultValues() Triangle_ParameterizedConstructor_ValidParameters_ShouldInitializeCorrectly() [TestMethod] public void Triangle_ParameterizedConstructor_ValidParameters_ShouldInitializeCorrectly()"
  },
  "api/ASE_Assignment_Test.CommandsTests.WriteToTests.html": {
    "href": "api/ASE_Assignment_Test.CommandsTests.WriteToTests.html",
    "title": "Class WriteToTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class WriteToTests Namespace ASE_Assignment_Test.CommandsTests Assembly ASE_Assignment_Test.dll Unit tests for the WriteTo command to validate its behavior, parameter validation, and exception handling. [TestClass] public class WriteToTests Inheritance object WriteToTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_IncorrectNumberOfParameters_ShouldLogCommandException() Tests the CheckParameters method with an incorrect number of parameters to ensure a Command Exception is logged. [TestMethod] public void CheckParameters_IncorrectNumberOfParameters_ShouldLogCommandException() Examples string[] invalidParameters = { \"Text\", \"Extra Parameter\" }; writeTo.CheckParameters(invalidParameters); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, \"Command Exception\"); Remarks Validates that providing more than one parameter results in an appropriate error message. CheckParameters_NullOrEmptyText_ShouldLogCommandException() Tests the CheckParameters method with null or empty text to ensure a Command Exception is logged. [TestMethod] public void CheckParameters_NullOrEmptyText_ShouldLogCommandException() Examples string[] invalidParameters = { \"\" }; writeTo.CheckParameters(invalidParameters); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, \"Command Exception\"); Remarks Validates that providing null or empty text results in an appropriate error message. CheckParameters_ValidText_ShouldNotLogError() Tests the CheckParameters method with valid text to ensure no error is logged. [TestMethod] public void CheckParameters_ValidText_ShouldNotLogError() Examples string[] validParameters = { \"This is valid text.\" }; writeTo.CheckParameters(validParameters); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks Validates that providing valid text does not result in an error message. TestInitialize() Initializes the test environment before each test. [TestInitialize] public void TestInitialize() Remarks This method resets the global exception message and initializes a mock Canvas. WriteTo_DefaultConstructor_ShouldInitializeWithDefaultValues() [TestMethod] public void WriteTo_DefaultConstructor_ShouldInitializeWithDefaultValues() WriteTo_ParameterizedConstructor_ValidParameters_ShouldInitializeCorrectly() [TestMethod] public void WriteTo_ParameterizedConstructor_ValidParameters_ShouldInitializeCorrectly()"
  },
  "api/ASE_Assignment_Test.CommandsTests.html": {
    "href": "api/ASE_Assignment_Test.CommandsTests.html",
    "title": "Namespace ASE_Assignment_Test.CommandsTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Namespace ASE_Assignment_Test.CommandsTests Classes AppCircleTest Unit tests for the AppCircle class to validate its functionality and behavior with various inputs. AppDrawToTests Unit tests for the AppDrawTo class to validate its behavior and functionality with various inputs. AppElseTests Unit test class for verifying the functionality of the AppElse class. AppIfTests Unit test class for verifying the functionality of the AppIf class. AppMoveToTests Unit tests for the AppMoveTo class to validate its behavior and functionality with various inputs. AppPenColourTests Unit tests for the AppPenColour class to validate its behavior and functionality with various inputs. AppRectangleTests Unit tests for the AppRectangle class to validate its behavior and functionality with various inputs. AppWhileTests Unit test class for verifying the functionality of the AppWhile class. ClearTests Unit tests for the Clear command to validate its behavior and exception handling. FillTests Unit tests for the Fill command to validate its behavior, parameter validation, and exception handling. PenSizeTests Unit tests for the PenSize command to validate its behavior and parameter validation. ResetTests Unit tests for the Reset command to validate its behavior and exception handling. TriangleTests Unit tests for the Triangle command to validate its behavior, parameter validation, and default initialization. WriteToTests Unit tests for the WriteTo command to validate its behavior, parameter validation, and exception handling."
  },
  "api/ASE_Assignment_Test.Components_Tests.AppArrayTests.html": {
    "href": "api/ASE_Assignment_Test.Components_Tests.AppArrayTests.html",
    "title": "Class AppArrayTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppArrayTests Namespace ASE_Assignment_Test.Components_Tests Assembly ASE_Assignment_Test.dll Unit test class for verifying the functionality and behavior of the AppArray class. [TestClass] public class AppArrayTests Inheritance object AppArrayTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class contains tests to validate the handling and operations of arrays within the application. It ensures that array-related functionality such as creation, modification, and retrieval works as expected under various scenarios, including boundary and error conditions. Methods TestInitialize() Initializes the test environment before each test method is executed. [TestInitialize] public void TestInitialize() Remarks Ensures that a new instance of AppArray is created for each test to maintain test isolation and ensure consistent behavior across different test cases."
  },
  "api/ASE_Assignment_Test.Components_Tests.AppBooleanTests.html": {
    "href": "api/ASE_Assignment_Test.Components_Tests.AppBooleanTests.html",
    "title": "Class AppBooleanTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppBooleanTests Namespace ASE_Assignment_Test.Components_Tests Assembly ASE_Assignment_Test.dll Unit test class for verifying the functionality and behavior of boolean-related operations within the application. [TestClass] public class AppBooleanTests Inheritance object AppBooleanTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class contains tests to validate the handling, parsing, and execution of boolean commands in the application's stored programs. It ensures that boolean operations such as conditions and logical expressions are evaluated correctly under various scenarios, including restricted and unrestricted cases. Methods AppBoolean_CreateLargeNumberOfInstances_ShouldNotThrowExceptions() Tests that creating a large number of AppBoolean instances does not cause errors or restrictions. [TestMethod] public void AppBoolean_CreateLargeNumberOfInstances_ShouldNotThrowExceptions() AppBoolean_CreateMultipleInstances_ShouldNotThrowExceptions() Tests that multiple instances of the AppBoolean class can be created without restrictions. [TestMethod] public void AppBoolean_CreateMultipleInstances_ShouldNotThrowExceptions() AppBoolean_RestrictionsMethod_ShouldNotThrowExceptions() Tests the Restrictions() method to ensure it does not throw any exceptions. [TestMethod] public void AppBoolean_RestrictionsMethod_ShouldNotThrowExceptions()"
  },
  "api/ASE_Assignment_Test.Components_Tests.AppCommandFactoryTests.html": {
    "href": "api/ASE_Assignment_Test.Components_Tests.AppCommandFactoryTests.html",
    "title": "Class AppCommandFactoryTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppCommandFactoryTests Namespace ASE_Assignment_Test.Components_Tests Assembly ASE_Assignment_Test.dll Unit tests for the AppCommandFactory class to verify that it correctly creates instances of command objects based on input strings. [TestClass] public class AppCommandFactoryTests Inheritance object AppCommandFactoryTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Initializes the AppCommandFactory instance before each test. [TestInitialize] public void SetUp() TestMakeCommand_Circle_ShouldReturnAppCircle() Tests the MakeCommand method to ensure it returns an AppCircle object for the \"circle\" command. [TestMethod] public void TestMakeCommand_Circle_ShouldReturnAppCircle() Examples string command = \"circle\"; ICommand result = factory.MakeCommand(command); Assert.IsInstanceOfType(result, typeof(AppCircle)); Remarks This test verifies that the factory creates the correct command object for drawing a circle. TestMakeCommand_Clear_ShouldReturnClear() Tests the MakeCommand method to ensure it returns a Clear object for the \"clear\" command. [TestMethod] public void TestMakeCommand_Clear_ShouldReturnClear() Examples string command = \"clear\"; ICommand result = factory.MakeCommand(command); Assert.IsInstanceOfType(result, typeof(Clear)); Remarks This test verifies that the factory creates the correct command object for clearing the canvas. TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() Tests the MakeCommand method to ensure it returns an AppDrawTo object for the \"drawto\" command. [TestMethod] public void TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() Examples string command = \"drawto\"; ICommand result = factory.MakeCommand(command); Assert.IsInstanceOfType(result, typeof(AppDrawTo)); Remarks This test verifies that the factory creates the correct command object for drawing to a specific position. TestMakeCommand_Fill_ShouldReturnFill() Tests the MakeCommand method to ensure it returns a Fill object for the \"fill\" command. [TestMethod] public void TestMakeCommand_Fill_ShouldReturnFill() Examples string command = \"fill\"; ICommand result = factory.MakeCommand(command); Assert.IsInstanceOfType(result, typeof(Fill)); Remarks This test verifies that the factory creates the correct command object for enabling or disabling fill. TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() Tests the MakeCommand method to ensure it throws a FactoryException for an invalid command. [TestMethod] [ExpectedException(typeof(FactoryException))] public void TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() Examples string command = \"invalidcommand\"; factory.MakeCommand(command); // Should throw FactoryException Remarks This test validates that the factory handles unknown commands by throwing a FactoryException. TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() Tests the MakeCommand method to ensure it returns an AppMoveTo object for the \"moveto\" command. [TestMethod] public void TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() Examples string command = \"moveto\"; ICommand result = factory.MakeCommand(command); Assert.IsInstanceOfType(result, typeof(AppMoveTo)); Remarks This test verifies that the factory creates the correct command object for moving to a specific position. TestMakeCommand_PenColour_ShouldReturnAppPenColour() Tests the MakeCommand method to ensure it returns an AppPenColour object for the \"pencolour\" command. [TestMethod] public void TestMakeCommand_PenColour_ShouldReturnAppPenColour() Examples string command = \"pencolour\"; ICommand result = factory.MakeCommand(command); Assert.IsInstanceOfType(result, typeof(AppPenColour)); Remarks This test verifies that the factory creates the correct command object for setting the pen color. TestMakeCommand_PenSize_ShouldReturnPenSize() Tests the MakeCommand method to ensure it returns a PenSize object for the \"pensize\" command. [TestMethod] public void TestMakeCommand_PenSize_ShouldReturnPenSize() Examples string command = \"pensize\"; ICommand result = factory.MakeCommand(command); Assert.IsInstanceOfType(result, typeof(PenSize)); Remarks This test verifies that the factory creates the correct command object for setting the pen size. TestMakeCommand_Rect_ShouldReturnAppRectangle() Tests the MakeCommand method to ensure it returns an AppRectangle object for the \"rect\" command. [TestMethod] public void TestMakeCommand_Rect_ShouldReturnAppRectangle() Examples string command = \"rect\"; ICommand result = factory.MakeCommand(command); Assert.IsInstanceOfType(result, typeof(AppRectangle)); Remarks This test verifies that the factory creates the correct command object for drawing a rectangle. TestMakeCommand_Reset_ShouldReturnReset() Tests the MakeCommand method to ensure it returns a Reset object for the \"reset\" command. [TestMethod] public void TestMakeCommand_Reset_ShouldReturnReset() Examples string command = \"reset\"; ICommand result = factory.MakeCommand(command); Assert.IsInstanceOfType(result, typeof(Reset)); Remarks This test verifies that the factory creates the correct command object for resetting the canvas. TestMakeCommand_Tri_ShouldReturnTriangle() Tests the MakeCommand method to ensure it returns a Triangle object for the \"tri\" command. [TestMethod] public void TestMakeCommand_Tri_ShouldReturnTriangle() Examples string command = \"tri\"; ICommand result = factory.MakeCommand(command); Assert.IsInstanceOfType(result, typeof(Triangle)); Remarks This test verifies that the factory creates the correct command object for drawing a triangle. TestMakeCommand_WriteTo_ShouldReturnWriteTo() Tests the MakeCommand method to ensure it returns a WriteTo object for the \"writeto\" command. [TestMethod] public void TestMakeCommand_WriteTo_ShouldReturnWriteTo() Examples string command = \"writeto\"; ICommand result = factory.MakeCommand(command); Assert.IsInstanceOfType(result, typeof(WriteTo)); Remarks This test verifies that the factory creates the correct command object for writing text."
  },
  "api/ASE_Assignment_Test.Components_Tests.AppCompoundCommandTests.html": {
    "href": "api/ASE_Assignment_Test.Components_Tests.AppCompoundCommandTests.html",
    "title": "Class AppCompoundCommandTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppCompoundCommandTests Namespace ASE_Assignment_Test.Components_Tests Assembly ASE_Assignment_Test.dll Unit test class for verifying the functionality of the AppCompoundCommand class. [TestClass] public class AppCompoundCommandTests Inheritance object AppCompoundCommandTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class contains tests to ensure that the AppCompoundCommand handles compound commands correctly, allowing multiple commands to be grouped and executed as a single entity. The tests validate the creation, parsing, and execution of compound commands under various scenarios. Methods AppCompoundCommand_CreateMultipleInstances_ShouldNotThrowExceptions() Tests that multiple instances of the AppCompoundCommand class can be created without restrictions. [TestMethod] public void AppCompoundCommand_CreateMultipleInstances_ShouldNotThrowExceptions() CheckParameters_InvalidParameterContent_ShouldThrowCommandException() Tests the CheckParameters method with an invalid parameter content. [TestMethod] [ExpectedException(typeof(CommandException))] public void CheckParameters_InvalidParameterContent_ShouldThrowCommandException() CheckParameters_InvalidParameterCount_ShouldThrowCommandException() Tests the CheckParameters method with an invalid number of parameters. [TestMethod] [ExpectedException(typeof(CommandException))] public void CheckParameters_InvalidParameterCount_ShouldThrowCommandException() CheckParameters_ValidIfEndParameter_ShouldPassWithoutException() Tests the CheckParameters method with a valid \"ifEnd\" parameter. [TestMethod] public void CheckParameters_ValidIfEndParameter_ShouldPassWithoutException() Compile_ShouldCallBaseCompileMethod() Tests the Compile method to ensure it calls the base class implementation. [TestMethod] public void Compile_ShouldCallBaseCompileMethod() CorrespondingCommand_SetAndGet_ShouldWorkCorrectly() Tests that the CorrespondingCommand property can be set and retrieved correctly. [TestMethod] public void CorrespondingCommand_SetAndGet_ShouldWorkCorrectly() TestInitialize() Initializes the test environment before each test method is executed. [TestInitialize] public void TestInitialize() Remarks Ensures that a new instance of AppCompoundCommand is created for each test to maintain test isolation and consistency."
  },
  "api/ASE_Assignment_Test.Components_Tests.AppConditionalCommandTests.html": {
    "href": "api/ASE_Assignment_Test.Components_Tests.AppConditionalCommandTests.html",
    "title": "Class AppConditionalCommandTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppConditionalCommandTests Namespace ASE_Assignment_Test.Components_Tests Assembly ASE_Assignment_Test.dll Provides unit tests for the AppConditionalCommand class. [TestClass] public class AppConditionalCommandTests Inheritance object AppConditionalCommandTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This test class validates the functionality of the AppConditionalCommand class, including resetting and decreasing private static fields using reflection, and executing conditional commands with overridden behavior. Methods ResetOrDecreaseCount_ValidValue_ShouldUpdateField() Tests that the private static field 꿁 in the BOOSE.Boolean class can be reset or decreased successfully. [TestMethod] public void ResetOrDecreaseCount_ValidValue_ShouldUpdateField() TestInitialize() Initializes the test environment before each test case. [TestInitialize] public void TestInitialize() Remarks This method creates a new instance of the AppConditionalCommand class to ensure each test has a fresh and isolated environment."
  },
  "api/ASE_Assignment_Test.Components_Tests.AppEndTests.html": {
    "href": "api/ASE_Assignment_Test.Components_Tests.AppEndTests.html",
    "title": "Class AppEndTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppEndTests Namespace ASE_Assignment_Test.Components_Tests Assembly ASE_Assignment_Test.dll Unit test class for verifying the functionality of the AppEnd command. [TestClass] public class AppEndTests Inheritance object AppEndTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class contains tests to ensure the correct behavior of the AppEnd command, which is responsible for handling the termination of commands or loops within a stored program. It validates the integration of AppEnd with the StoredProgram and Canvas. Methods Compile_IfControlFlow_ShouldSetEndLineNumber() Tests the Compile method for an \"if\" control flow block. [TestMethod] public void Compile_IfControlFlow_ShouldSetEndLineNumber() Compile_InvalidControlFlow_ShouldThrowCommandException() Tests the Compile method for a mismatched control flow block. [TestMethod] [ExpectedException(typeof(CommandException))] public void Compile_InvalidControlFlow_ShouldThrowCommandException() Execute_Method_ShouldReturnToReturnLineNumber() Tests the Execute method for a method block. [TestMethod] public void Execute_Method_ShouldReturnToReturnLineNumber() Execute_WhileLoop_ShouldJumpToStartOfLoop() Tests the Execute method for a \"while\" loop control flow. [TestMethod] public void Execute_WhileLoop_ShouldJumpToStartOfLoop() TestInitialize() Initializes the test environment before each test method is run. [TestInitialize] public void TestInitialize() Remarks Sets up a new instance of the StoredProgram and initializes the AppEnd command to ensure consistent and isolated test scenarios."
  },
  "api/ASE_Assignment_Test.Components_Tests.AppForTests.html": {
    "href": "api/ASE_Assignment_Test.Components_Tests.AppForTests.html",
    "title": "Class AppForTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppForTests Namespace ASE_Assignment_Test.Components_Tests Assembly ASE_Assignment_Test.dll Provides unit tests for the AppFor class. [TestClass] public class AppForTests Inheritance object AppForTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This test class validates the functionality of the AppFor class, including its ability to reset and decrease private static fields in the BOOSE.Boolean class and the overridden execution logic. Methods ResetOrDecreaseCount_ValidValue_ShouldUpdateField() Tests that the private static field 꿁 in the BOOSE.Boolean class can be reset or decreased successfully. [TestMethod] public void ResetOrDecreaseCount_ValidValue_ShouldUpdateField() TestInitialize() Initializes the test environment before each test case. [TestInitialize] public void TestInitialize() Remarks This method creates a new instance of the AppFor class to ensure each test has a fresh and isolated environment."
  },
  "api/ASE_Assignment_Test.Components_Tests.AppIntTests.html": {
    "href": "api/ASE_Assignment_Test.Components_Tests.AppIntTests.html",
    "title": "Class AppIntTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppIntTests Namespace ASE_Assignment_Test.Components_Tests Assembly ASE_Assignment_Test.dll Unit test class for verifying the functionality and behavior of integer-related operations within the application. [TestClass] public class AppIntTests Inheritance object AppIntTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class contains tests to validate the handling, parsing, and execution of integer commands in the application's stored programs. It ensures that integer operations are performed as expected under various scenarios, including restricted and unrestricted cases. Methods AppInt_CreateLargeNumberOfInstances_ShouldNotThrowExceptions() Tests that creating a large number of AppInt instances does not cause errors or restrictions. [TestMethod] public void AppInt_CreateLargeNumberOfInstances_ShouldNotThrowExceptions() AppInt_CreateMultipleInstances_ShouldNotThrowExceptions() Tests that multiple instances of the AppInt class can be created without restrictions. [TestMethod] public void AppInt_CreateMultipleInstances_ShouldNotThrowExceptions() AppInt_RestrictionsMethod_ShouldNotThrowExceptions() Tests the Restrictions() method to ensure it does not throw any exceptions. [TestMethod] public void AppInt_RestrictionsMethod_ShouldNotThrowExceptions() AppInt_SetAndGetValue_ShouldHandleIntegerValues() Tests the functionality of setting and getting the value of an AppInt instance. [TestMethod] public void AppInt_SetAndGetValue_ShouldHandleIntegerValues() AppInt_ShouldInheritBaseIntFunctionality() Tests that the AppInt class inherits and correctly implements functionality from the base Int class. [TestMethod] public void AppInt_ShouldInheritBaseIntFunctionality()"
  },
  "api/ASE_Assignment_Test.Components_Tests.AppMethodTests.html": {
    "href": "api/ASE_Assignment_Test.Components_Tests.AppMethodTests.html",
    "title": "Class AppMethodTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppMethodTests Namespace ASE_Assignment_Test.Components_Tests Assembly ASE_Assignment_Test.dll Provides unit tests for the AppMethod class. [TestClass] public class AppMethodTests Inheritance object AppMethodTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This test class validates the functionality of the AppMethod class, including its ability to override restrictions on method counts and manipulate private static fields using reflection. Methods AppMethod_OverrideRestrictions_ShouldSucceed() Tests that the restriction logic for methods is overridden successfully. [TestMethod] public void AppMethod_OverrideRestrictions_ShouldSucceed() ResetOrDecreaseMethodCount_ValidValue_ShouldUpdateField() Tests that the private static field 꿒 in the Method class can be reset or decreased. [TestMethod] public void ResetOrDecreaseMethodCount_ValidValue_ShouldUpdateField() TestInitialize() Initializes the test environment before each test case. [TestInitialize] public void TestInitialize() Remarks This method creates a new instance of the AppMethod class to ensure each test has a fresh and isolated environment."
  },
  "api/ASE_Assignment_Test.Components_Tests.AppPeekTests.html": {
    "href": "api/ASE_Assignment_Test.Components_Tests.AppPeekTests.html",
    "title": "Class AppPeekTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppPeekTests Namespace ASE_Assignment_Test.Components_Tests Assembly ASE_Assignment_Test.dll Provides unit tests for the AppPeek class. [TestClass] public class AppPeekTests Inheritance object AppPeekTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This test class validates the functionality of the AppPeek class, including parameter validation, compilation, and execution of the \"Peek\" command. Methods CheckParameters_ShouldThrowNotImplementedException() Tests that the \"Peek\" command throws a NotImplementedException when parameter validation is called. [TestMethod] [ExpectedException(typeof(NotImplementedException))] public void CheckParameters_ShouldThrowNotImplementedException() TestInitialize() Initializes the test environment before each test case. [TestInitialize] public void TestInitialize() Remarks This method creates a new instance of the AppPeek class and a mock program to ensure a clean test environment."
  },
  "api/ASE_Assignment_Test.Components_Tests.AppPokeTests.html": {
    "href": "api/ASE_Assignment_Test.Components_Tests.AppPokeTests.html",
    "title": "Class AppPokeTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppPokeTests Namespace ASE_Assignment_Test.Components_Tests Assembly ASE_Assignment_Test.dll Unit test class for testing the functionality of the AppPoke command. [TestClass] public class AppPokeTests Inheritance object AppPokeTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This test class verifies the behavior and functionality of the AppPoke command in the context of the AppStoredProgram and MyAppCanvas. Methods Execute_NonExistentArray_ShouldThrowCommandException() Tests the Execute method with a non-existent array to ensure proper exception handling. [TestMethod] [ExpectedException(typeof(CommandException))] public void Execute_NonExistentArray_ShouldThrowCommandException() TestInitialize() Initializes the test environment before each test method is run. [TestInitialize] public void TestInitialize() Remarks Sets up a new instance of the StoredProgram and AppPoke command for each test to ensure isolation and reproducibility of results."
  },
  "api/ASE_Assignment_Test.Components_Tests.AppPraserTests.html": {
    "href": "api/ASE_Assignment_Test.Components_Tests.AppPraserTests.html",
    "title": "Class AppPraserTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppPraserTests Namespace ASE_Assignment_Test.Components_Tests Assembly ASE_Assignment_Test.dll Unit tests for the AppPraser class to verify the functionality of its command parsing and program parsing capabilities. [TestClass] public class AppPraserTests Inheritance object AppPraserTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Sets up the test environment by initializing real instances of dependencies for AppPraser. [TestInitialize] public void SetUp() TestParseCommand_ShouldReturnNull_ForIgnoredLines() Tests the ParseCommand method to handle ignored lines starting with '*'. [TestMethod] public void TestParseCommand_ShouldReturnNull_ForIgnoredLines() TestParseCommand_ShouldReturnValidCommand_ForKnownCommand() Tests the ParseCommand method to ensure it returns a valid command for known commands. [TestMethod] public void TestParseCommand_ShouldReturnValidCommand_ForKnownCommand() TestParseCommand_ShouldThrowParserException_ForUnknownVariable() Tests the ParseCommand method to ensure it throws a ParserException for unknown variables. [TestMethod] [ExpectedException(typeof(ParserException))] public void TestParseCommand_ShouldThrowParserException_ForUnknownVariable()"
  },
  "api/ASE_Assignment_Test.Components_Tests.AppRealTests.html": {
    "href": "api/ASE_Assignment_Test.Components_Tests.AppRealTests.html",
    "title": "Class AppRealTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppRealTests Namespace ASE_Assignment_Test.Components_Tests Assembly ASE_Assignment_Test.dll Unit tests for the AppReal class to validate its functionality and unrestricted behavior. [TestClass] public class AppRealTests Inheritance object AppRealTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppReal_CreateLargeNumberOfInstances_ShouldNotThrowExceptions() Tests that creating a large number of AppReal instances does not result in performance degradation or errors. [TestMethod] public void AppReal_CreateLargeNumberOfInstances_ShouldNotThrowExceptions() AppReal_CreateMultipleInstances_ShouldNotThrowExceptions() Tests the creation of multiple instances of the AppReal class to ensure no restrictions are imposed. [TestMethod] public void AppReal_CreateMultipleInstances_ShouldNotThrowExceptions() AppReal_RestrictionsMethod_ShouldNotThrowExceptions() Tests that the Restrictions method does not throw exceptions when called. [TestMethod] public void AppReal_RestrictionsMethod_ShouldNotThrowExceptions() AppReal_SetAndGetValue_ShouldHandleDoubleValues() Tests setting and getting the value of the AppReal class to ensure it handles double values correctly. [TestMethod] public void AppReal_SetAndGetValue_ShouldHandleDoubleValues() AppReal_ShouldInheritBaseRealFunctionality() Tests that the AppReal class inherits functionality from the base Real class. [TestMethod] public void AppReal_ShouldInheritBaseRealFunctionality()"
  },
  "api/ASE_Assignment_Test.Components_Tests.AppStoredProgramTests.html": {
    "href": "api/ASE_Assignment_Test.Components_Tests.AppStoredProgramTests.html",
    "title": "Class AppStoredProgramTests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class AppStoredProgramTests Namespace ASE_Assignment_Test.Components_Tests Assembly ASE_Assignment_Test.dll Test class for validating the functionality of the AppStoredProgram class. This class uses the MSTest framework to verify methods and properties of AppStoredProgram. [TestClass] public class AppStoredProgramTests Inheritance object AppStoredProgramTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup() Initializes the test setup by creating mock dependencies and the instance of AppStoredProgram. [TestInitialize] public void Setup() Test_AddVariable_Duplicate_ShouldNotStore() Tests that adding a duplicate variable does not overwrite the original value. [TestMethod] public void Test_AddVariable_Duplicate_ShouldNotStore() Test_AddVariable_ShouldStoreVariable() Tests if a variable can be successfully added and retrieved from the program. [TestMethod] public void Test_AddVariable_ShouldStoreVariable() Test_EvaluateExpression_Invalid_ShouldThrowException() Tests if an exception is thrown when attempting to pop from an empty stack. [TestMethod] public void Test_EvaluateExpression_Invalid_ShouldThrowException() Test_EvaluateExpression_ShouldReturnResult() Tests if the value of an existing variable can be updated correctly. [TestMethod] public void Test_EvaluateExpression_ShouldReturnResult() Test_InitializeProgram_ShouldSetDefaults() Tests if the AppStoredProgram is correctly initialized with default values. [TestMethod] public void Test_InitializeProgram_ShouldSetDefaults() Test_PopEmptyStack_ShouldThrowException() Tests if an exception is thrown when attempting to pop from an empty stack. [TestMethod] public void Test_PopEmptyStack_ShouldThrowException() Test_PushPopConditionalCommands_ShouldHandleStack() Tests if conditional commands can be pushed to and popped from the stack correctly. [TestMethod] public void Test_PushPopConditionalCommands_ShouldHandleStack() Test_UpdateVariable_ShouldUpdateValue() Tests that adding a duplicate variable does not overwrite the original value. [TestMethod] public void Test_UpdateVariable_ShouldUpdateValue()"
  },
  "api/ASE_Assignment_Test.Components_Tests.GlobalConfigurationTest.html": {
    "href": "api/ASE_Assignment_Test.Components_Tests.GlobalConfigurationTest.html",
    "title": "Class GlobalConfigurationTest | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class GlobalConfigurationTest Namespace ASE_Assignment_Test.Components_Tests Assembly ASE_Assignment_Test.dll Unit tests for the GlobalConfiguration class to verify the functionality of its properties. [TestClass] public class GlobalConfigurationTest Inheritance object GlobalConfigurationTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields canvas public MyAppCanvas canvas Field Value MyAppCanvas Methods TestSetAndGetIsFillEnabled() Tests setting and getting the IsFillEnabled property to ensure it returns the correct value. [TestMethod] public void TestSetAndGetIsFillEnabled() Examples bool newFillState = true; GlobalConfiguration.IsFillEnabled = newFillState; Assert.AreEqual(newFillState, GlobalConfiguration.IsFillEnabled); Remarks This test verifies that the IsFillEnabled property behaves as expected when toggled on or off. TestSetAndGetMaxX() Tests setting and getting the MaxX property to ensure it returns the correct value. [TestMethod] public void TestSetAndGetMaxX() Examples int newMaxX = 800; GlobalConfiguration.MaxX = newMaxX; Assert.AreEqual(newMaxX, GlobalConfiguration.MaxX); Remarks This test validates that the MaxX property correctly stores and retrieves the value assigned to it. TestSetAndGetMaxY() Tests setting and getting the MaxY property to ensure it returns the correct value. [TestMethod] public void TestSetAndGetMaxY() Examples int newMaxY = 600; GlobalConfiguration.MaxY = newMaxY; Assert.AreEqual(newMaxY, GlobalConfiguration.MaxY); Remarks This test ensures that the MaxY property retains and returns the value assigned to it. TestSetAndGetOutputExceptionMsg() Tests setting and getting the OutputExceptionMsg property to ensure it returns the correct value. [TestMethod] public void TestSetAndGetOutputExceptionMsg() Examples string newMessage = \"An error occurred.\"; GlobalConfiguration.OutputExceptionMsg = newMessage; Assert.AreEqual(newMessage, GlobalConfiguration.OutputExceptionMsg); Remarks This test verifies that the OutputExceptionMsg property correctly stores and retrieves the value assigned to it. TestSetAndGetPenSize() Tests setting and getting the PenSize property to ensure it returns the correct value. [TestMethod] public void TestSetAndGetPenSize() Examples int newPenSize = 5; GlobalConfiguration.PenSize = newPenSize; Assert.AreEqual(newPenSize, GlobalConfiguration.PenSize); Remarks This test ensures that the PenSize property retains and returns the correct value assigned to it."
  },
  "api/ASE_Assignment_Test.Components_Tests.html": {
    "href": "api/ASE_Assignment_Test.Components_Tests.html",
    "title": "Namespace ASE_Assignment_Test.Components_Tests | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Namespace ASE_Assignment_Test.Components_Tests Classes AppArrayTests Unit test class for verifying the functionality and behavior of the AppArray class. AppBooleanTests Unit test class for verifying the functionality and behavior of boolean-related operations within the application. AppCommandFactoryTests Unit tests for the AppCommandFactory class to verify that it correctly creates instances of command objects based on input strings. AppCompoundCommandTests Unit test class for verifying the functionality of the AppCompoundCommand class. AppConditionalCommandTests Provides unit tests for the AppConditionalCommand class. AppEndTests Unit test class for verifying the functionality of the AppEnd command. AppForTests Provides unit tests for the AppFor class. AppIntTests Unit test class for verifying the functionality and behavior of integer-related operations within the application. AppMethodTests Provides unit tests for the AppMethod class. AppPeekTests Provides unit tests for the AppPeek class. AppPokeTests Unit test class for testing the functionality of the AppPoke command. AppPraserTests Unit tests for the AppPraser class to verify the functionality of its command parsing and program parsing capabilities. AppRealTests Unit tests for the AppReal class to validate its functionality and unrestricted behavior. AppStoredProgramTests Test class for validating the functionality of the AppStoredProgram class. This class uses the MSTest framework to verify methods and properties of AppStoredProgram. GlobalConfigurationTest Unit tests for the GlobalConfiguration class to verify the functionality of its properties."
  },
  "api/ASE_Assignment_Test.MyAppCanvasTest.html": {
    "href": "api/ASE_Assignment_Test.MyAppCanvasTest.html",
    "title": "Class MyAppCanvasTest | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class MyAppCanvasTest Namespace ASE_Assignment_Test Assembly ASE_Assignment_Test.dll Unit tests for the MyAppCanvas class to validate its functionality, including boundary conditions, error handling, and expected behaviors. [TestClass] public class MyAppCanvasTest Inheritance object MyAppCanvasTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Circle_NegativeRadius_ShouldLogWarning() Tests the Circle method to ensure proper handling of a negative radius. [TestMethod] public void Circle_NegativeRadius_ShouldLogWarning() Examples canvas.MoveTo(100, 100); int invalidRadius = -30; bool filled = true; string expectedMessage = \"\\nWarning: Radius must be greater than zero.\"; canvas.Circle(invalidRadius, filled); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, expectedMessage); Assert.AreEqual(100, canvas.Xpos); Assert.AreEqual(100, canvas.Ypos); Remarks This test verifies that when the Circle method is called with a negative radius: A warning message is logged, indicating that the radius must be greater than zero. The canvas position (Xpos, Ypos) remains unchanged at the current position. The test ensures the method does not proceed with drawing and logs the appropriate error message. Circle_ValidRadiusFilled_ShouldDrawFilledCircle() Tests the Circle method to ensure a filled circle is drawn correctly with a valid radius. [TestMethod] public void Circle_ValidRadiusFilled_ShouldDrawFilledCircle() Examples int centerX = 200; int centerY = 200; int radius = 50; bool filled = true; canvas.MoveTo(centerX, centerY); canvas.Circle(radius, filled); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks This test verifies that when the Circle method is called with a valid radius and the filled option set to true: A filled circle is drawn centered at the current position (Xpos, Ypos). No warnings or error messages are logged during the operation. The test does not check the actual rendering of the circle but ensures there are no configuration or execution errors. Circle_ValidRadiusOutlined_ShouldDrawOutlinedCircle() Tests the Circle method to ensure an outlined circle is drawn correctly with a valid radius. [TestMethod] public void Circle_ValidRadiusOutlined_ShouldDrawOutlinedCircle() Examples int centerX = 300; int centerY = 300; int radius = 75; bool filled = false; canvas.MoveTo(centerX, centerY); canvas.Circle(radius, filled); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks This test verifies that when the Circle method is called with a valid radius and the filled option set to false: An outlined circle is drawn centered at the current position (Xpos, Ypos). No warnings or error messages are logged during the operation. The test does not validate the rendered circle but ensures there are no errors in configuration or execution. Clear_MultipleTimes_ShouldMaintainWhiteBackground() Tests the Clear method to ensure that the canvas maintains a white background after being cleared multiple times. [TestMethod] public void Clear_MultipleTimes_ShouldMaintainWhiteBackground() Examples canvas.WriteText(\"First Clear\"); canvas.Clear(); canvas.WriteText(\"Second Clear\"); canvas.Clear(); Bitmap bitmap = (Bitmap)canvas.getBitmap(); Color pixelColor = bitmap.GetPixel(0, 0); Assert.AreEqual(Color.FromArgb(255, 255, 255, 255), pixelColor); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks This test verifies that when the Clear method is called multiple times: The canvas is reset to a white background after each clear operation. Previously drawn content is removed, and the canvas is consistent in its cleared state. No warnings or error messages are logged during the operations. The test ensures the canvas remains in a cleared state regardless of how many times Clear is called. Clear_ShouldResetCanvasToWhite() Tests the Clear method to ensure the canvas is reset to a white background. [TestMethod] public void Clear_ShouldResetCanvasToWhite() Examples canvas.MoveTo(50, 50); canvas.WriteText(\"Before Clear\"); canvas.Clear(); Bitmap bitmap = (Bitmap)canvas.getBitmap(); Color pixelColor = bitmap.GetPixel(0, 0); // Top-left corner Assert.AreEqual(Color.FromArgb(255, 255, 255, 255), pixelColor); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks This test verifies that when the Clear method is called: The canvas is cleared, and all previously drawn content is removed. The canvas background is reset to white (Color.FromArgb(255, 255, 255, 255)). No warnings or error messages are logged during the operation. The test ensures the method resets the canvas and validates the color of a pixel in the top-left corner. DrawTo_ExceedingCanvas_ShouldLogWarning() Tests the DrawTo method to ensure proper handling of coordinates that exceed the canvas boundaries. [TestMethod] public void DrawTo_ExceedingCanvas_ShouldLogWarning() Examples canvas.MoveTo(400, 400); int invalidX = canvas.XSIDE + 50; int invalidY = canvas.YSIDE + 50; string expectedMessage = $\"\\nWarning: The specified coordinates ({invalidX}, {invalidY}) are outside the canvas dimensions ({canvas.XSIDE}x{canvas.YSIDE}).\"; canvas.DrawTo(invalidX, invalidY); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, expectedMessage); Assert.AreEqual(400, canvas.Xpos); Assert.AreEqual(400, canvas.Ypos); Remarks This test verifies that when the DrawTo method is called with coordinates exceeding the canvas dimensions: A warning message is logged, indicating that the specified coordinates are outside the valid canvas boundaries. The Xpos and Ypos properties remain unchanged at their current position. DrawTo_NegativeCoordinates_ShouldLogWarning() Tests the DrawTo method to ensure proper handling of negative coordinates. [TestMethod] public void DrawTo_NegativeCoordinates_ShouldLogWarning() Examples canvas.MoveTo(100, 100); int invalidX = -10; int invalidY = -20; string expectedMessage = $\"\\nWarning: The specified coordinates ({invalidX}, {invalidY}) are outside the canvas dimensions ({canvas.XSIDE}x{canvas.YSIDE}).\"; canvas.DrawTo(invalidX, invalidY); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, expectedMessage); Assert.AreEqual(100, canvas.Xpos); Assert.AreEqual(100, canvas.Ypos); Remarks This test verifies that when the DrawTo method is called with negative coordinates: A warning message is logged, indicating that the specified coordinates are outside the valid canvas dimensions. The Xpos and Ypos properties remain unchanged at their current position. DrawTo_ValidCoordinates_ShouldDrawLineAndUpdatePosition() Tests the DrawTo method to ensure that a line is drawn and the position is updated correctly when valid coordinates are provided. [TestMethod] public void DrawTo_ValidCoordinates_ShouldDrawLineAndUpdatePosition() Examples int startX = 50; int startY = 50; int endX = 150; int endY = 150; canvas.MoveTo(startX, startY); canvas.DrawTo(endX, endY); Assert.AreEqual(endX, canvas.Xpos); Assert.AreEqual(endY, canvas.Ypos); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks This test verifies that when the DrawTo method is called with valid ending coordinates: The canvas draws a line from the current position to the specified ending position. The Xpos and Ypos properties are updated to the specified ending coordinates. No warnings or error messages are logged during the operation. Filled_SetToFalse_ShouldDisableFill() Tests the behavior of the Filled property setter when set to false. [TestMethod] public void Filled_SetToFalse_ShouldDisableFill() Examples bool fillValue = false; canvas.Filled = fillValue; Assert.IsFalse(canvas.Filled); Assert.IsFalse(GlobalConfiguration.IsFillEnabled); Remarks This test ensures that when the Filled property is set to false: The Filled property on the canvas object is successfully updated. The global configuration for fill (GlobalConfiguration.IsFillEnabled) is also disabled. Filled_SetToTrue_ShouldEnableFill() Tests the behavior of the Filled property setter when set to true. [TestMethod] public void Filled_SetToTrue_ShouldEnableFill() Examples bool fillValue = true; canvas.Filled = fillValue; Assert.IsTrue(canvas.Filled); Assert.IsTrue(GlobalConfiguration.IsFillEnabled); Remarks This test ensures that when the Filled property is set to true: The Filled property on the canvas object is successfully updated. The global configuration for fill (GlobalConfiguration.IsFillEnabled) is also enabled. Filled_ToggleFillValue_ShouldUpdateBothProperties() Tests the behavior of the Filled property when its value is toggled. [TestMethod] public void Filled_ToggleFillValue_ShouldUpdateBothProperties() Examples canvas.Filled = true; // Initially set to true canvas.Filled = false; // Toggle to false Assert.IsFalse(canvas.Filled); Assert.IsFalse(GlobalConfiguration.IsFillEnabled); Remarks This test ensures that toggling the Filled property: Successfully updates the Filled property on the canvas object. Synchronously updates the global configuration for fill (GlobalConfiguration.IsFillEnabled). The test initially sets the Filled property to true and then toggles it to false, verifying the updated states. MoveTo_ExceedingCanvasBoundaries_ShouldLogWarning() Tests the MoveTo method to ensure proper handling of coordinates exceeding the canvas boundaries. [TestMethod] public void MoveTo_ExceedingCanvasBoundaries_ShouldLogWarning() Examples int invalidX = canvas.XSIDE + 100; int invalidY = canvas.YSIDE + 100; string expectedMessage = $\"\\nWarning: The specified coordinates ({invalidX}, {invalidY}) are outside the canvas dimensions ({canvas.XSIDE}x{canvas.YSIDE}).\"; canvas.MoveTo(invalidX, invalidY); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, expectedMessage); Assert.AreEqual(0, canvas.Xpos); Assert.AreEqual(0, canvas.Ypos); Remarks This test verifies that when the MoveTo method is called with coordinates that exceed the canvas dimensions: A warning message is logged, indicating that the specified coordinates are outside the valid canvas boundaries. The Xpos and Ypos properties of the canvas object remain unchanged (defaulted to 0). MoveTo_NegativeCoordinates_ShouldLogWarning() Tests the MoveTo method to ensure proper handling of negative coordinates. [TestMethod] public void MoveTo_NegativeCoordinates_ShouldLogWarning() Examples int invalidX = -50; int invalidY = -75; string expectedMessage = $\"\\nWarning: The specified coordinates ({invalidX}, {invalidY}) are outside the canvas dimensions ({canvas.XSIDE}x{canvas.YSIDE}).\"; canvas.MoveTo(invalidX, invalidY); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, expectedMessage); Assert.AreEqual(0, canvas.Xpos); Assert.AreEqual(0, canvas.Ypos); Remarks This test verifies that when the MoveTo method is called with negative X and Y coordinates: A warning message is logged, indicating that the specified coordinates are outside the canvas dimensions. The Xpos and Ypos properties of the canvas object remain unchanged (defaulted to 0). MoveTo_ValidCoordinates_ShouldUpdatePosition() Tests the MoveTo method to ensure the canvas position is correctly updated with valid coordinates. [TestMethod] public void MoveTo_ValidCoordinates_ShouldUpdatePosition() Examples int newX = 200; int newY = 150; canvas.MoveTo(newX, newY); Assert.AreEqual(newX, canvas.Xpos); Assert.AreEqual(newY, canvas.Ypos); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks This test verifies that when the MoveTo method is called with valid X and Y coordinates: The Xpos and Ypos properties of the canvas object are updated to the specified coordinates. No warnings or error messages are logged during the operation. PenColour_SetInvalidType_ShouldLogWarningAndSetDefault() Tests the behavior of the PenColour property setter when an invalid type is assigned. [TestMethod] public void PenColour_SetInvalidType_ShouldLogWarningAndSetDefault() Examples object invalidColor = \"Blue\"; // Invalid type string expectedMessage = \"\\nInvalid pen color value provided. Please provide a valid Color object.\"; canvas.PenColour = invalidColor; Assert.AreEqual(Color.Black, (Color)canvas.PenColour); // Assuming default is set to Black Remarks This test ensures that when an invalid type (e.g., a string) is assigned to the PenColour property: A warning message is logged, indicating the invalid type and prompting the user to provide a valid Color object. The PenColour property is reset to its default value (assumed to be Color.Black). PenColour_SetValidColor_ShouldUpdatePenColour() Tests the behavior of the PenColour property setter when a valid color is assigned. [TestMethod] public void PenColour_SetValidColor_ShouldUpdatePenColour() Examples Color validColor = Color.Red; canvas.PenColour = validColor; Assert.AreEqual(validColor, (Color)canvas.PenColour); Remarks This test ensures that when a valid color is set to the PenColour property: The PenColour property on the canvas object is successfully updated to the assigned color. No errors or warnings are generated during the update. PenSize_SetNegativeValue_ShouldLogWarningAndSetDefault() Tests the behavior of the PenSize property setter when an invalid negative value is assigned. [TestMethod] public void PenSize_SetNegativeValue_ShouldLogWarningAndSetDefault() Examples int invalidPenSize = -3; string expectedMessage = \"\\nError setting pen size: Pen size must be greater than zero.\"; canvas.PenSize = invalidPenSize; Assert.AreEqual(1, canvas.PenSize); // Assuming default is set to 1 Remarks This test ensures that when the PenSize property is set to a negative value: A warning message is logged, indicating that the pen size must be greater than zero. The PenSize property is reset to its default value (assumed to be 1). PenSize_SetValidValue_ShouldUpdatePenSize() Tests the behavior of the PenSize property setter when a valid value is assigned. [TestMethod] public void PenSize_SetValidValue_ShouldUpdatePenSize() Examples int validPenSize = 5; canvas.PenSize = validPenSize; Assert.AreEqual(validPenSize, canvas.PenSize); Remarks This test ensures that when a valid pen size value is set to the PenSize property: The PenSize property is successfully updated to the assigned value. No errors or warnings are logged. PenSize_SetZero_ShouldLogWarningAndSetDefault() Tests the behavior of the PenSize property setter when an invalid value of zero is assigned. [TestMethod] public void PenSize_SetZero_ShouldLogWarningAndSetDefault() Examples int invalidPenSize = 0; string expectedMessage = \"\\nError setting pen size: Pen size must be greater than zero.\"; canvas.PenSize = invalidPenSize; Assert.AreEqual(1, canvas.PenSize); // Assuming default is set to 1 Remarks This test ensures that when the PenSize property is set to zero: A warning message is logged, indicating that the pen size must be greater than zero. The PenSize property is reset to its default value (assumed to be 1). Rect_NegativeDimensions_ShouldLogWarning() Tests the Rect method to ensure proper handling of negative dimensions. [TestMethod] public void Rect_NegativeDimensions_ShouldLogWarning() Examples canvas.MoveTo(100, 100); int invalidWidth = -100; int invalidHeight = -50; bool filled = true; string expectedMessage = \"\\nWarning: Width and height must be greater than zero.\"; canvas.Rect(invalidWidth, invalidHeight, filled); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, expectedMessage); Assert.AreEqual(100, canvas.Xpos); Assert.AreEqual(100, canvas.Ypos); Remarks This test verifies that when the Rect method is called with negative width and height: A warning message is logged, indicating that width and height must be greater than zero. The canvas position (Xpos, Ypos) remains unchanged at the current position. The test ensures the method does not proceed with drawing and logs the appropriate error message. Rect_ValidDimensionsFilled_ShouldDrawFilledRectangle() Tests the Rect method to ensure a filled rectangle is drawn correctly with valid dimensions. [TestMethod] public void Rect_ValidDimensionsFilled_ShouldDrawFilledRectangle() Examples int startX = 50; int startY = 50; int width = 200; int height = 100; bool filled = true; canvas.MoveTo(startX, startY); canvas.Rect(width, height, filled); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks This test verifies that when the Rect method is called with valid width, height, and the filled option set to true: A filled rectangle is drawn starting from the current position (Xpos, Ypos). No warnings or error messages are logged during the operation. The test ensures the method executes correctly without validating the rendering itself. Rect_ValidDimensionsOutlined_ShouldDrawOutlinedRectangle() Tests the Rect method to ensure an outlined rectangle is drawn correctly with valid dimensions. [TestMethod] public void Rect_ValidDimensionsOutlined_ShouldDrawOutlinedRectangle() Examples int startX = 300; int startY = 300; int width = 150; int height = 150; bool filled = false; canvas.MoveTo(startX, startY); canvas.Rect(width, height, filled); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks This test verifies that when the Rect method is called with valid width, height, and the filled option set to false: An outlined rectangle is drawn starting from the current position (Xpos, Ypos). No warnings or error messages are logged during the operation. The test ensures the method executes correctly without validating the rendering itself. Reset_AfterMultipleDrawOperations_ShouldClearAndReset() Tests the Reset method to ensure it clears the canvas and resets all properties to their default values after multiple drawing operations. [TestMethod] public void Reset_AfterMultipleDrawOperations_ShouldClearAndReset() Examples canvas.MoveTo(100, 100); canvas.WriteText(\"First Line\"); canvas.Circle(50, true); canvas.Rect(100, 50, false); canvas.Reset(); Assert.AreEqual(0, canvas.Xpos); Assert.AreEqual(0, canvas.Ypos); Assert.AreEqual(1, canvas.PenSize); // Default pen size Assert.IsFalse(canvas.Filled); // Default fill state Assert.AreEqual(Color.FromArgb(255, 0, 0, 0), (Color)canvas.PenColour); // Default pen color Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks This test verifies that when the Reset method is called after multiple drawing operations: The canvas is cleared, removing all drawn content. The position (Xpos, Ypos) is reset to (0, 0). The PenSize property is reset to its default value (1). The Filled property is reset to its default value (false). The PenColour property is reset to its default value (Color.Black). No warnings or error messages are logged during the operation. This test ensures the canvas is fully restored to its default state after being reset, regardless of previous operations. Reset_ShouldSetPositionToZeroAndSetDefaults() Tests the Reset method to ensure it resets the canvas properties to their default values and the position to zero. [TestMethod] public void Reset_ShouldSetPositionToZeroAndSetDefaults() Examples canvas.MoveTo(200, 200); canvas.PenSize = 5; canvas.Filled = true; canvas.WriteText(\"Before Reset\"); canvas.Reset(); Assert.AreEqual(0, canvas.Xpos); Assert.AreEqual(0, canvas.Ypos); Assert.AreEqual(1, canvas.PenSize); // Default pen size Assert.IsFalse(canvas.Filled); // Default fill Assert.AreEqual(Color.FromArgb(255, 0, 0, 0), (Color)canvas.PenColour); // Default pen color Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks This test verifies that when the Reset method is called: The canvas position (Xpos, Ypos) is reset to (0, 0). The PenSize property is reset to its default value (1). The Filled property is reset to its default value (false). The PenColour property is reset to its default value (Color.Black). No warnings or error messages are logged during the operation. The test ensures the method properly restores all canvas settings to their defaults. SetCanvas_NullBitmap_ShouldLogWarning() Tests the SetCanvas method to ensure proper handling of a null Bitmap object. [TestMethod] public void SetCanvas_NullBitmap_ShouldLogWarning() Examples Bitmap nullBitmap = null; Graphics newGraphics = Graphics.FromImage(new Bitmap(300, 300)); string expectedMessage = \"\\nCanvas error: The provided Bitmap object cannot be null.\"; canvas.SetCanvas(nullBitmap, newGraphics); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, expectedMessage); Assert.AreNotEqual(nullBitmap, canvas.getBitmap()); Remarks This test verifies that when the SetCanvas method is called with a null Bitmap object: A warning message is logged, indicating that the provided Bitmap object cannot be null. The canvas's current Bitmap object is not updated to the null value. This test ensures that the method validates the Bitmap parameter and handles null inputs appropriately. SetCanvas_NullGraphics_ShouldLogWarning() Tests the SetCanvas method to ensure proper handling of a null Graphics object. [TestMethod] public void SetCanvas_NullGraphics_ShouldLogWarning() Examples Bitmap newBitmap = new Bitmap(300, 300); Graphics nullGraphics = null; string expectedMessage = \"\\nCanvas error: The provided Graphics object cannot be null.\"; canvas.SetCanvas(newBitmap, nullGraphics); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, expectedMessage); Assert.AreNotEqual(nullGraphics, canvas.GetGraphics()); Remarks This test verifies that when the SetCanvas method is called with a null Graphics object: A warning message is logged, indicating that the provided Graphics object cannot be null. The canvas's current Graphics object is not updated to the null value. This test ensures that the method validates the Graphics parameter and handles null inputs appropriately. SetCanvas_ValidBitmapAndGraphics_ShouldInitializeCanvas() Tests the SetCanvas method to ensure that the canvas is correctly initialized with a valid Bitmap and Graphics object. [TestMethod] public void SetCanvas_ValidBitmapAndGraphics_ShouldInitializeCanvas() Examples Bitmap newBitmap = new Bitmap(300, 300); Graphics newGraphics = Graphics.FromImage(newBitmap); canvas.SetCanvas(newBitmap, newGraphics); Assert.AreEqual(newBitmap, canvas.getBitmap()); Assert.AreEqual(newGraphics, canvas.GetGraphics()); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks This test verifies that when the SetCanvas method is called with valid Bitmap and Graphics objects: The canvas is initialized with the provided Bitmap object. The canvas is initialized with the provided Graphics object. No warnings or error messages are logged during the operation. This test ensures that the SetCanvas method functions as intended when provided with valid parameters. Set_DimensionsExceedingMaximum_ShouldLogWarning() Tests the Set method of the canvas object to ensure proper handling of dimensions exceeding the maximum allowed value. [TestMethod] public void Set_DimensionsExceedingMaximum_ShouldLogWarning() Examples int invalidXSize = 2500; int invalidYSize = 3000; string expectedMessage = $\"\\nWarning: Invalid canvas size: Width={invalidXSize}, Height={invalidYSize}. Both dimensions must be within 2000.\"; canvas.Set(invalidXSize, invalidYSize); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, expectedMessage); Remarks This test verifies that when the Set method is called with dimensions exceeding the maximum allowable limit (2000): A warning message is logged, indicating the invalid dimensions and specifying the maximum allowed limit. The canvas dimensions are not initialized with the invalid values. Set_NegativeDimensions_ShouldLogWarning() Tests the Set method of the canvas object to ensure proper handling of negative dimensions. [TestMethod] public void Set_NegativeDimensions_ShouldLogWarning() Examples int invalidXSize = -500; int invalidYSize = -300; string expectedMessage = $\"\\nWarning: Invalid canvas size: Width={invalidXSize}, Height={invalidYSize}. Both dimensions must be positive.\"; canvas.Set(invalidXSize, invalidYSize); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, expectedMessage); Remarks This test verifies that when the Set method is called with negative dimensions: A warning message is logged, indicating the invalid dimensions and specifying that both dimensions must be positive. The canvas dimensions are not initialized with the invalid values. Set_ValidDimensions_ShouldInitializeCanvas() Tests the Set method of the canvas object to ensure proper initialization with valid dimensions. [TestMethod] public void Set_ValidDimensions_ShouldInitializeCanvas() Examples int validXSize = 800; int validYSize = 600; canvas.Set(validXSize, validYSize); Assert.AreEqual(validXSize, canvas.XSIDE); Assert.AreEqual(validYSize, canvas.YSIDE); Assert.AreEqual(0, canvas.Xpos); Assert.AreEqual(0, canvas.Ypos); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks This test verifies that when the Set method is called with valid dimensions: The canvas dimensions (XSIDE and YSIDE) are correctly initialized to the specified values. The initial position (Xpos and Ypos) is set to zero. No warnings or error messages are logged. Setup() Instance of MyAppCanvas used in tests. [TestInitialize] public void Setup() Tri_ExceedingCanvasBoundaries_ShouldLogWarning() Tests the Tri method to ensure proper handling of triangle dimensions that exceed canvas boundaries. [TestMethod] public void Tri_ExceedingCanvasBoundaries_ShouldLogWarning() Examples canvas.MoveTo(canvas.XSIDE - 50, canvas.YSIDE - 50); int width = 100; int height = 100; bool filled = true; string expectedMessage = $\"\\nCanvas error: Triangle exceeds canvas boundaries at position ({canvas.Xpos}, {canvas.Ypos}) with dimensions Width={width}, Height={height}.\"; canvas.Tri(width, height); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, expectedMessage); Assert.AreEqual(canvas.XSIDE - 50, canvas.Xpos); Assert.AreEqual(canvas.YSIDE - 50, canvas.Ypos); Remarks This test verifies that when the Tri method is called with dimensions that exceed the canvas boundaries: A warning message is logged, indicating that the triangle exceeds the canvas boundaries. The canvas position (Xpos, Ypos) remains unchanged at its current position. The test ensures the method does not proceed with drawing and logs the appropriate error message. Tri_ValidDimensionsFilled_ShouldDrawFilledTriangle() Tests the Tri method to ensure a filled triangle is drawn correctly with valid dimensions. [TestMethod] public void Tri_ValidDimensionsFilled_ShouldDrawFilledTriangle() Examples int startX = 150; int startY = 150; int width = 100; int height = 80; bool filled = true; canvas.MoveTo(startX, startY); canvas.Tri(width, height); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks This test verifies that when the Tri method is called with valid width, height, and the filled option set to true: A filled triangle is drawn starting from the current position (Xpos, Ypos). No warnings or error messages are logged during the operation. The test ensures the method executes correctly without validating the rendering itself. Tri_ValidDimensionsOutlined_ShouldDrawOutlinedTriangle() Tests the Tri method to ensure an outlined triangle is drawn correctly with valid dimensions. [TestMethod] public void Tri_ValidDimensionsOutlined_ShouldDrawOutlinedTriangle() Examples int startX = 300; int startY = 300; int width = 120; int height = 90; bool filled = false; canvas.MoveTo(startX, startY); canvas.Tri(width, height); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks This test verifies that when the Tri method is called with valid width, height, and the filled option set to false: An outlined triangle is drawn starting from the current position (Xpos, Ypos). No warnings or error messages are logged during the operation. The test ensures the method executes correctly without validating the rendering itself. WriteText_NullText_ShouldLogWarning() Tests the WriteText method to ensure proper handling of a null text input. [TestMethod] public void WriteText_NullText_ShouldLogWarning() Examples string invalidText = null; string expectedMessage = \"\\nCanvas error: Invalid text input: Text cannot be null, empty, or whitespace.\"; canvas.WriteText(invalidText); StringAssert.Contains(GlobalConfiguration.OutputExceptionMsg, expectedMessage); Remarks This test verifies that when the WriteText method is called with a null text input: A warning message is logged, indicating that the text input is invalid because it cannot be null, empty, or whitespace. The method does not proceed with any drawing operations. The test ensures the method validates text input and logs an appropriate error message when invalid. WriteText_ValidText_ShouldDrawText() Tests the WriteText method to ensure that valid text is drawn correctly on the canvas. [TestMethod] public void WriteText_ValidText_ShouldDrawText() Examples string validText = \"Hello, Canvas!\"; canvas.MoveTo(100, 100); canvas.WriteText(validText); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks This test verifies that when the WriteText method is called with valid text: The text is drawn at the current position (Xpos, Ypos). No warnings or error messages are logged during the operation. The test ensures the method executes correctly without validating the visual rendering of the text. Xpos_SetNegativeValue_ShouldLogWarningAndSetDefault() Tests the behavior of the Xpos property setter when an invalid negative value is assigned. [TestMethod] public void Xpos_SetNegativeValue_ShouldLogWarningAndSetDefault() Examples int invalidX = -50; string expectedMessage = $\"\\nError setting X position: Invalid X position: {invalidX}. Must be between 0 and {canvas.YSIDE}.\"; canvas.Xpos = invalidX; Assert.AreEqual(0, canvas.Xpos); Remarks This test ensures that when a negative value is set to the Xpos property: A warning message is logged, specifying the invalid value and the valid range. The Xpos property is reset to its default value (assumed to be 0). Xpos_SetValidValue_ShouldUpdatePosition() Tests the behavior of the Xpos property setter when a valid value within the canvas boundary is assigned. [TestMethod] public void Xpos_SetValidValue_ShouldUpdatePosition() Examples int validX = 100; canvas.XSIDE = 500; // Ensure canvas size is set appropriately canvas.Xpos = validX; Assert.AreEqual(validX, canvas.Xpos); Remarks This test ensures that when a valid X position value is set to the Xpos property: The Xpos property is successfully updated to the assigned value. The value is within the valid range defined by the canvas size (XSIDE). Xpos_SetValueExceedingCanvas_ShouldLogWarningAndSetDefault() Tests the behavior of the Xpos property setter when a value exceeding the canvas boundary is assigned. [TestMethod] public void Xpos_SetValueExceedingCanvas_ShouldLogWarningAndSetDefault() Examples int invalidX = canvas.YSIDE + 10; string expectedMessage = $\"\\nError setting X position: Invalid X position: {invalidX}. Must be between 0 and {canvas.YSIDE}.\"; canvas.Xpos = invalidX; Assert.AreEqual(0, canvas.Xpos); Remarks This test ensures that when a value greater than the maximum allowable boundary (represented by canvas.YSIDE) is set to the Xpos property: A warning message is logged, specifying the invalid value and the valid range. The Xpos property is reset to its default value (assumed to be 0). Ypos_SetNegativeValue_ShouldLogWarningAndSetDefault() Tests the behavior of the Ypos property setter when an invalid negative value is assigned. [TestMethod] public void Ypos_SetNegativeValue_ShouldLogWarningAndSetDefault() Examples int invalidY = -75; string expectedMessage = $\"\\nError setting Y position: Invalid Y position: {invalidY}. Must be between 0 and {canvas.YSIDE}.\"; canvas.Ypos = invalidY; Assert.AreEqual(0, canvas.Ypos); Remarks This test ensures that when a negative value is set to the Ypos property: A warning message is logged, specifying the invalid value and the valid range. The Ypos property is reset to its default value (assumed to be 0). Ypos_SetValidValue_ShouldUpdatePosition() Tests the behavior of the Ypos property setter when a valid value within the canvas boundary is assigned. [TestMethod] public void Ypos_SetValidValue_ShouldUpdatePosition() Examples int validY = 150; canvas.YSIDE = 500; // Ensure canvas size is set appropriately canvas.Ypos = validY; Assert.AreEqual(validY, canvas.Ypos); Remarks This test ensures that when a valid Y position value is set to the Ypos property: The Ypos property is successfully updated to the assigned value. The value is within the valid range defined by the canvas size (YSIDE). Ypos_SetValueExceedingCanvas_ShouldLogWarningAndSetDefault() Tests the behavior of the Ypos property setter when a value exceeding the canvas boundary is assigned. [TestMethod] public void Ypos_SetValueExceedingCanvas_ShouldLogWarningAndSetDefault() Examples int invalidY = canvas.YSIDE + 20; // Exceeds YCanvasSize for testing string expectedMessage = $\"\\nError setting Y position: Invalid Y position: {invalidY}. Must be between 0 and {canvas.YSIDE}.\"; canvas.Ypos = invalidY; Assert.AreEqual(0, canvas.Ypos); Remarks This test ensures that when a value greater than the maximum allowable boundary (represented by canvas.YSIDE) is set to the Ypos property: A warning message is logged, specifying the invalid value and the valid range. The Ypos property is reset to its default value (assumed to be 0). getBitmap_AfterDrawing_ShouldReturnUpdatedBitmap() Tests the getBitmap method to ensure it returns the updated bitmap after drawing operations on the canvas. [TestMethod] public void getBitmap_AfterDrawing_ShouldReturnUpdatedBitmap() Examples canvas.MoveTo(50, 50); canvas.WriteText(\"Test Text\"); Bitmap returnedBitmap = (Bitmap)canvas.getBitmap(); Assert.IsNotNull(returnedBitmap); Assert.AreEqual(string.Empty, GlobalConfiguration.OutputExceptionMsg); Remarks This test verifies that after performing drawing operations on the canvas: The getBitmap method returns a non-null Bitmap object. The returned Bitmap reflects the updates made by the drawing operations. No warnings or error messages are logged during the operation. The test ensures the bitmap reflects the current state of the canvas and is properly maintained."
  },
  "api/ASE_Assignment_Test.html": {
    "href": "api/ASE_Assignment_Test.html",
    "title": "Namespace ASE_Assignment_Test | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Namespace ASE_Assignment_Test Classes CommandUnitTests Unit tests for command execution functionality in the application. MyAppCanvasTest Unit tests for the MyAppCanvas class to validate its functionality, including boundary conditions, error handling, and expected behaviors."
  },
  "api/Console_App.ConsoleDrawingApp.html": {
    "href": "api/Console_App.ConsoleDrawingApp.html",
    "title": "Class ConsoleDrawingApp | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Class ConsoleDrawingApp Namespace Console_App Assembly Console_App.dll A console-integrated drawing application that provides a graphical canvas and supports command input through a console. public class ConsoleDrawingApp : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form ConsoleDrawingApp Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This application combines a graphical user interface with a console for input commands. Users can execute drawing commands on the canvas and interact with the application through the console or UI. Constructors ConsoleDrawingApp() Initializes a new instance of the ConsoleDrawingApp class. public ConsoleDrawingApp() Examples var app = new ConsoleDrawingApp(); Application.Run(app); Remarks Sets up the canvas, command handling components, and a console interface for user input. This constructor attaches a console window and initializes the application's UI and backend components. Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/Console_App.html": {
    "href": "api/Console_App.html",
    "title": "Namespace Console_App | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Namespace Console_App Classes ConsoleDrawingApp A console-integrated drawing application that provides a graphical canvas and supports command input through a console."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ASE_Assignment_Sameer_Basnet_77356702",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}