### YamlMime:ManagedReference
items:
- uid: ASE_Assignment_Test.CommandUnitTests
  commentId: T:ASE_Assignment_Test.CommandUnitTests
  id: CommandUnitTests
  parent: ASE_Assignment_Test
  children:
  - ASE_Assignment_Test.CommandUnitTests.Setup
  - ASE_Assignment_Test.CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndRestrictedScenarios
  - ASE_Assignment_Test.CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndUnRestrictedScenarios
  - ASE_Assignment_Test.CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndRestrictedScenarios
  - ASE_Assignment_Test.CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
  - ASE_Assignment_Test.CommandUnitTests.Test_IfCommand_ShouldHandleValidAndRestrictedScenarios
  - ASE_Assignment_Test.CommandUnitTests.Test_IfCommand_ShouldHandleValidAndUnRestrictedScenarios
  - ASE_Assignment_Test.CommandUnitTests.Test_IntCommand_ShouldHandleValidAndRestrictedScenarios
  - ASE_Assignment_Test.CommandUnitTests.Test_IntCommand_ShouldHandleValidAndUnRestrictedScenarios
  - ASE_Assignment_Test.CommandUnitTests.Test_MultiLineCommand_ShouldHandleValidAndUnRestrictedScenarios
  - ASE_Assignment_Test.CommandUnitTests.Test_ProgramSizeExceddingCommand_ShouldHandleValidAndUnRestrictedScenarios
  - ASE_Assignment_Test.CommandUnitTests.Test_ReaLCommandLoops_ShouldHandleValidAndRestrictedScenarios
  - ASE_Assignment_Test.CommandUnitTests.Test_ReaLCommand_ShouldHandleValidAndUnRestrictedScenarios
  - ASE_Assignment_Test.CommandUnitTests.Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg
  - ASE_Assignment_Test.CommandUnitTests.Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg
  - ASE_Assignment_Test.CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndRestrictedScenarios
  - ASE_Assignment_Test.CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
  langs:
  - csharp
  - vb
  name: CommandUnitTests
  nameWithType: CommandUnitTests
  fullName: ASE_Assignment_Test.CommandUnitTests
  type: Class
  source:
    remote:
      path: ASE_Assignment/ASE_Assignment_Test/CommandsUnitTests.cs
      branch: main
      repo: https://github.com/ASE-Classroom/ase-demo-assignment-bsameer12.git
    id: CommandUnitTests
    path: ASE_Assignment_Test/CommandsUnitTests.cs
    startLine: 19
  assemblies:
  - ASE_Assignment_Test
  namespace: ASE_Assignment_Test
  summary: Unit tests for command execution functionality in the application.
  remarks: >-
    This test class verifies that the program execution and single command execution do not alter the global configuration's output exception message.

    It uses mock dependencies for testing the interaction between components such as the command factory, parser, and stored program.
  example: []
  syntax:
    content: >-
      [TestClass]

      public class CommandUnitTests
    content.vb: >-
      <TestClass>

      Public Class CommandUnitTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute.#ctor
    arguments: []
- uid: ASE_Assignment_Test.CommandUnitTests.Setup
  commentId: M:ASE_Assignment_Test.CommandUnitTests.Setup
  id: Setup
  parent: ASE_Assignment_Test.CommandUnitTests
  langs:
  - csharp
  - vb
  name: Setup()
  nameWithType: CommandUnitTests.Setup()
  fullName: ASE_Assignment_Test.CommandUnitTests.Setup()
  type: Method
  source:
    remote:
      path: ASE_Assignment/ASE_Assignment_Test/CommandsUnitTests.cs
      branch: main
      repo: https://github.com/ASE-Classroom/ase-demo-assignment-bsameer12.git
    id: Setup
    path: ASE_Assignment_Test/CommandsUnitTests.cs
    startLine: 48
  assemblies:
  - ASE_Assignment_Test
  namespace: ASE_Assignment_Test
  summary: Sets up the test environment by initializing mock objects and dependencies.
  remarks: This method is executed before each test to ensure a clean and consistent test environment.
  example: []
  syntax:
    content: >-
      [TestInitialize]

      public void Setup()
    content.vb: >-
      <TestInitialize>

      Public Sub Setup()
  overload: ASE_Assignment_Test.CommandUnitTests.Setup*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute.#ctor
    arguments: []
- uid: ASE_Assignment_Test.CommandUnitTests.Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg
  commentId: M:ASE_Assignment_Test.CommandUnitTests.Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg
  id: Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg
  parent: ASE_Assignment_Test.CommandUnitTests
  langs:
  - csharp
  - vb
  name: Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg()
  nameWithType: CommandUnitTests.Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg()
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg()
  type: Method
  source:
    remote:
      path: ASE_Assignment/ASE_Assignment_Test/CommandsUnitTests.cs
      branch: main
      repo: https://github.com/ASE-Classroom/ase-demo-assignment-bsameer12.git
    id: Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg
    path: ASE_Assignment_Test/CommandsUnitTests.cs
    startLine: 76
  assemblies:
  - ASE_Assignment_Test
  namespace: ASE_Assignment_Test
  summary: Tests that running a program with multiple commands does not change the global output exception message.
  remarks: Ensures that the `GlobalConfiguration.OutputExceptionMsg` remains unaltered when a valid set of commands is executed.
  example:
  - >-
    This test runs a set of drawing commands and verifies the global configuration message:

    <pre><code class="lang-csharp">mockParser.ParseProgram("moveto 150,150\r\npencolour 0,0,255\r\ncircle 150");

    program.Run();

    Assert.AreEqual("Output Message: ", GlobalConfiguration.OutputExceptionMsg);</code></pre>
  syntax:
    content: >-
      [TestMethod]

      public void Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg()
    content.vb: >-
      <TestMethod>

      Public Sub Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg()
  overload: ASE_Assignment_Test.CommandUnitTests.Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
- uid: ASE_Assignment_Test.CommandUnitTests.Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg
  commentId: M:ASE_Assignment_Test.CommandUnitTests.Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg
  id: Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg
  parent: ASE_Assignment_Test.CommandUnitTests
  langs:
  - csharp
  - vb
  name: Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg()
  nameWithType: CommandUnitTests.Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg()
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg()
  type: Method
  source:
    remote:
      path: ASE_Assignment/ASE_Assignment_Test/CommandsUnitTests.cs
      branch: main
      repo: https://github.com/ASE-Classroom/ase-demo-assignment-bsameer12.git
    id: Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg
    path: ASE_Assignment_Test/CommandsUnitTests.cs
    startLine: 104
  assemblies:
  - ASE_Assignment_Test
  namespace: ASE_Assignment_Test
  summary: Tests that running a single command does not change the global output exception message.
  remarks: Validates that even when a single valid command is executed, the global configuration's output exception message remains unchanged.
  example:
  - >-
    This test runs a single `moveto` command and verifies the global configuration message:

    <pre><code class="lang-csharp">mockParser.ParseProgram("moveto 100,100");

    program.Run();

    Assert.AreEqual("Output Message: ", GlobalConfiguration.OutputExceptionMsg);</code></pre>
  syntax:
    content: >-
      [TestMethod]

      public void Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg()
    content.vb: >-
      <TestMethod>

      Public Sub Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg()
  overload: ASE_Assignment_Test.CommandUnitTests.Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
- uid: ASE_Assignment_Test.CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndRestrictedScenarios
  commentId: M:ASE_Assignment_Test.CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndRestrictedScenarios
  id: Test_ForCommandLoops_ShouldHandleValidAndRestrictedScenarios
  parent: ASE_Assignment_Test.CommandUnitTests
  langs:
  - csharp
  - vb
  name: Test_ForCommandLoops_ShouldHandleValidAndRestrictedScenarios()
  nameWithType: CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndRestrictedScenarios()
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndRestrictedScenarios()
  type: Method
  source:
    remote:
      path: ASE_Assignment/ASE_Assignment_Test/CommandsUnitTests.cs
      branch: main
      repo: https://github.com/ASE-Classroom/ase-demo-assignment-bsameer12.git
    id: Test_ForCommandLoops_ShouldHandleValidAndRestrictedScenarios
    path: ASE_Assignment_Test/CommandsUnitTests.cs
    startLine: 134
  assemblies:
  - ASE_Assignment_Test
  namespace: ASE_Assignment_Test
  summary: Tests the execution of a valid 'for' loop command with restricted scenarios.
  remarks: >-
    The test verifies that a 'for' loop with valid parameters does not violate restrictions 

    and executes commands correctly.
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Test_ForCommandLoops_ShouldHandleValidAndRestrictedScenarios()
    content.vb: >-
      <TestMethod>

      Public Sub Test_ForCommandLoops_ShouldHandleValidAndRestrictedScenarios()
  overload: ASE_Assignment_Test.CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndRestrictedScenarios*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
- uid: ASE_Assignment_Test.CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
  commentId: M:ASE_Assignment_Test.CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
  id: Test_ForCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
  parent: ASE_Assignment_Test.CommandUnitTests
  langs:
  - csharp
  - vb
  name: Test_ForCommandLoops_ShouldHandleValidAndUnRestrictedScenarios()
  nameWithType: CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndUnRestrictedScenarios()
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndUnRestrictedScenarios()
  type: Method
  source:
    remote:
      path: ASE_Assignment/ASE_Assignment_Test/CommandsUnitTests.cs
      branch: main
      repo: https://github.com/ASE-Classroom/ase-demo-assignment-bsameer12.git
    id: Test_ForCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
    path: ASE_Assignment_Test/CommandsUnitTests.cs
    startLine: 168
  assemblies:
  - ASE_Assignment_Test
  namespace: ASE_Assignment_Test
  summary: Tests the execution of a valid 'for' loop command with unrestricted scenarios.
  remarks: >-
    The test verifies that a 'for' loop with valid parameters which violate restrictions 

    and executes commands correctly.
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Test_ForCommandLoops_ShouldHandleValidAndUnRestrictedScenarios()
    content.vb: >-
      <TestMethod>

      Public Sub Test_ForCommandLoops_ShouldHandleValidAndUnRestrictedScenarios()
  overload: ASE_Assignment_Test.CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndUnRestrictedScenarios*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
- uid: ASE_Assignment_Test.CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
  commentId: M:ASE_Assignment_Test.CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
  id: Test_WhileCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
  parent: ASE_Assignment_Test.CommandUnitTests
  langs:
  - csharp
  - vb
  name: Test_WhileCommandLoops_ShouldHandleValidAndUnRestrictedScenarios()
  nameWithType: CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndUnRestrictedScenarios()
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndUnRestrictedScenarios()
  type: Method
  source:
    remote:
      path: ASE_Assignment/ASE_Assignment_Test/CommandsUnitTests.cs
      branch: main
      repo: https://github.com/ASE-Classroom/ase-demo-assignment-bsameer12.git
    id: Test_WhileCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
    path: ASE_Assignment_Test/CommandsUnitTests.cs
    startLine: 202
  assemblies:
  - ASE_Assignment_Test
  namespace: ASE_Assignment_Test
  summary: Tests the execution of a valid 'while' loop command with unrestricted scenarios.
  remarks: >-
    The test verifies that a 'while' loop with valid parameters which violates restrictions 

    and executes commands correctly.
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Test_WhileCommandLoops_ShouldHandleValidAndUnRestrictedScenarios()
    content.vb: >-
      <TestMethod>

      Public Sub Test_WhileCommandLoops_ShouldHandleValidAndUnRestrictedScenarios()
  overload: ASE_Assignment_Test.CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndUnRestrictedScenarios*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
- uid: ASE_Assignment_Test.CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndRestrictedScenarios
  commentId: M:ASE_Assignment_Test.CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndRestrictedScenarios
  id: Test_WhileCommandLoops_ShouldHandleValidAndRestrictedScenarios
  parent: ASE_Assignment_Test.CommandUnitTests
  langs:
  - csharp
  - vb
  name: Test_WhileCommandLoops_ShouldHandleValidAndRestrictedScenarios()
  nameWithType: CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndRestrictedScenarios()
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndRestrictedScenarios()
  type: Method
  source:
    remote:
      path: ASE_Assignment/ASE_Assignment_Test/CommandsUnitTests.cs
      branch: main
      repo: https://github.com/ASE-Classroom/ase-demo-assignment-bsameer12.git
    id: Test_WhileCommandLoops_ShouldHandleValidAndRestrictedScenarios
    path: ASE_Assignment_Test/CommandsUnitTests.cs
    startLine: 236
  assemblies:
  - ASE_Assignment_Test
  namespace: ASE_Assignment_Test
  summary: Tests the execution of a valid 'while' loop command with restricted scenarios.
  remarks: >-
    The test verifies that a 'while' loop with valid parameters does not violate restrictions 

    and executes commands correctly.
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Test_WhileCommandLoops_ShouldHandleValidAndRestrictedScenarios()
    content.vb: >-
      <TestMethod>

      Public Sub Test_WhileCommandLoops_ShouldHandleValidAndRestrictedScenarios()
  overload: ASE_Assignment_Test.CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndRestrictedScenarios*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
- uid: ASE_Assignment_Test.CommandUnitTests.Test_IfCommand_ShouldHandleValidAndUnRestrictedScenarios
  commentId: M:ASE_Assignment_Test.CommandUnitTests.Test_IfCommand_ShouldHandleValidAndUnRestrictedScenarios
  id: Test_IfCommand_ShouldHandleValidAndUnRestrictedScenarios
  parent: ASE_Assignment_Test.CommandUnitTests
  langs:
  - csharp
  - vb
  name: Test_IfCommand_ShouldHandleValidAndUnRestrictedScenarios()
  nameWithType: CommandUnitTests.Test_IfCommand_ShouldHandleValidAndUnRestrictedScenarios()
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_IfCommand_ShouldHandleValidAndUnRestrictedScenarios()
  type: Method
  source:
    remote:
      path: ASE_Assignment/ASE_Assignment_Test/CommandsUnitTests.cs
      branch: main
      repo: https://github.com/ASE-Classroom/ase-demo-assignment-bsameer12.git
    id: Test_IfCommand_ShouldHandleValidAndUnRestrictedScenarios
    path: ASE_Assignment_Test/CommandsUnitTests.cs
    startLine: 270
  assemblies:
  - ASE_Assignment_Test
  namespace: ASE_Assignment_Test
  summary: Tests the execution of a valid 'if'  command with unrestricted scenarios.
  remarks: >-
    The test verifies that a 'if'  with valid which violates restrictions 

    and executes commands correctly.
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Test_IfCommand_ShouldHandleValidAndUnRestrictedScenarios()
    content.vb: >-
      <TestMethod>

      Public Sub Test_IfCommand_ShouldHandleValidAndUnRestrictedScenarios()
  overload: ASE_Assignment_Test.CommandUnitTests.Test_IfCommand_ShouldHandleValidAndUnRestrictedScenarios*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
- uid: ASE_Assignment_Test.CommandUnitTests.Test_IfCommand_ShouldHandleValidAndRestrictedScenarios
  commentId: M:ASE_Assignment_Test.CommandUnitTests.Test_IfCommand_ShouldHandleValidAndRestrictedScenarios
  id: Test_IfCommand_ShouldHandleValidAndRestrictedScenarios
  parent: ASE_Assignment_Test.CommandUnitTests
  langs:
  - csharp
  - vb
  name: Test_IfCommand_ShouldHandleValidAndRestrictedScenarios()
  nameWithType: CommandUnitTests.Test_IfCommand_ShouldHandleValidAndRestrictedScenarios()
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_IfCommand_ShouldHandleValidAndRestrictedScenarios()
  type: Method
  source:
    remote:
      path: ASE_Assignment/ASE_Assignment_Test/CommandsUnitTests.cs
      branch: main
      repo: https://github.com/ASE-Classroom/ase-demo-assignment-bsameer12.git
    id: Test_IfCommand_ShouldHandleValidAndRestrictedScenarios
    path: ASE_Assignment_Test/CommandsUnitTests.cs
    startLine: 303
  assemblies:
  - ASE_Assignment_Test
  namespace: ASE_Assignment_Test
  summary: Tests the execution of a valid 'if'  command with restricted scenarios.
  remarks: >-
    The test verifies that a 'if'  with valid which do not violates restrictions 

    and executes commands correctly.
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Test_IfCommand_ShouldHandleValidAndRestrictedScenarios()
    content.vb: >-
      <TestMethod>

      Public Sub Test_IfCommand_ShouldHandleValidAndRestrictedScenarios()
  overload: ASE_Assignment_Test.CommandUnitTests.Test_IfCommand_ShouldHandleValidAndRestrictedScenarios*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
- uid: ASE_Assignment_Test.CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndRestrictedScenarios
  commentId: M:ASE_Assignment_Test.CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndRestrictedScenarios
  id: Test_ArrayCommand_ShouldHandleValidAndRestrictedScenarios
  parent: ASE_Assignment_Test.CommandUnitTests
  langs:
  - csharp
  - vb
  name: Test_ArrayCommand_ShouldHandleValidAndRestrictedScenarios()
  nameWithType: CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndRestrictedScenarios()
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndRestrictedScenarios()
  type: Method
  source:
    remote:
      path: ASE_Assignment/ASE_Assignment_Test/CommandsUnitTests.cs
      branch: main
      repo: https://github.com/ASE-Classroom/ase-demo-assignment-bsameer12.git
    id: Test_ArrayCommand_ShouldHandleValidAndRestrictedScenarios
    path: ASE_Assignment_Test/CommandsUnitTests.cs
    startLine: 336
  assemblies:
  - ASE_Assignment_Test
  namespace: ASE_Assignment_Test
  summary: Tests the execution of a valid 'array'  command with restricted scenarios.
  remarks: >-
    The test verifies that a 'array'  with valid which do not violates restrictions 

    and executes commands correctly.
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Test_ArrayCommand_ShouldHandleValidAndRestrictedScenarios()
    content.vb: >-
      <TestMethod>

      Public Sub Test_ArrayCommand_ShouldHandleValidAndRestrictedScenarios()
  overload: ASE_Assignment_Test.CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndRestrictedScenarios*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
- uid: ASE_Assignment_Test.CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndUnRestrictedScenarios
  commentId: M:ASE_Assignment_Test.CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndUnRestrictedScenarios
  id: Test_ArrayCommand_ShouldHandleValidAndUnRestrictedScenarios
  parent: ASE_Assignment_Test.CommandUnitTests
  langs:
  - csharp
  - vb
  name: Test_ArrayCommand_ShouldHandleValidAndUnRestrictedScenarios()
  nameWithType: CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndUnRestrictedScenarios()
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndUnRestrictedScenarios()
  type: Method
  source:
    remote:
      path: ASE_Assignment/ASE_Assignment_Test/CommandsUnitTests.cs
      branch: main
      repo: https://github.com/ASE-Classroom/ase-demo-assignment-bsameer12.git
    id: Test_ArrayCommand_ShouldHandleValidAndUnRestrictedScenarios
    path: ASE_Assignment_Test/CommandsUnitTests.cs
    startLine: 369
  assemblies:
  - ASE_Assignment_Test
  namespace: ASE_Assignment_Test
  summary: Tests the execution of a valid 'array'  command with unrestricted scenarios.
  remarks: >-
    The test verifies that a 'array'  with valid which violates restrictions 

    and executes commands correctly.
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Test_ArrayCommand_ShouldHandleValidAndUnRestrictedScenarios()
    content.vb: >-
      <TestMethod>

      Public Sub Test_ArrayCommand_ShouldHandleValidAndUnRestrictedScenarios()
  overload: ASE_Assignment_Test.CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndUnRestrictedScenarios*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
- uid: ASE_Assignment_Test.CommandUnitTests.Test_ReaLCommand_ShouldHandleValidAndUnRestrictedScenarios
  commentId: M:ASE_Assignment_Test.CommandUnitTests.Test_ReaLCommand_ShouldHandleValidAndUnRestrictedScenarios
  id: Test_ReaLCommand_ShouldHandleValidAndUnRestrictedScenarios
  parent: ASE_Assignment_Test.CommandUnitTests
  langs:
  - csharp
  - vb
  name: Test_ReaLCommand_ShouldHandleValidAndUnRestrictedScenarios()
  nameWithType: CommandUnitTests.Test_ReaLCommand_ShouldHandleValidAndUnRestrictedScenarios()
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_ReaLCommand_ShouldHandleValidAndUnRestrictedScenarios()
  type: Method
  source:
    remote:
      path: ASE_Assignment/ASE_Assignment_Test/CommandsUnitTests.cs
      branch: main
      repo: https://github.com/ASE-Classroom/ase-demo-assignment-bsameer12.git
    id: Test_ReaLCommand_ShouldHandleValidAndUnRestrictedScenarios
    path: ASE_Assignment_Test/CommandsUnitTests.cs
    startLine: 402
  assemblies:
  - ASE_Assignment_Test
  namespace: ASE_Assignment_Test
  summary: Tests the execution of a valid 'array'  command with unrestricted scenarios.
  remarks: >-
    The test verifies that a 'array'  with valid which violates restrictions 

    and executes commands correctly.
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Test_ReaLCommand_ShouldHandleValidAndUnRestrictedScenarios()
    content.vb: >-
      <TestMethod>

      Public Sub Test_ReaLCommand_ShouldHandleValidAndUnRestrictedScenarios()
  overload: ASE_Assignment_Test.CommandUnitTests.Test_ReaLCommand_ShouldHandleValidAndUnRestrictedScenarios*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
- uid: ASE_Assignment_Test.CommandUnitTests.Test_ReaLCommandLoops_ShouldHandleValidAndRestrictedScenarios
  commentId: M:ASE_Assignment_Test.CommandUnitTests.Test_ReaLCommandLoops_ShouldHandleValidAndRestrictedScenarios
  id: Test_ReaLCommandLoops_ShouldHandleValidAndRestrictedScenarios
  parent: ASE_Assignment_Test.CommandUnitTests
  langs:
  - csharp
  - vb
  name: Test_ReaLCommandLoops_ShouldHandleValidAndRestrictedScenarios()
  nameWithType: CommandUnitTests.Test_ReaLCommandLoops_ShouldHandleValidAndRestrictedScenarios()
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_ReaLCommandLoops_ShouldHandleValidAndRestrictedScenarios()
  type: Method
  source:
    remote:
      path: ASE_Assignment/ASE_Assignment_Test/CommandsUnitTests.cs
      branch: main
      repo: https://github.com/ASE-Classroom/ase-demo-assignment-bsameer12.git
    id: Test_ReaLCommandLoops_ShouldHandleValidAndRestrictedScenarios
    path: ASE_Assignment_Test/CommandsUnitTests.cs
    startLine: 435
  assemblies:
  - ASE_Assignment_Test
  namespace: ASE_Assignment_Test
  summary: Tests the execution of a valid 'real'  command with restricted scenarios.
  remarks: >-
    The test verifies that a 'real'  with valid which do not violates restrictions 

    and executes commands correctly.
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Test_ReaLCommandLoops_ShouldHandleValidAndRestrictedScenarios()
    content.vb: >-
      <TestMethod>

      Public Sub Test_ReaLCommandLoops_ShouldHandleValidAndRestrictedScenarios()
  overload: ASE_Assignment_Test.CommandUnitTests.Test_ReaLCommandLoops_ShouldHandleValidAndRestrictedScenarios*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
- uid: ASE_Assignment_Test.CommandUnitTests.Test_IntCommand_ShouldHandleValidAndRestrictedScenarios
  commentId: M:ASE_Assignment_Test.CommandUnitTests.Test_IntCommand_ShouldHandleValidAndRestrictedScenarios
  id: Test_IntCommand_ShouldHandleValidAndRestrictedScenarios
  parent: ASE_Assignment_Test.CommandUnitTests
  langs:
  - csharp
  - vb
  name: Test_IntCommand_ShouldHandleValidAndRestrictedScenarios()
  nameWithType: CommandUnitTests.Test_IntCommand_ShouldHandleValidAndRestrictedScenarios()
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_IntCommand_ShouldHandleValidAndRestrictedScenarios()
  type: Method
  source:
    remote:
      path: ASE_Assignment/ASE_Assignment_Test/CommandsUnitTests.cs
      branch: main
      repo: https://github.com/ASE-Classroom/ase-demo-assignment-bsameer12.git
    id: Test_IntCommand_ShouldHandleValidAndRestrictedScenarios
    path: ASE_Assignment_Test/CommandsUnitTests.cs
    startLine: 468
  assemblies:
  - ASE_Assignment_Test
  namespace: ASE_Assignment_Test
  summary: Tests the execution of a valid 'real'  command with unrestricted scenarios.
  remarks: >-
    The test verifies that a 'real'  with valid which violates restrictions 

    and executes commands correctly.
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Test_IntCommand_ShouldHandleValidAndRestrictedScenarios()
    content.vb: >-
      <TestMethod>

      Public Sub Test_IntCommand_ShouldHandleValidAndRestrictedScenarios()
  overload: ASE_Assignment_Test.CommandUnitTests.Test_IntCommand_ShouldHandleValidAndRestrictedScenarios*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
- uid: ASE_Assignment_Test.CommandUnitTests.Test_IntCommand_ShouldHandleValidAndUnRestrictedScenarios
  commentId: M:ASE_Assignment_Test.CommandUnitTests.Test_IntCommand_ShouldHandleValidAndUnRestrictedScenarios
  id: Test_IntCommand_ShouldHandleValidAndUnRestrictedScenarios
  parent: ASE_Assignment_Test.CommandUnitTests
  langs:
  - csharp
  - vb
  name: Test_IntCommand_ShouldHandleValidAndUnRestrictedScenarios()
  nameWithType: CommandUnitTests.Test_IntCommand_ShouldHandleValidAndUnRestrictedScenarios()
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_IntCommand_ShouldHandleValidAndUnRestrictedScenarios()
  type: Method
  source:
    remote:
      path: ASE_Assignment/ASE_Assignment_Test/CommandsUnitTests.cs
      branch: main
      repo: https://github.com/ASE-Classroom/ase-demo-assignment-bsameer12.git
    id: Test_IntCommand_ShouldHandleValidAndUnRestrictedScenarios
    path: ASE_Assignment_Test/CommandsUnitTests.cs
    startLine: 501
  assemblies:
  - ASE_Assignment_Test
  namespace: ASE_Assignment_Test
  summary: Tests the execution of a valid 'int'  command with unrestricted scenarios.
  remarks: >-
    The test verifies that a 'int'  with valid which violates restrictions 

    and executes commands correctly.
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Test_IntCommand_ShouldHandleValidAndUnRestrictedScenarios()
    content.vb: >-
      <TestMethod>

      Public Sub Test_IntCommand_ShouldHandleValidAndUnRestrictedScenarios()
  overload: ASE_Assignment_Test.CommandUnitTests.Test_IntCommand_ShouldHandleValidAndUnRestrictedScenarios*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
- uid: ASE_Assignment_Test.CommandUnitTests.Test_MultiLineCommand_ShouldHandleValidAndUnRestrictedScenarios
  commentId: M:ASE_Assignment_Test.CommandUnitTests.Test_MultiLineCommand_ShouldHandleValidAndUnRestrictedScenarios
  id: Test_MultiLineCommand_ShouldHandleValidAndUnRestrictedScenarios
  parent: ASE_Assignment_Test.CommandUnitTests
  langs:
  - csharp
  - vb
  name: Test_MultiLineCommand_ShouldHandleValidAndUnRestrictedScenarios()
  nameWithType: CommandUnitTests.Test_MultiLineCommand_ShouldHandleValidAndUnRestrictedScenarios()
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_MultiLineCommand_ShouldHandleValidAndUnRestrictedScenarios()
  type: Method
  source:
    remote:
      path: ASE_Assignment/ASE_Assignment_Test/CommandsUnitTests.cs
      branch: main
      repo: https://github.com/ASE-Classroom/ase-demo-assignment-bsameer12.git
    id: Test_MultiLineCommand_ShouldHandleValidAndUnRestrictedScenarios
    path: ASE_Assignment_Test/CommandsUnitTests.cs
    startLine: 534
  assemblies:
  - ASE_Assignment_Test
  namespace: ASE_Assignment_Test
  summary: Tests the execution of a valid 'multieline'  command with unrestricted scenarios.
  remarks: >-
    The test verifies that a 'multieline'  with valid which  violates restrictions 

    and executes commands correctly.
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Test_MultiLineCommand_ShouldHandleValidAndUnRestrictedScenarios()
    content.vb: >-
      <TestMethod>

      Public Sub Test_MultiLineCommand_ShouldHandleValidAndUnRestrictedScenarios()
  overload: ASE_Assignment_Test.CommandUnitTests.Test_MultiLineCommand_ShouldHandleValidAndUnRestrictedScenarios*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
- uid: ASE_Assignment_Test.CommandUnitTests.Test_ProgramSizeExceddingCommand_ShouldHandleValidAndUnRestrictedScenarios
  commentId: M:ASE_Assignment_Test.CommandUnitTests.Test_ProgramSizeExceddingCommand_ShouldHandleValidAndUnRestrictedScenarios
  id: Test_ProgramSizeExceddingCommand_ShouldHandleValidAndUnRestrictedScenarios
  parent: ASE_Assignment_Test.CommandUnitTests
  langs:
  - csharp
  - vb
  name: Test_ProgramSizeExceddingCommand_ShouldHandleValidAndUnRestrictedScenarios()
  nameWithType: CommandUnitTests.Test_ProgramSizeExceddingCommand_ShouldHandleValidAndUnRestrictedScenarios()
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_ProgramSizeExceddingCommand_ShouldHandleValidAndUnRestrictedScenarios()
  type: Method
  source:
    remote:
      path: ASE_Assignment/ASE_Assignment_Test/CommandsUnitTests.cs
      branch: main
      repo: https://github.com/ASE-Classroom/ase-demo-assignment-bsameer12.git
    id: Test_ProgramSizeExceddingCommand_ShouldHandleValidAndUnRestrictedScenarios
    path: ASE_Assignment_Test/CommandsUnitTests.cs
    startLine: 567
  assemblies:
  - ASE_Assignment_Test
  namespace: ASE_Assignment_Test
  summary: Tests the execution of a valid 'programexcedding'  command with unrestricted scenarios.
  remarks: >-
    The test verifies that a 'programexcedding'  with valid which violates restrictions 

    and executes commands correctly.
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Test_ProgramSizeExceddingCommand_ShouldHandleValidAndUnRestrictedScenarios()
    content.vb: >-
      <TestMethod>

      Public Sub Test_ProgramSizeExceddingCommand_ShouldHandleValidAndUnRestrictedScenarios()
  overload: ASE_Assignment_Test.CommandUnitTests.Test_ProgramSizeExceddingCommand_ShouldHandleValidAndUnRestrictedScenarios*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
references:
- uid: ASE_Assignment_Test
  commentId: N:ASE_Assignment_Test
  href: ASE_Assignment_Test.html
  name: ASE_Assignment_Test
  nameWithType: ASE_Assignment_Test
  fullName: ASE_Assignment_Test
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: ASE_Assignment_Test.CommandUnitTests.Setup*
  commentId: Overload:ASE_Assignment_Test.CommandUnitTests.Setup
  href: ASE_Assignment_Test.CommandUnitTests.html#ASE_Assignment_Test_CommandUnitTests_Setup
  name: Setup
  nameWithType: CommandUnitTests.Setup
  fullName: ASE_Assignment_Test.CommandUnitTests.Setup
- uid: ASE_Assignment_Test.CommandUnitTests.Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg*
  commentId: Overload:ASE_Assignment_Test.CommandUnitTests.Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg
  href: ASE_Assignment_Test.CommandUnitTests.html#ASE_Assignment_Test_CommandUnitTests_Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg
  name: Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg
  nameWithType: CommandUnitTests.Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg
- uid: ASE_Assignment_Test.CommandUnitTests.Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg*
  commentId: Overload:ASE_Assignment_Test.CommandUnitTests.Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg
  href: ASE_Assignment_Test.CommandUnitTests.html#ASE_Assignment_Test_CommandUnitTests_Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg
  name: Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg
  nameWithType: CommandUnitTests.Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg
- uid: ASE_Assignment_Test.CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndRestrictedScenarios*
  commentId: Overload:ASE_Assignment_Test.CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndRestrictedScenarios
  href: ASE_Assignment_Test.CommandUnitTests.html#ASE_Assignment_Test_CommandUnitTests_Test_ForCommandLoops_ShouldHandleValidAndRestrictedScenarios
  name: Test_ForCommandLoops_ShouldHandleValidAndRestrictedScenarios
  nameWithType: CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndRestrictedScenarios
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndRestrictedScenarios
- uid: ASE_Assignment_Test.CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndUnRestrictedScenarios*
  commentId: Overload:ASE_Assignment_Test.CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
  href: ASE_Assignment_Test.CommandUnitTests.html#ASE_Assignment_Test_CommandUnitTests_Test_ForCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
  name: Test_ForCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
  nameWithType: CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_ForCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
- uid: ASE_Assignment_Test.CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndUnRestrictedScenarios*
  commentId: Overload:ASE_Assignment_Test.CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
  href: ASE_Assignment_Test.CommandUnitTests.html#ASE_Assignment_Test_CommandUnitTests_Test_WhileCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
  name: Test_WhileCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
  nameWithType: CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndUnRestrictedScenarios
- uid: ASE_Assignment_Test.CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndRestrictedScenarios*
  commentId: Overload:ASE_Assignment_Test.CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndRestrictedScenarios
  href: ASE_Assignment_Test.CommandUnitTests.html#ASE_Assignment_Test_CommandUnitTests_Test_WhileCommandLoops_ShouldHandleValidAndRestrictedScenarios
  name: Test_WhileCommandLoops_ShouldHandleValidAndRestrictedScenarios
  nameWithType: CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndRestrictedScenarios
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_WhileCommandLoops_ShouldHandleValidAndRestrictedScenarios
- uid: ASE_Assignment_Test.CommandUnitTests.Test_IfCommand_ShouldHandleValidAndUnRestrictedScenarios*
  commentId: Overload:ASE_Assignment_Test.CommandUnitTests.Test_IfCommand_ShouldHandleValidAndUnRestrictedScenarios
  href: ASE_Assignment_Test.CommandUnitTests.html#ASE_Assignment_Test_CommandUnitTests_Test_IfCommand_ShouldHandleValidAndUnRestrictedScenarios
  name: Test_IfCommand_ShouldHandleValidAndUnRestrictedScenarios
  nameWithType: CommandUnitTests.Test_IfCommand_ShouldHandleValidAndUnRestrictedScenarios
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_IfCommand_ShouldHandleValidAndUnRestrictedScenarios
- uid: ASE_Assignment_Test.CommandUnitTests.Test_IfCommand_ShouldHandleValidAndRestrictedScenarios*
  commentId: Overload:ASE_Assignment_Test.CommandUnitTests.Test_IfCommand_ShouldHandleValidAndRestrictedScenarios
  href: ASE_Assignment_Test.CommandUnitTests.html#ASE_Assignment_Test_CommandUnitTests_Test_IfCommand_ShouldHandleValidAndRestrictedScenarios
  name: Test_IfCommand_ShouldHandleValidAndRestrictedScenarios
  nameWithType: CommandUnitTests.Test_IfCommand_ShouldHandleValidAndRestrictedScenarios
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_IfCommand_ShouldHandleValidAndRestrictedScenarios
- uid: ASE_Assignment_Test.CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndRestrictedScenarios*
  commentId: Overload:ASE_Assignment_Test.CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndRestrictedScenarios
  href: ASE_Assignment_Test.CommandUnitTests.html#ASE_Assignment_Test_CommandUnitTests_Test_ArrayCommand_ShouldHandleValidAndRestrictedScenarios
  name: Test_ArrayCommand_ShouldHandleValidAndRestrictedScenarios
  nameWithType: CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndRestrictedScenarios
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndRestrictedScenarios
- uid: ASE_Assignment_Test.CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndUnRestrictedScenarios*
  commentId: Overload:ASE_Assignment_Test.CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndUnRestrictedScenarios
  href: ASE_Assignment_Test.CommandUnitTests.html#ASE_Assignment_Test_CommandUnitTests_Test_ArrayCommand_ShouldHandleValidAndUnRestrictedScenarios
  name: Test_ArrayCommand_ShouldHandleValidAndUnRestrictedScenarios
  nameWithType: CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndUnRestrictedScenarios
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_ArrayCommand_ShouldHandleValidAndUnRestrictedScenarios
- uid: ASE_Assignment_Test.CommandUnitTests.Test_ReaLCommand_ShouldHandleValidAndUnRestrictedScenarios*
  commentId: Overload:ASE_Assignment_Test.CommandUnitTests.Test_ReaLCommand_ShouldHandleValidAndUnRestrictedScenarios
  href: ASE_Assignment_Test.CommandUnitTests.html#ASE_Assignment_Test_CommandUnitTests_Test_ReaLCommand_ShouldHandleValidAndUnRestrictedScenarios
  name: Test_ReaLCommand_ShouldHandleValidAndUnRestrictedScenarios
  nameWithType: CommandUnitTests.Test_ReaLCommand_ShouldHandleValidAndUnRestrictedScenarios
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_ReaLCommand_ShouldHandleValidAndUnRestrictedScenarios
- uid: ASE_Assignment_Test.CommandUnitTests.Test_ReaLCommandLoops_ShouldHandleValidAndRestrictedScenarios*
  commentId: Overload:ASE_Assignment_Test.CommandUnitTests.Test_ReaLCommandLoops_ShouldHandleValidAndRestrictedScenarios
  href: ASE_Assignment_Test.CommandUnitTests.html#ASE_Assignment_Test_CommandUnitTests_Test_ReaLCommandLoops_ShouldHandleValidAndRestrictedScenarios
  name: Test_ReaLCommandLoops_ShouldHandleValidAndRestrictedScenarios
  nameWithType: CommandUnitTests.Test_ReaLCommandLoops_ShouldHandleValidAndRestrictedScenarios
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_ReaLCommandLoops_ShouldHandleValidAndRestrictedScenarios
- uid: ASE_Assignment_Test.CommandUnitTests.Test_IntCommand_ShouldHandleValidAndRestrictedScenarios*
  commentId: Overload:ASE_Assignment_Test.CommandUnitTests.Test_IntCommand_ShouldHandleValidAndRestrictedScenarios
  href: ASE_Assignment_Test.CommandUnitTests.html#ASE_Assignment_Test_CommandUnitTests_Test_IntCommand_ShouldHandleValidAndRestrictedScenarios
  name: Test_IntCommand_ShouldHandleValidAndRestrictedScenarios
  nameWithType: CommandUnitTests.Test_IntCommand_ShouldHandleValidAndRestrictedScenarios
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_IntCommand_ShouldHandleValidAndRestrictedScenarios
- uid: ASE_Assignment_Test.CommandUnitTests.Test_IntCommand_ShouldHandleValidAndUnRestrictedScenarios*
  commentId: Overload:ASE_Assignment_Test.CommandUnitTests.Test_IntCommand_ShouldHandleValidAndUnRestrictedScenarios
  href: ASE_Assignment_Test.CommandUnitTests.html#ASE_Assignment_Test_CommandUnitTests_Test_IntCommand_ShouldHandleValidAndUnRestrictedScenarios
  name: Test_IntCommand_ShouldHandleValidAndUnRestrictedScenarios
  nameWithType: CommandUnitTests.Test_IntCommand_ShouldHandleValidAndUnRestrictedScenarios
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_IntCommand_ShouldHandleValidAndUnRestrictedScenarios
- uid: ASE_Assignment_Test.CommandUnitTests.Test_MultiLineCommand_ShouldHandleValidAndUnRestrictedScenarios*
  commentId: Overload:ASE_Assignment_Test.CommandUnitTests.Test_MultiLineCommand_ShouldHandleValidAndUnRestrictedScenarios
  href: ASE_Assignment_Test.CommandUnitTests.html#ASE_Assignment_Test_CommandUnitTests_Test_MultiLineCommand_ShouldHandleValidAndUnRestrictedScenarios
  name: Test_MultiLineCommand_ShouldHandleValidAndUnRestrictedScenarios
  nameWithType: CommandUnitTests.Test_MultiLineCommand_ShouldHandleValidAndUnRestrictedScenarios
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_MultiLineCommand_ShouldHandleValidAndUnRestrictedScenarios
- uid: ASE_Assignment_Test.CommandUnitTests.Test_ProgramSizeExceddingCommand_ShouldHandleValidAndUnRestrictedScenarios*
  commentId: Overload:ASE_Assignment_Test.CommandUnitTests.Test_ProgramSizeExceddingCommand_ShouldHandleValidAndUnRestrictedScenarios
  href: ASE_Assignment_Test.CommandUnitTests.html#ASE_Assignment_Test_CommandUnitTests_Test_ProgramSizeExceddingCommand_ShouldHandleValidAndUnRestrictedScenarios
  name: Test_ProgramSizeExceddingCommand_ShouldHandleValidAndUnRestrictedScenarios
  nameWithType: CommandUnitTests.Test_ProgramSizeExceddingCommand_ShouldHandleValidAndUnRestrictedScenarios
  fullName: ASE_Assignment_Test.CommandUnitTests.Test_ProgramSizeExceddingCommand_ShouldHandleValidAndUnRestrictedScenarios
